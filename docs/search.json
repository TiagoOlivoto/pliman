[{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Analyzing objects in an image","text":"function analyze_objects() can used count objects image. Let us start simple example image object_300dpi.png available GitHub page. facilitate image importation folder, helper function image_pliman() used.  image produced Microsoft PowerPoint. known resolution 300 dpi (dots per inch) shows four objects Larger square: 10 x 10 cm (100 cm2) Smaller square: 5 x 5 cm (25 cm2) Rectangle: 4 x 2 cm (8 cm2) Circle: 3 cm diameter (~7.08 cm2) count objects image use analyze_objects() inform image object (mandatory argument). First, use image_binary() see suitable index segment objects background. default, R, G, B (first row) normalized values (second row) used.","code":"library(pliman) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 1.1.0)            | #> | Author: Tiago Olivoto                                    | #> | Type 'vignette('pliman_start')' for a short tutorial     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| img <- image_pliman(\"objects_300dpi.jpg\", plot = TRUE) image_binary(img)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"analyzing-objects","dir":"Articles","previous_headings":"","what":"Analyzing objects","title":"Analyzing objects in an image","text":"","code":"img_res <-    analyze_objects(img,                   marker = \"area\",                   index = \"B\") # use blue index to segment"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"adjusting-object-measures","dir":"Articles","previous_headings":"","what":"Adjusting object measures","title":"Analyzing objects in an image","text":"results stored img_res. Since scale declared example, idea actual area objects cm2, pixels. case, use get_measures() adjust measures pixels metric units. two main ways adjusting object measures (pixels cm, example). first one declare known area, perimeter, radius given object. measure objects computed simple rule three. second one declaring known image resolution dpi (dots per inch). case, perimeter, area, radius adjusted informed dpi.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"declaring-a-known-value","dir":"Articles","previous_headings":"","what":"Declaring a known value","title":"Analyzing objects in an image","text":"Since known area larger square (object 1), let us adjust area objects image using . can used adjust measures based perimeter radius. Let us adjust perimeter objects perimeter object 2 (20 cm).","code":"get_measures(img_res,              id = 1,              area ~ 100) #> ----------------------------------------- #> measures corrected with: #> object id: 1 #> area     : 100 #> ----------------------------------------- #> Total    : 140.037  #> Average  : 35.009  #> ----------------------------------------- #>   id        x        y    area area_ch perimeter radius_mean radius_min #> 1  1  669.000  798.000 100.000  99.831    39.924       5.733      4.995 #> 2  2 1737.502  453.000  25.000  24.915    19.949       2.864      2.492 #> 3  3 1737.590 1296.339   7.051   7.046     8.552       1.494      1.481 #> 4  4 1737.496  939.498   7.986   7.935    11.905       1.671      0.994 #>   radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1      7.059    74.266        1.413    11.465    9.989   14.118     11.547 #> 2      3.528    37.117        1.416     5.728    4.983    7.056      5.778 #> 3      1.506     0.567        1.017     2.989    2.963    3.013      2.997 #> 4      2.224    49.872        2.239     3.341    1.987    4.448      4.614 #>   minor_axis eccentricity theta solidity circularity #> 1     11.547        0.002 0.785    1.002       0.788 #> 2      5.769        0.058 1.571    1.003       0.789 #> 3      2.995        0.036 0.028    1.001       1.212 #> 4      2.307        0.866 0.000    1.006       0.708 get_measures(img_res,              id = 2,              perimeter ~ 20) #> ----------------------------------------- #> measures corrected with: #> object id: 2 #> perimeter     : 20 #> ----------------------------------------- #> Total    : 80.535  #> Average  : 20.134  #> ----------------------------------------- #>   id        x        y    area area_ch perimeter radius_mean radius_min #> 1  1  669.000  798.000 100.509 100.339    40.025       5.747      5.007 #> 2  2 1737.502  453.000  25.127  25.042    20.000       2.871      2.498 #> 3  3 1737.590 1296.339   7.087   7.081     8.574       1.498      1.485 #> 4  4 1737.496  939.498   8.026   7.976    11.935       1.675      0.996 #>   radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1      7.077    74.266        1.413    11.495   10.015   14.154     11.576 #> 2      3.537    37.117        1.416     5.743    4.996    7.074      5.793 #> 3      1.510     0.567        1.017     2.996    2.971    3.021      3.005 #> 4      2.230    49.872        2.239     3.350    1.992    4.460      4.626 #>   minor_axis eccentricity theta solidity circularity #> 1     11.576        0.002 0.785    1.002       0.788 #> 2      5.783        0.058 1.571    1.003       0.789 #> 3      3.003        0.036 0.028    1.001       1.212 #> 4      2.313        0.866 0.000    1.006       0.708"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"declaring-the-image-resolution","dir":"Articles","previous_headings":"","what":"Declaring the image resolution","title":"Analyzing objects in an image","text":"image resolution known, measures adjusted according resolution. Let us see numerical example pixels_to_cm(). function converts number pixels (\\(px\\)) cm, considering image resolution \\(dpi\\), follows: \\(cm = px \\times (2.54/dpi)\\). Since know number pixels larger square, perimeter cm given perimeter object 1 adjusted image resolution close true (40 cm). Bellow, values measures adjusted declaring dpi argument get_measures().","code":"# number of pixels for the highest square perimeter ls_px <- img_res$results$perimeter[1] pixels_to_cm(px = ls_px, dpi = 300) #> [1] 39.92033 get_measures(img_res, dpi = 300) #>   id        x        y   area area_ch perimeter radius_mean radius_min #> 1  1  669.000  798.000 99.982  99.813    39.920       5.732      4.994 #> 2  2 1737.502  453.000 24.996  24.911    19.947       2.864      2.491 #> 3  3 1737.590 1296.339  7.050   7.044     8.551       1.494      1.481 #> 4  4 1737.496  939.498  7.984   7.934    11.904       1.671      0.993 #>   radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1      7.058    74.266        1.413    11.464    9.989   14.117     11.546 #> 2      3.528    37.117        1.416     5.728    4.983    7.055      5.778 #> 3      1.506     0.567        1.017     2.988    2.963    3.013      2.997 #> 4      2.224    49.872        2.239     3.341    1.987    4.448      4.614 #>   minor_axis eccentricity theta solidity circularity #> 1     11.546        0.002 0.785    1.002       0.788 #> 2      5.768        0.058 1.571    1.003       0.789 #> 3      2.995        0.036 0.028    1.001       1.212 #> 4      2.307        0.866 0.000    1.006       0.708"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"counting-crop-grains","dir":"Articles","previous_headings":"","what":"Counting crop grains","title":"Analyzing objects in an image","text":", count grains image soybean_touch.jpg. image cyan background contains 30 soybean grains touch . Two segmentation strategies used. first one using image segmentation based color indexes.  function analyze_objects() segment image using default normalized blue index, follows \\(NB = (B/(R+G+B))\\), \\(R\\), \\(G\\), \\(B\\) red, green, blue bands. Objects count segmented objects colored random permutations.  Users can set show_contour = FALSE remove contour line identify objects (example grains) using arguments marker = \"id\". color background can also changed col_background.  following example, select objects area average objects using lower_size = 2057.36. Additionally, use argument show_original = FALSE show results colors (non-original image).  Users can also use topn_* arguments select top n objects based either smaller largest areas. Let’s see point 5 grains smallest area, showing original grains blue background. also use argument my_index choose personalized index segment image. Just comparison, set explicitly normalized blue index calling my_index = \"B/(R+G+B)\".","code":"soy <-        image_pliman(\"soybean_touch.jpg\") grain <-      image_pliman(\"soybean_grain.jpg\") background <- image_pliman(\"la_back.jpg\") image_combine(soy, grain, background, ncol = 3) count2 <-    analyze_objects(soy,                   index = \"NB\") # default count <-    analyze_objects(soy,                   show_contour = FALSE,                   marker = \"id\",                   show_segmentation = FALSE,                   col_background = \"white\",                   index = \"NB\") # default # Get the object measures (measures <- get_measures(count)) #>    id       x       y area area_ch perimeter radius_mean radius_min radius_max #> 1   1 245.833 509.841 2286    2321       158      26.543     22.763     28.941 #> 2   2 538.056 401.896 2299    2258       153      26.607     24.957     28.400 #> 3   3 237.592 339.825 2312    2282       152      26.699     23.965     29.044 #> 4   4 345.357 105.783 2445    2406       158      27.513     24.682     30.471 #> 5   5 406.931  77.549 2302    2264       153      26.649     23.965     29.636 #> 6   6 277.445 260.559 2163    2120       149      25.766     24.291     27.887 #> 7   7 301.206 370.092 2217    2202       154      26.113     23.591     28.687 #> 8   8 192.828 379.645 2207    2176       149      26.105     23.715     28.858 #> 9   9 434.710 553.707 2174    2132       148      25.890     23.750     28.506 #> 10 10 594.744  47.311 2219    2182       153      26.160     23.352     29.659 #> 11 11 468.997  56.425 2315    2275       155      26.765     23.031     30.780 #> 12 12 461.172 156.027 2175    2131       148      25.933     23.071     29.512 #> 13 13 202.075 203.461 2188    2166       153      26.008     22.487     29.808 #> 14 14 403.486 169.015 2035    1994       143      25.019     22.398     27.010 #> 15 15 245.987 221.375 2117    2091       148      25.528     21.950     29.113 #> 16 16 250.400 436.934 1964    1928       142      24.552     22.971     26.258 #> 17 17  84.671 206.432 2183    2144       151      25.923     22.825     28.743 #> 18 18 448.412 296.209 2068    2023       145      25.196     23.357     27.032 #> 19 19 296.178 186.505 2056    2012       144      25.132     22.639     27.213 #> 20 20 321.973 321.691 1978    1982       151      24.635     21.223     27.370 #> 21 21 550.202 200.506 1939    1902       141      24.400     22.578     26.353 #> 22 22 106.294 432.089 1922    1886       140      24.304     22.838     26.264 #> 23 23 242.940 388.543 1926    1942       146      24.391     22.412     27.420 #> 24 24 492.988 344.441 1891    1855       139      24.076     21.894     25.988 #> 25 25 721.705 586.342 1915    1873       140      24.250     21.886     26.818 #> 26 26 510.468 158.372 1787    1767       137      23.466     21.173     26.180 #> 27 27  92.838 569.395 1743    1708       134      23.124     21.249     25.332 #> 28 28 281.037 474.071 1819    1923       154      23.484     17.887     27.203 #> 29 29 273.273 547.459 1710    1726       143      22.780     17.617     25.910 #> 30 30 265.292 143.411 1366    1331       117      20.405     18.590     22.030 #>    radius_sd radius_ratio diam_mean diam_min diam_max major_axis minor_axis #> 1      1.425        1.271    53.086   45.526   57.883     56.422     51.849 #> 2      0.935        1.138    53.214   49.914   56.800     56.604     51.733 #> 3      1.233        1.212    53.398   47.930   58.088     57.510     51.247 #> 4      1.730        1.235    55.027   49.365   60.942     60.922     51.105 #> 5      1.640        1.237    53.298   47.931   59.272     58.860     49.819 #> 6      0.765        1.148    51.532   48.581   55.774     53.963     51.097 #> 7      1.358        1.216    52.227   47.182   57.375     56.484     50.034 #> 8      1.488        1.217    52.210   47.431   57.717     57.339     49.030 #> 9      1.437        1.200    51.781   47.499   57.012     56.797     48.755 #> 10     1.856        1.270    52.320   46.704   59.319     58.590     48.249 #> 11     2.349        1.336    53.531   46.061   61.560     61.230     48.157 #> 12     1.656        1.279    51.866   46.142   59.024     57.396     48.284 #> 13     1.987        1.326    52.015   44.974   59.616     58.474     47.719 #> 14     1.168        1.206    50.038   44.796   54.020     54.002     48.012 #> 15     1.793        1.326    51.056   43.900   58.226     56.809     47.542 #> 16     0.798        1.143    49.104   45.943   52.515     51.553     48.573 #> 17     1.708        1.259    51.846   45.650   57.486     57.492     48.382 #> 18     0.993        1.157    50.392   46.714   54.063     53.898     48.857 #> 19     1.211        1.202    50.265   45.279   54.426     54.444     48.094 #> 20     1.595        1.290    49.271   42.445   54.739     52.546     48.202 #> 21     0.849        1.167    48.799   45.156   52.706     51.869     47.628 #> 22     0.891        1.150    48.608   45.675   52.528     51.942     47.122 #> 23     0.958        1.223    48.781   44.825   54.840     50.517     48.757 #> 24     1.180        1.187    48.152   43.789   51.976     52.247     46.096 #> 25     1.350        1.225    48.500   43.772   53.636     53.127     45.908 #> 26     1.009        1.236    46.932   42.345   52.360     48.654     47.026 #> 27     1.044        1.192    46.248   42.499   50.663     50.016     44.394 #> 28     2.497        1.521    46.968   35.773   54.405     49.847     47.188 #> 29     1.792        1.471    45.561   35.234   51.820     49.140     44.737 #> 30     0.772        1.185    40.809   37.181   44.060     43.697     39.816 #>    eccentricity  theta solidity circularity #> 1         0.394 -0.870    0.985       1.151 #> 2         0.406 -0.838    1.018       1.234 #> 3         0.454 -0.572    1.013       1.258 #> 4         0.544 -0.991    1.016       1.231 #> 5         0.533  1.144    1.017       1.236 #> 6         0.322 -0.163    1.020       1.224 #> 7         0.464 -1.493    1.007       1.175 #> 8         0.518  0.956    1.014       1.249 #> 9         0.513  0.946    1.020       1.247 #> 10        0.567 -1.032    1.017       1.191 #> 11        0.618  1.292    1.018       1.211 #> 12        0.541  1.090    1.021       1.248 #> 13        0.578 -1.131    1.010       1.175 #> 14        0.458 -1.094    1.021       1.251 #> 15        0.547 -1.282    1.012       1.215 #> 16        0.335 -1.383    1.019       1.224 #> 17        0.540  0.023    1.018       1.203 #> 18        0.422 -1.555    1.022       1.236 #> 19        0.469  1.549    1.022       1.246 #> 20        0.398  1.518    0.998       1.090 #> 21        0.396  0.733    1.019       1.226 #> 22        0.421  0.759    1.019       1.232 #> 23        0.262 -0.901    0.992       1.135 #> 24        0.471  1.505    1.019       1.230 #> 25        0.503  1.339    1.022       1.228 #> 26        0.257 -1.172    1.011       1.196 #> 27        0.461  0.812    1.020       1.220 #> 28        0.322  0.105    0.946       0.964 #> 29        0.414 -0.600    0.991       1.051 #> 30        0.412 -0.461    1.026       1.254 analyze_objects(soy,                 marker = \"id\",                 show_original = FALSE,                 lower_size = 2057.36,                 index = \"NB\") # default analyze_objects(soy,                 marker = \"id\",                 topn_lower = 5,                 col_background = \"blue\",                 my_index = \"B/(R+G+B)\") # default"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"using-sample-palettes","dir":"Articles","previous_headings":"","what":"Using sample palettes","title":"Analyzing objects in an image","text":"Sometimes difficult choose image index segments image efficiently (even using my_index ). pliman users alternative image segmentation strategy using sample color palettes. case, users can say analyze_objects color palettes used background foreground. generalized linear model (binomial family) used predict value pixel (background foreground). Let’s see grains image can counted strategy.  Provided images stored current working directory (subdirectory), users can count objects need first import image R environment. case, image names need declared characters. Assuming soy, background, grain images saved current working directory, result obtained ","code":"analyze_objects(img = soy,                 background = background,                 foreground = grain) analyze_objects(img = \"soy\",                 background = \"background\",                 foreground = \"grain\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"leaf-shape","dir":"Articles","previous_headings":"","what":"Leaf shape","title":"Analyzing objects in an image","text":"function analyze_objects() computes range object features can used study leaf shape. motivating example, use image potato_leaves.png, gathered Gupta et al. (2020)1  Three key measures (pixel units) : area area object. area_ch area convex hull. perimeter perimeter object. Using measures, circularity solidity computed shown (Gupta et al, 2020). \\[ circularity = 4\\pi(area / perimeter^2)\\] \\[solidity = area / area\\_ch\\] Circularity influenced serrations lobing. Solidity sensitive leaves deep lobes, distinct petiole, can used distinguish leaves lacking structures. Unlike circularity, sensitive serrations minor lobings, since convex hull remains largely unaffected.","code":"potato <- image_pliman(\"potato_leaves.jpg\", plot = TRUE) pot_meas <-   analyze_objects(potato,                   watershed = FALSE,                   marker = \"id\",                   show_chull = TRUE) # shows the convex hull print(pot_meas$results) #>   id        x        y  area area_ch perimeter radius_mean radius_min #> 1  1 854.5424 224.0429 51380   54536       852    131.5653   92.11085 #> 2  2 197.8440 217.8508 58923   76706      1064    140.2962   70.10608 #> 3  3 536.2100 240.2380 35117   62792      1310    109.9000   38.13658 #>   radius_max radius_sd radius_ratio diam_mean  diam_min diam_max major_axis #> 1   198.0248  26.06131     2.149854  263.1305 184.22169 396.0497   305.7374 #> 2   192.3613  28.58523     2.743861  280.5924 140.21215 384.7226   318.2436 #> 3   188.5105  35.50978     4.943037  219.8001  76.27315 377.0210   253.4985 #>   minor_axis eccentricity      theta  solidity circularity #> 1   242.2124    0.6102310  1.3936873 0.9421300   0.8894566 #> 2   274.1280    0.5079648 -0.0992339 0.7681668   0.6540508 #> 3   243.2790    0.2810738  1.0968854 0.5592591   0.2571489"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"object-contour","dir":"Articles","previous_headings":"","what":"Object contour","title":"Analyzing objects in an image","text":"Users can also obtain object contour convex hull follows:","code":"cont <-   object_contour(potato,                  watershed = FALSE,                  show_image = FALSE) plot(potato) plot_contour(cont, col = \"red\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"convex-hull","dir":"Articles","previous_headings":"","what":"Convex hull","title":"Analyzing objects in an image","text":"function object_contour() returns list coordinate points object contour can used obtain convex hull conv_hull().","code":"conv <- conv_hull(cont) plot(potato) plot_contour(conv, col = \"red\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"area-of-the-convex-hull","dir":"Articles","previous_headings":"","what":"Area of the convex hull","title":"Analyzing objects in an image","text":", area convex hull can obtained poly_area().","code":"(area <- poly_area(conv)) #> $`1` #> [1] 54536 #>  #> $`2` #> [1] 76706 #>  #> $`3` #> [1] 62792.5"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"leaves-as-base-plot","dir":"Articles","previous_headings":"","what":"Leaves as base plot","title":"Analyzing objects in an image","text":"ggplot2","code":"# create a data frame for contour and convex hull df_cont <-   do.call(rbind,           lapply(seq_along(cont), function(i){             transform(cont[[i]], object = names(cont[i]))           }))  df_conv <-     do.call(rbind,           lapply(seq_along(conv), function(i){             transform(conv[[i]], object = names(conv[i]))           }))   # plot the objects palette(c(\"red\",\"blue\",\"green\")) with(df_cont,      plot(X1, X2,            cex = 0.5,           col = object,           xlab = NA,           ylab = NA,           axes = F)) with(subset(df_conv, object == 1),      polygon(x, y,               col = rgb(1, 0, 0, 0.2),              border = NA)) with(subset(df_conv, object == 2),      polygon(x, y,               col = rgb(0, 0, 1, 0.2),              border = NA)) with(subset(df_conv, object == 3),      polygon(x, y,               col = rgb(0, 1, 0, 0.2),              border = NA)) library(ggplot2) ggplot(df_cont, aes(X1, X2, group = object)) +   geom_polygon(aes(fill = object)) +   geom_polygon(data = df_conv,                aes(x, y, fill = object),                alpha = 0.3) +   theme_void() +   theme(legend.position = \"bottom\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"batch-processing","dir":"Articles","previous_headings":"","what":"Batch processing","title":"Analyzing objects in an image","text":"plant image analysis, frequently necessary process one image. example, plant breeding, number grains per plant (e.g., wheat) frequently used indirect selection high-yielding plants. pliman, batch processing can done user declares argument pattern. following example used count objects images pattern name \"trat\" (e.g., \"trat1\", \"trat2\", \"tratn\") saved subfolder \"originals\" current working directory. processed images saved subfolder \"processed\". object list_res list two objects (results statistics) image. speed processing time, especially large number images, argument parallel = TRUE can used. case, images processed asynchronously (parallel) separate R sessions running background machine. number sections set 50% available cores. number can controlled explicitly argument workers.","code":"list_res <-    analyze_objects(pattern = \"trat\", # matches the name pattern in 'originals' subfolder                   dir_original = \"originals\",                   dir_processed = \"processed\",                   parallel = TRUE, # parallel processing                   workers = 8, # 8 multiple sections                   save_image = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Analyzing objects in an image","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Measure leaf area using leaf images","text":"can use analyze_objects() compute object features area, perimeter, radius, etc. can used, example, compute leaf area. Let’s compute leaf area leaves analyze_objects(). First, use image_segmentation() identify candidate indexes segment foreground (leaves) background.   G (Green) NB (Normalized Blue) two possible candidates segment leaves background. use NB index (default option analyze_objects()). measurement leaf area approach can done two main ways: 1) using object known area, 2) knowing image resolution dpi (dots per inch).","code":"library(pliman) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 1.1.0)            | #> | Author: Tiago Olivoto                                    | #> | Type 'vignette('pliman_start')' for a short tutorial     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| path <- \"https://raw.githubusercontent.com/TiagoOlivoto/pliman/master/vignettes/imgs\" leaves <-    image_import(\"leaves2.jpg\",                path = path,                plot = TRUE) image_segment(leaves, index = \"all\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"using-an-object-of-known-area","dir":"Articles","previous_headings":"","what":"Using an object of known area","title":"Measure leaf area using leaf images","text":"Count number objects (leaves case) , use argument marker = \"id\" function analyze_objects() obtain identification object (leaf), allowing adjustment leaf area.  Note “holes” leaves resulted segmentation one leaf one object (e.g., 5, 8, 22, 25, 18, 28). affect total leaf area, area individual leaves average leaf area. can solved either setting argument fill_hull = TRUE watershed = FALSE (don’t implement watershed-based object segmentation). Let’s see much better can go.  Almost ! Due morphology leaf composed objects 2 23, segmented two objects. can solved setting argument object_size = \"large\" change default (medium) values tolerance extension arguments.  objects touching , argument watershed = FALSE better option.  ! Now, leaves identified correctly, measures given pixel units. next step convert measures metric units. Convert leaf area area known object function get_measures() used adjust leaf area using object 10, square side 5 cm (25 cm\\(^2\\)).","code":"count <- analyze_objects(leaves, marker = \"id\") count <-   analyze_objects(leaves,                   marker = \"id\",                   fill_hull = TRUE) count <-   analyze_objects(leaves,                   marker = \"id\",                   fill_hull = TRUE,                   object_size = \"large\") analyze_objects(leaves,                 watershed = FALSE) area <-   get_measures(count,                id = 10,                area ~ 25) #> ----------------------------------------- #> measures corrected with: #> object id: 10 #> area     : 25 #> ----------------------------------------- #> Total    : 822.014  #> Average  : 35.74  #> ----------------------------------------- area #>    id        x       y    area area_ch perimeter radius_mean radius_min #> 1   1  276.129 221.430 117.823 118.100    38.381       6.256      4.469 #> 2   2  912.046 191.121 112.962 143.620    55.562       5.959      3.425 #> 3   3  117.277 501.002  94.569 100.538    46.218       6.267      2.653 #> 4   4  533.671 164.067  57.425  58.129    27.078       4.360      3.140 #> 5   5  690.167 172.731  52.138  54.020    26.475       4.231      3.103 #> 6   6  224.914 751.209  50.626  53.551    25.872       4.051      2.918 #> 7   7 1047.062 424.418  61.884  62.790    28.987       4.626      2.986 #> 8   8  865.070 761.262  39.607  40.831    23.159       3.664      2.631 #> 9   9  871.498 486.609  37.911  40.834    23.963       3.574      2.419 #> 10 10  605.991 664.123  25.000  24.876    19.592       2.835      2.411 #> 11 11  967.756 628.918  30.204  30.613    19.341       3.189      2.378 #> 12 12  597.344 378.935  28.379  32.082    21.752       3.144      1.962 #> 13 13  503.668 584.456  25.792  27.186    22.707       3.447      1.585 #> 14 14  385.436 423.892  20.684  21.997    20.346       2.974      1.402 #> 15 15  423.393 176.371  15.518  16.028    16.578       2.455      1.170 #> 16 16  847.125 626.891  10.441  10.837    12.258       1.924      1.256 #> 17 17  712.599 457.976   9.118   9.131    13.463       1.950      0.777 #> 18 18  353.365 740.398   5.830   6.231     9.897       1.533      0.872 #> 19 19  641.395 535.291   4.603   4.505     7.485       1.213      0.839 #> 20 20  738.920 711.817   8.089   8.646    15.171       1.900      0.492 #> 21 21  344.537 602.703   5.370   5.946    11.806       1.621      0.344 #> 22 22  714.360 576.056   3.788   3.690     7.134       1.120      0.645 #> 23 23  473.760 785.686   4.252   4.661    27.781       3.482      0.137 #>    radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1       9.246    27.138        2.069    12.513    8.938   18.492     16.615 #> 2       8.575    20.758        2.504    11.919    6.849   17.150     13.672 #> 3      10.691    46.500        4.030    12.534    5.306   21.383     18.979 #> 4       6.364    16.271        2.027     8.719    6.280   12.728     10.962 #> 5       6.413    16.586        2.066     8.461    6.207   12.825     10.207 #> 6       5.930    11.935        2.032     8.101    5.836   11.859      9.086 #> 7       7.148    23.705        2.394     9.252    5.972   14.296     12.675 #> 8       5.519    14.081        2.097     7.327    5.263   11.037      8.835 #> 9       5.417    14.594        2.239     7.149    4.839   10.834      8.419 #> 10      3.475     6.134        1.441     5.669    4.822    6.950      5.869 #> 11      4.727    13.566        1.988     6.377    4.756    9.454      8.160 #> 12      4.982    15.198        2.539     6.287    3.924    9.963      7.543 #> 13      5.942    26.280        3.748     6.894    3.171   11.885      9.993 #> 14      5.099    22.338        3.636     5.949    2.805   10.197      8.773 #> 15      4.095    16.808        3.500     4.909    2.340    8.190      7.356 #> 16      3.026    10.113        2.409     3.849    2.512    6.051      5.006 #> 17      3.415    14.864        4.394     3.901    1.555    6.831      6.087 #> 18      2.624     9.952        3.009     3.066    1.744    5.247      4.024 #> 19      1.754     5.726        2.089     2.426    1.679    3.507      3.384 #> 20      3.533    16.478        7.179     3.801    0.984    7.066      6.118 #> 21      2.997    14.938        8.712     3.243    0.688    5.994      5.516 #> 22      1.719     6.426        2.666     2.240    1.290    3.439      3.312 #> 23      6.947    39.753       50.583     6.965    0.275   13.895     14.308 #>    minor_axis eccentricity  theta solidity circularity #> 1       9.085        0.837  1.529    0.998       1.005 #> 2      11.440        0.548 -1.558    0.787       0.460 #> 3       6.677        0.936 -1.510    0.941       0.556 #> 4       6.751        0.788 -1.487    0.988       0.984 #> 5       6.630        0.760 -1.392    0.965       0.935 #> 6       7.450        0.572 -1.471    0.945       0.950 #> 7       6.297        0.868  1.404    0.986       0.926 #> 8       5.946        0.740 -1.329    0.970       0.928 #> 9       6.517        0.633 -1.476    0.928       0.830 #> 10      5.676        0.254 -1.563    1.005       0.818 #> 11      4.763        0.812  1.568    0.987       1.015 #> 12      5.828        0.635 -1.417    0.885       0.754 #> 13      3.449        0.939 -1.103    0.949       0.629 #> 14      3.146        0.934 -1.382    0.940       0.628 #> 15      2.772        0.926  1.554    0.968       0.710 #> 16      2.704        0.842  0.235    0.963       0.873 #> 17      1.984        0.945  1.424    0.999       0.632 #> 18      1.928        0.878 -0.519    0.936       0.748 #> 19      1.735        0.859 -1.546    1.022       1.032 #> 20      1.809        0.955  1.557    0.935       0.442 #> 21      1.373        0.969 -1.429    0.903       0.484 #> 22      1.473        0.896  1.421    1.027       0.935 #> 23      0.427        1.000 -0.037    0.912       0.069 # plot the area to the segmented image image_segment(leaves, index = \"NB\", verbose = FALSE) plot_measures(area,               measure = \"area\",               col = \"red\") # default is \"white\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"knowing-the-image-resolution-in-dpi-dots-per-inch","dir":"Articles","previous_headings":"","what":"knowing the image resolution in dpi (dots per inch)","title":"Measure leaf area using leaf images","text":"image resolution known, measures pixels obtained analyze_objects() corrected image resolution. function dpi() can used compute dpi image, provided size object known. See dpi section details. case, estimated resolution considering calibration object 10 ~50.8 DPIs. inform value dpi argument get_measures().","code":"area2 <- get_measures(count, dpi = 50.8) # compute the difference between the two methods sum(area$area - area2$area) #> [1] 7.724"},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Measure leaf area using leaf images","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"importing-images","dir":"Articles","previous_headings":"","what":"Importing images","title":"Image manipulation with pliman","text":"import list images, argument pattern function image_import() used. images match pattern name imported list.","code":"library(pliman) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 1.1.0)            | #> | Author: Tiago Olivoto                                    | #> | Type 'vignette('pliman_start')' for a short tutorial     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| soy <- image_pliman(\"soybean_touch.jpg\") soy_list <-    image_import(pattern = \"sev_\",                path = image_pliman()) # choose path directory names(soy_list) #> [1] \"sev_back.jpg\"    \"sev_healthy.jpg\" \"sev_leaf.jpg\"    \"sev_leaf_nb.jpg\" #> [5] \"sev_sympt.jpg\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"displaying-images","dir":"Articles","previous_headings":"","what":"Displaying images","title":"Image manipulation with pliman","text":"Single images displayed plot(). combining images, function image_combine() used. Users can inform either comma-separated list objects list objects class Image.","code":"# Single images plot(soy) # Combine images image_combine(soy, soy) # Combine images image_combine(soy_list, ncol = 5)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"manipulating-images","dir":"Articles","previous_headings":"","what":"Manipulating images","title":"Image manipulation with pliman","text":"pliman provides set image_*() functions perform image manipulation transformation unique images list images based EBImage package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"resize-an-image","dir":"Articles","previous_headings":"Manipulating images","what":"Resize an image","title":"Image manipulation with pliman","text":"Sometimes resizing high-resolution images needed reduce processing time. function image_resize() used resize image. argument rel_size can used resize image relative size. example, setting rel_size = 50 image width 1280 x 720, new image size 640 x 360. useful speed time analysis computed analyze_objects() measure_disease().","code":"image_dimension(soy) #>  #> ---------------------- #> Image dimension #> ---------------------- #> Width :  825  #> Height:  648 soy_resized <- image_resize(soy, rel_size = 50) image_dimension(soy_resized) #>  #> ---------------------- #> Image dimension #> ---------------------- #> Width :  412  #> Height:  324"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"crop-an-image","dir":"Articles","previous_headings":"Manipulating images","what":"Crop an image","title":"Image manipulation with pliman","text":"Cropping images useful remove noises image edge, well reduce size images processing. crop image, function image_crop() used. Users need inform numeric vector indicating pixel range (width height) maintained cropped image.  width height informed, image cropped vertically horizontally.  width height missing, iterative process image cropping performed. Additionally, automated cropping process can performed. case, image automatically cropped area objects edge five pixels default.  function image_trim() used trim pixels image edges.","code":"crop1 <-   image_crop(soy,              width = 55:750,              height = 20:623,              plot = TRUE) crop2 <-   image_crop(soy,              width = 55:750,              plot = TRUE) # only run in an iterative section image_crop(soy) auto_crop <- image_autocrop(soy, plot = TRUE) # trim 50 pixels from all edges soy_trim <- image_trim(soy, edge = 50, plot = TRUE)  # The same is achieved with soy_trim2 <-   image_trim(soy,              top = 50,              bottom = 50,              left = 50,              right = 50,              plot = TRUE) # trim 100 pixels from top and bottom soy_trim3 <-   image_trim(soy,              top = 100,              bottom = 100,              plot = TRUE) # trim to 5 pixels around objects' area"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"dpi","dir":"Articles","previous_headings":"Manipulating images","what":"Image resolution (DPI)","title":"Image manipulation with pliman","text":"function dpi() runs interactive function compute image resolution given known distance informed user. compute image resolution (dpi) user must use left button mouse create line known distance. can done, example, using template known distance image (e.g., leaves.JPG).","code":"# only run in an interactive section leaves <- image_import(\"./data/leaf_area/leaves.JPG\") dpi(leaves)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"rotate-an-image","dir":"Articles","previous_headings":"Manipulating images","what":"Rotate an image","title":"Image manipulation with pliman","text":"image_rotate() used rotates image clockwise given angle.","code":"soy_rotated <- image_rotate(soy, angle = 45, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"horizontal-and-vertical-reflection","dir":"Articles","previous_headings":"Manipulating images","what":"Horizontal and vertical reflection","title":"Image manipulation with pliman","text":"image_hreflect() image_vreflect() performs vertical horizontal reflection images, respectively.","code":"soy_hrefl <- image_hreflect(soy) soy_vrefl <- image_vreflect(soy) image_combine(soy, soy_hrefl, soy_vrefl, ncol = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"horizontal-and-vertical-conversion","dir":"Articles","previous_headings":"Manipulating images","what":"Horizontal and vertical conversion","title":"Image manipulation with pliman","text":"image_horizontal() image_vertical() converts (needed) image horizontal vertical image, respectively.","code":"soy_h <- image_horizontal(soy) soy_v <- image_vertical(soy) image_combine(soy, soy_h, soy_v, ncol = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"filter-blur-contrast-dilatation-and-erosion","dir":"Articles","previous_headings":"Manipulating images","what":"Filter, blur, contrast, dilatation, and erosion","title":"Image manipulation with pliman","text":"","code":"soy_filter <- image_filter(soy) soy_blur <- image_blur(soy) soy_contrast <- image_contrast(soy) soy_dilatation <- image_dilate(soy) soy_erosion <- image_erode(soy) image_combine(soy, soy_filter, soy_blur, soy_contrast, soy_dilatation, soy_erosion)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"exporting-images","dir":"Articles","previous_headings":"Manipulating images","what":"Exporting images","title":"Image manipulation with pliman","text":"export images current directory, use function image_export(). list images exported, images saved considering name extension present list. extension present, images saved *.jpg files.","code":"image_export(soy, \"exported.jpg\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Image manipulation with pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"single-images","dir":"Articles","previous_headings":"","what":"Single images","title":"Phytopatometry in R with the package pliman","text":"","code":"library(pliman) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 1.1.0)            | #> | Author: Tiago Olivoto                                    | #> | Type 'vignette('pliman_start')' for a short tutorial     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| # set the path directory path_soy <- \"https://raw.githubusercontent.com/TiagoOlivoto/pliman/master/vignettes/imgs\" # import images img <- image_import(\"leaf.jpg\", path = path_soy) healthy <- image_import(\"healthy.jpg\", path = path_soy) symptoms <- image_import(\"sympt.jpg\", path = path_soy) background <- image_import(\"back.jpg\", path = path_soy) image_combine(img, healthy, symptoms, background, ncol = 4)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"image-palettes","dir":"Articles","previous_headings":"","what":"Image palettes","title":"Phytopatometry in R with the package pliman","text":"Sample palettes can made simply manually sampling small areas representative images producing composite image represent desired classes (background, healthy, symptomatic tissues). Another way use image_palette() function create sample color palettes   Alternatively, users can create mask instead showing original image.","code":"pals <- image_palette(img, npal = 8) image_combine(pals, ncol = 4) # default settings res <-   measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background) res$severity #>   healthy symptomatic #> 1 88.9993     11.0007 # create a personalized mask res2 <-    measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background,                   show_original = FALSE, # create a mask                   show_contour = FALSE, # hide the contour line                   col_background = \"white\", # default                   col_lesions = \"red\", # default                   col_leaf = \"green\") # default res2$severity #>    healthy symptomatic #> 1 89.42177    10.57823"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"variations-in-image-palettes","dir":"Articles","previous_headings":"","what":"Variations in image palettes","title":"Phytopatometry in R with the package pliman","text":"results may vary depending palettes chosen subjective due researcher’s experience. following example, show second example variation color palettes, necrotic area assumed diseased tissue. Therefore, symptomatic area smaller previous one.","code":"# import images healthy2 <- image_import(\"healthy2.jpg\", path = path_soy) symptoms2 <- image_import(\"sympt2.jpg\", path = path_soy) background2 <- image_import(\"back2.jpg\", path = path_soy) image_combine(healthy2, symptoms2, background2, ncol = 3) res3 <-   measure_disease(img = img,                   img_healthy = healthy2,                   img_symptoms = symptoms2,                   img_background = background2) res3$severity #>    healthy symptomatic #> 1 93.59112    6.408879"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"lesion-features","dir":"Articles","previous_headings":"","what":"Lesion features","title":"Phytopatometry in R with the package pliman","text":"","code":"res4 <-   measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background,                   show_features = TRUE,                   marker = \"area\") res4$shape #>    id        x        y area perimeter radius_mean radius_min radius_max #> 1   1 222.2948 114.5885  960       169   22.079108  0.7835043  38.767075 #> 2   2 190.6214 130.1154 1231       215   20.057778  1.7904621  38.663801 #> 3   3 178.9375 213.9516 3617       401   49.837485  1.1931698  94.222357 #> 4   4 210.7399 194.5400 1761       217   23.716881  1.5763670  42.119603 #> 5   5 264.1000 193.6000  130        38    6.018896  4.2975384   7.843562 #> 6   6 120.6235 202.3412   85        29    4.764471  3.2292510   6.038422 #> 9   7 211.8628 329.1882  882       123   17.877896  7.3877571  30.237301 #> 11  8 281.3281 324.8633  256        53    8.838631  5.4952324  12.481285 #> 12  9 347.9771 335.8969  262        54    8.935616  5.6321875  12.396955 #> 13 10 184.7328 385.5600 1834       163   24.938035 12.0220982  37.688221 #> 14 11 334.4745 370.2847  137        38    6.238229  4.3579456   8.410026 #> 15 12 250.6716 377.4925  134        37    6.359633  3.3393420   8.967802 #> 17 13 173.4016 450.2818 2186       235   28.344963 12.5846882  46.523294 #> 20 14 108.9227 465.0628  207        57    8.012669  3.4861110  12.275149 #> 22 15 123.8629 493.3668  897       112   17.445020  9.3626279  27.366851 #> 23 16 150.0804 521.2864 1257       140   20.782409 10.6625513  32.361860 #>     radius_sd radius_ratio major_axis eccentricity       theta #> 1  11.2244311    49.479080   89.86495    0.9792251  1.39689332 #> 2   8.8719984    21.594314   71.79989    0.8920490  1.49109854 #> 3  25.3636087    78.968107  190.71690    0.9785593  1.16759570 #> 4  10.0315969    26.719415   80.87058    0.8465399  1.27700016 #> 5   1.0072635     1.825129   15.53860    0.7091755  0.06423295 #> 6   0.8153877     1.869914   12.38446    0.6869883  0.11255328 #> 9   6.2862796     4.092893   55.93356    0.9273418  1.54103872 #> 11  1.9136754     2.271293   24.28904    0.8244441 -0.47555967 #> 12  1.9407631     2.201091   24.59377    0.8249780  0.98116441 #> 13  7.4853060     3.134912   75.45401    0.9068672  1.20500061 #> 14  1.1644608     1.929814   16.43287    0.7429737  0.71296232 #> 15  1.5849202     2.685500   18.38356    0.8563692 -0.76948291 #> 17  9.7311394     3.696817   87.67233    0.8522661  0.97798292 #> 20  2.5364616     3.521158   22.69119    0.7906133  0.01225073 #> 22  5.4881348     2.922988   53.41278    0.9130101 -0.29202060 #> 23  5.9427049     3.035095   58.75824    0.8613246 -0.06366696 res4$statistics #>        stat      value #> 1         n    16.0000 #> 2  min_area    85.0000 #> 3 mean_area   989.7500 #> 4  max_area  3617.0000 #> 5   sd_area   982.8429 #> 6  sum_area 15836.0000"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Phytopatometry in R with the package pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Plant IMage Analysis","text":"pliman (plant image analysis) designed analyze plant images, especially related leaf analysis. provide color palettes, tell pliman one represents, takes care details. package help : Get object statistics (number, area, perimeter, etc.) analyze_objects(). Measure disease severity symptomatic_area(). Get RGB values object image objects_rgb(). Get object measures get_measures(). Plot objec measures plot_measures().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"leaf-area","dir":"Articles","previous_headings":"","what":"Leaf area","title":"Plant IMage Analysis","text":"function analyze_objects() can used measure leaf area image. pixel area can adjusted metric units (cm) two ways: () Using object known area correct measures (ii) knowing image resolution dpi (dots per inch). show first approach, first count number objects plot object id using argument marker = \"text\" function analyze_objects(). allows adjustment leaf area using known object, case leaf square, 4 cm\\(^2\\).  Adjust leaf area area known object function get_measures() used adjust leaf area using object 6.  image resolution known, can image dpi (dots per inch) correct pixel units given analyze_objects() metric units. function dpi() can used compute dpi image, provided size object known. See brief tutorial .","code":"library(pliman) # |==========================================================| # | Tools for Plant Image Analysis (pliman 1.1.0)            | # | Author: Tiago Olivoto                                    | # | Type 'vignette('pliman_start')' for a short tutorial     | # | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | # |==========================================================| leaves <- image_pliman(\"la_leaves.jpg\") plot(leaves) count <- analyze_objects(leaves, marker = \"id\") area <-    get_measures(count,                id = 6,                area ~ 4) # ----------------------------------------- # measures corrected with: # object id: 6 # area     : 4 # ----------------------------------------- # Total    : 149.331  # Average  : 24.888  # ----------------------------------------- area #   id       x       y   area area_ch perimeter radius_mean radius_min radius_max # 1  1 537.380 498.981 41.716  41.895    22.161       3.695      2.768      5.279 # 2  2 438.655 165.253 35.724  35.858    19.502       3.386      2.891      4.590 # 3  3 110.862 477.018 31.584  32.438    20.174       3.284      2.389      4.897 # 4  4 178.467 174.227 27.697  28.096    18.157       3.039      2.311      4.405 # 5  5 315.232 434.602  8.608   8.614     9.782       1.664      1.319      2.271 # 6  6 313.445 655.336  4.000   4.008     7.672       1.125      0.929      1.371 #   radius_sd radius_ratio diam_mean diam_min diam_max major_axis minor_axis # 1    21.561        1.907     7.391    5.536   10.558      9.196      5.904 # 2    13.655        1.588     6.772    5.782    9.181      7.891      5.823 # 3    21.404        2.050     6.569    4.779    9.794      7.989      5.207 # 4    17.091        1.906     6.077    4.623    8.810      7.242      5.005 # 5     8.608        1.721     3.328    2.639    4.542      4.095      2.697 # 6     3.862        1.475     2.250    1.859    2.742      2.394      2.215 #   eccentricity  theta solidity circularity # 1        0.767  1.538    0.996       1.067 # 2        0.675 -1.533    0.996       1.180 # 3        0.758  1.545    0.974       0.975 # 4        0.723  1.539    0.986       1.056 # 5        0.752 -1.467    0.999       1.131 # 6        0.380 -1.550    0.998       0.854 # plot the area to the segmented image image_segment(leaves, index = \"NB\", verbose = FALSE) plot_measures(area, measure = \"area\") get_measures(count, dpi = 84) #   id       x       y   area area_ch perimeter radius_mean radius_min radius_max # 1  1 537.380 498.981 40.823  40.997    21.923       3.656      2.738      5.222 # 2  2 438.655 165.253 34.959  35.090    19.292       3.350      2.860      4.541 # 3  3 110.862 477.018 30.908  31.743    19.957       3.249      2.364      4.844 # 4  4 178.467 174.227 27.104  27.494    17.961       3.006      2.286      4.357 # 5  5 315.232 434.602  8.424   8.429     9.676       1.646      1.305      2.247 # 6  6 313.445 655.336  3.914   3.923     7.590       1.113      0.919      1.356 #   radius_sd radius_ratio diam_mean diam_min diam_max major_axis minor_axis # 1    21.561        1.907     7.311    5.476   10.445      9.097      5.840 # 2    13.655        1.588     6.700    5.720    9.082      7.806      5.760 # 3    21.404        2.050     6.498    4.727    9.689      7.903      5.151 # 4    17.091        1.906     6.012    4.573    8.715      7.164      4.951 # 5     8.608        1.721     3.292    2.610    4.493      4.051      2.668 # 6     3.862        1.475     2.226    1.839    2.712      2.368      2.191 #   eccentricity  theta solidity circularity # 1        0.767  1.538    0.996       1.067 # 2        0.675 -1.533    0.996       1.180 # 3        0.758  1.545    0.974       0.975 # 4        0.723  1.539    0.986       1.056 # 5        0.752 -1.467    0.999       1.131 # 6        0.380 -1.550    0.998       0.854"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"counting-crop-grains","dir":"Articles","previous_headings":"","what":"Counting crop grains","title":"Plant IMage Analysis","text":", count grains image soybean_touch.jpg. image cyan background contains 30 soybean grains touch .","code":"soy <- image_pliman(\"soybean_touch.jpg\") plot(soy)  # Count the objects in the image grains <- analyze_objects(soy)  # Draws the object id (by default) plot_measures(grains)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"disease-severity","dir":"Articles","previous_headings":"","what":"Disease severity","title":"Plant IMage Analysis","text":"function measure_disease() used compute percentage symptomatic leaf area sample entire leaf based provided color palettes samples. general linear model (binomial family) fitted RGB values used segment lesions healthy leaf. pallet background provided, function takes care details isolate computing number area lesions. next example computes symptomatic area soybean leaf. proportion healthy symptomatic areas given proportion total leaf area, segmenting leaf background (blue).","code":"img <- image_pliman(\"sev_leaf.jpg\") healthy <- image_pliman(\"sev_healthy.jpg\") symptoms <- image_pliman(\"sev_sympt.jpg\") background <- image_pliman(\"sev_back.jpg\") image_combine(img, healthy, symptoms,background) # Computes the symptomatic area measure_disease(img = img,                 img_healthy = healthy,                 img_symptoms = symptoms,                 img_background = background,                 show_image = TRUE) # $severity #    healthy symptomatic # 1 89.26002    10.73998 #  # $shape # NULL #  # $statistics # NULL #  # attr(,\"class\") # [1] \"plm_disease\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"rgb-values-for-objects","dir":"Articles","previous_headings":"","what":"RGB values for objects","title":"Plant IMage Analysis","text":"function objects_rgb() can used get Red Green Blue (RGB) objects image. , RGB ","code":"img <- image_pliman(\"soy_green.jpg\") # Segment the foreground (grains) using the normalized blue index # Shows the average value of the blue index in each object  rgb <-    analyze_objects(img,                   object_index = \"B\",                   marker = \"index\") # Warning: Accepted 'marker' are: {id, x, y, area, area_ch, perimeter, # radius_mean, radius_min, radius_max, radius_sd, radius_ratio, diam_mean, # diam_min, diam_max, major_axis, minor_axis, eccentricity, theta, solidity, # circularity}. Drawing the object id. # plot the distribution of RGB values of each object plot(rgb)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"Plant IMage Analysis","text":"encounter clear bug, please file minimal reproducible example github Suggestions criticisms improve quality usability package welcome!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Plant IMage Analysis","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Image segmentation with pliman","text":"Image segmentation process partitioning digital image multiple segments (sets pixels image objects). context plant image analysis, segmentation used simplify representation image something easier analyze. example, using count_objects() count crop grains, first grains need isolated (segmented) background. pliman following functions can used segment image. pliman following functions can used segment image. image_binary() produce binary (black white) image image_segment() produce segmented image (image objects white background). image_segment_iter() segment image iteratively. functions segment image based value image index, may one RGB bands operation bands. Internally, functions call image_index() compute indexes. following indexes currently available. , use argument index\" test segmentation based RGB normalized values. Users can also provide index argument my_index.    example, can see distribution RGB values (first row) normalized RGB values (second row). two peaks represent grains (smaller peak) blue background (larger peak). clearer difference peaks, better image segmentation.","code":"library(pliman) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 1.1.0)            | #> | Author: Tiago Olivoto                                    | #> | Type 'vignette('pliman_start')' for a short tutorial     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| soy <- image_pliman(\"soybean_touch.jpg\") # Compute the indexes indexes <- image_index(soy, index = c(\"R, G, B, NR, NG, NB\")) # Create a raster plot with the RGB values plot(indexes) #> Warning in levelplot.formula(value ~ id * y | spectrum, layout = c(ncol, : #> device support for raster images unknown, ignoring 'raster=TRUE' # Create a density plot with the RGB values plot(indexes, type = \"density\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"segment-an-image","dir":"Articles","previous_headings":"","what":"Segment an image","title":"Image segmentation with pliman","text":"function image_segmentation() used segment images using image indexes. example, use indexes computed see image segmented. output function can used input function analyze_objects().  seems \"NB\" index provided better segmentation. \"R\" \"NR\" resulted inverted segmented image, .e., grains considered background remaining ‘selected’ image. circumvent problem, can use argument invert functions.","code":"segmented <- image_segment(soy, index = c(\"R, G, B, NR, NG, NB\")) image_segment(soy,               index = c(\"R, NR\"),               invert = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"iterative-segmentation","dir":"Articles","previous_headings":"","what":"Iterative segmentation","title":"Image segmentation with pliman","text":"function image_segment_iter() provides iterative image segmentation, returning proportions segmented pixels. useful one segmentation procedure needed. Users can choose many segmentation perform, using argument nseg.  Using soybean sample leaf (), use function image_segment_iter segment diseased tissue healthy tissue. aim segment symptoms two classes, namely, necrosis (brown areas) chlorosis (yellow areas), compute percentage symptom class. First, need find suitable index segmentation.   Note results can obtained image_segment_iter() using iterative section. \"VARI\" seems suitable index segment symptoms (necrosis chlorosis) healthy tissues. \"GLI\" can used segment necrosis chlorosis. Knowing , can now use image_segment_iter() explicitly indicating indexes, follows  can observed 30.28% original image characterized symptoms (necrosis chlorosis). (symptomatic area), 25.92% necrotic areas. 7.85% total area considered necrotic areas (30.288 \\(\\times\\) 0.2592 103464/1317600 \\(\\times\\) 100) 22.43% (30.28 - 7.85 (399075 - 103464) / 1317600 \\(\\times\\) 100) considered chlorotic areas. Users can use argument threshold controls segmentation made. default (threshold = \"Otsu\"), threshold value based Otsu’s method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. image_segmentation_iter(), vector (allows mixed (numeric character) type) length nseg can used.  Users can set argument threshold specific case, depending aims segmentation.","code":"seg_iter <- image_pliman(\"sev_leaf_nb.jpg\", plot = TRUE) # First segmentation seg <-   image_segment(seg_iter,                 index = \"all\") # second segmentation seg2 <-   image_segment(seg$VARI$image,                 index = \"all\") # Only run iteratively image_segment_iter(seg_iter, nseg = 2) image_segment_iter(seg_iter,                    nseg = 2, # two segmentations                    index = c(\"VARI\", \"GLI\"),                    ncol = 3) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  399075  30.28802 #> 3     seg2  103464  25.92595 seg_iter1 <-   image_segment_iter(seg_iter,                      nseg = 2, # two segmentations                      index = c(\"VARI\", \"GLI\"),                      threshold = c(0.3, \"Otsu\"),                      ncol = 3,                      show_image = FALSE) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  195288  14.82149 #> 3     seg2   95151  48.72342 seg_iter2 <-   image_segment_iter(seg_iter,                      nseg = 2, # two segmentations                      index = c(\"VARI\", \"GLI\"),                      threshold = c(0.5, \"Otsu\"),                      ncol = 3,                      show_image = FALSE) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  321729  24.41781 #> 3     seg2  101883  31.66733  image_combine(seg_iter1$images$seg1,               seg_iter2$images$seg1)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"producing-a-binary-image","dir":"Articles","previous_headings":"","what":"Producing a binary image","title":"Image segmentation with pliman","text":"can also produce binary image image_binary(). Just curiosity, use indexes \"B\" (blue) \"NB\" (normalized blue). default, image_binary() rescales image 30% size original image speed computation time. Use argument resize = FALSE produce binary image original size.","code":"binary <- image_binary(soy) # original image size image_binary(soy,              index = c(\"B, NB\"),              resize = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Image segmentation with pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiago Olivoto. Author, maintainer.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Olivoto T (2021). pliman: Tools Plant Image Analysis. R package version 1.1.0, https://github.com/TiagoOlivoto/pliman.","code":"@Manual{,   title = {pliman: Tools for Plant Image Analysis},   author = {Tiago Olivoto},   year = {2021},   note = {R package version 1.1.0},   url = {https://github.com/TiagoOlivoto/pliman}, }"},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to pliman","title":"Contributing to pliman","text":"outlines propose change pliman. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to pliman","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to pliman","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to pliman","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"TiagoOlivoto/pliman\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to pliman","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to pliman","text":"Please note pliman project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"pliman-","dir":"","previous_headings":"","what":"pliman","title":"pliman","text":"pliman (plant image analysis) designed analyze plant images, especially related leaf analysis. provide color palettes, tell pliman one represents, takes care details. Image indexes can also used segment images. package help : Measure leaf area; Measure disease severity; Count number lesions; Obtain shape lesions; Produce Standard Area Diagrams; Count objects image; Get object features (area, perimeter, radius, circularity, eccentricity, solidity); Get RGB values object image; Get object coordinates; Get object contours; Get convex hulls; Isolate objects; Plot object measures. pliman also provides useful functions image transformation, binarization, segmentation, resolution. Please, visit Examples page pliman website detailed documentation function.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pliman","text":"Install latest stable version pliman CRAN : development version pliman can installed GitHub : Note: Windows user, also first download install latest version Rtools.","code":"install.packages(\"pliman\") devtools::install_github(\"TiagoOlivoto/pliman\")  # To build the HTML vignette use devtools::install_github(\"TiagoOlivoto/pliman\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"analyze-objects","dir":"","previous_headings":"","what":"Analyze objects","title":"pliman","text":"function analyze_objects() can used count objects leaves, grains, pods, pollen image. following example counts compute features soybean grains image 30 grains.","code":"library(pliman) # |=======================================================| # | Tools for Plant Image Analysis (pliman 1.0.0)         | # | Author: Tiago Olivoto                                 | # | Type 'vignette('pliman_start')' for a short tutorial  | # | Visit 'https://bit.ly/pliman' for a complete tutorial | # |=======================================================| img <-image_pliman(\"soybean_touch.jpg\", plot = TRUE) soy <- analyze_objects(img, marker = \"id\") soy$statistics #        stat      value # 1         n    30.0000 # 2  min_area  1366.0000 # 3 mean_area  2057.3667 # 4  max_area  2445.0000 # 5   sd_area   230.5574 # 6  sum_area 61721.0000"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"disease-severity","dir":"","previous_headings":"","what":"Disease severity","title":"pliman","text":"pliman takes advantage several powerful functions EBImage package. Thanks Andrzej Oleś collaborators impressive job done EBImage!","code":"img <-image_pliman(\"sev_leaf.jpg\") healthy <-image_pliman(\"sev_healthy.jpg\") symptoms <-image_pliman(\"sev_sympt.jpg\") background <-image_pliman(\"sev_back.jpg\") image_combine(img, healthy, symptoms, background, ncol = 4) sev <-    measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background) sev$severity #    healthy symptomatic # 1 89.04464    10.95536"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"pliman","text":"encounter clear bug, please file minimal reproducible example github. package reprex may help . Suggestions criticisms improve quality usability package welcome!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"pliman","text":"Please note pliman project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyzes objects in an image — analyze_objects","title":"Analyzes objects in an image — analyze_objects","text":"analyze_objects() provides tools counting extracting object features (e.g., area, perimeter, radius, pixel intensity) image. See Details section. plot.anal_obj() Produces histogram R, G, B values argument object_index used function analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyzes objects in an image — analyze_objects","text":"","code":"analyze_objects(   img,   foreground = NULL,   background = NULL,   pattern = NULL,   parallel = FALSE,   workers = NULL,   watershed = TRUE,   resize = FALSE,   trim = FALSE,   fill_hull = FALSE,   filter = FALSE,   invert = FALSE,   object_size = \"medium\",   index = \"NB\",   my_index = NULL,   object_index = NULL,   threshold = \"Otsu\",   tolerance = NULL,   extension = NULL,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   lower_eccent = NULL,   upper_eccent = NULL,   lower_circ = NULL,   upper_circ = NULL,   randomize = TRUE,   nrows = 2000,   show_image = TRUE,   show_original = TRUE,   show_chull = FALSE,   show_contour = TRUE,   contour_col = \"red\",   contour_size = 1,   show_background = TRUE,   show_segmentation = FALSE,   col_foreground = NULL,   col_background = NULL,   marker = FALSE,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )  # S3 method for anal_obj plot(   x,   which = \"measure\",   measure = \"area\",   type = \"density\",   facet = FALSE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyzes objects in an image — analyze_objects","text":"img image analyzed. foreground color palette foreground (optional). background color palette background (optional). pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). parallel TRUE processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. object_index informed, multiple sections used extract RGB values object image. may significantly speed processing time image lots objects (say >1000). workers positive numeric scalar function specifying number parallel processes can active time. default, number sections set 50% available cores. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). trim Number pixels removed edges analysis. edges images often shaded, can affect image analysis. edges images can removed specifying number pixels. Defaults FALSE (trimmed edges). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering image processing? defaults FALSE. See image_filter(). invert Inverts binary image, desired. useful process images black background. Defaults FALSE. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. index, my_index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. object_index Defaults FALSE. index informed, average value object returned. can R, G, B values operation involving , e.g., object_index = \"R/B\". case, return object image, average value R/B ratio. Use pliman_indexes_eq() see equations available indexes. threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. lower_size, upper_size Lower upper limits size image analysis. Plant images often contain dirt dust. prevent dust affecting image analysis, objects lesser 10% mean objects removed. Upper limit set NULL, .e., upper limit used. One can set known area use lower_limit = 0 select objects (advised). Objects matches size given range sizes can selected setting two arguments. example, lower_size = 120 upper_size = 140, objects size greater equal 120 less equal 140 considered. topn_lower, topn_upper Select top n objects based area. topn_lower selects n elements smallest area whereas topn_upper selects n objects largest area. lower_eccent, upper_eccent, lower_circ, upper_circ Lower upper limit object eccentricity/circularity image analysis. Users may use arguments remove objects square papers scale (low eccentricity) cut petioles (high eccentricity) images. Defaults NULL (.e., lower upper limits). randomize Randomize lines training model? nrows number lines used training step. Defaults 2000. show_image Show image processing? show_original Show count objects original image? show_chull Show convex hull around objects? Defaults FALSE. show_contour Show contour line around objects? Defaults TRUE. contour_col, contour_size color size contour line around objects. Defaults contour_col = \"red\" contour_size = 1. show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. show_segmentation Shows object segmentation colored random permutations. Defaults FALSE. col_foreground, col_background Foreground background color image processing. Defaults NULL, \"black\", \"white\" used, respectively. marker, marker_col, marker_size type, color size object marker. Defaults NULL, plots object id. Use marker = \"point\" show point object marker = FALSE omit object marker. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". verbose TRUE (default) summary shown console. x object class anal_obj. plot. Either 'measure' (object measures) 'index' (object index). Defaults \"measure\". measure measure plot. Defaults \"area\". type type plot. Either \"hist\" \"density\". Partial matches recognized. facet Create facet plot object = \"index\" used?. Defaults FALSE. ... argument passed lattice::histogram() lattice::densityplot()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyzes objects in an image — analyze_objects","text":"analyze_objects() returns list following objects: results data frame following variables object image: id:  object identification. x,y:  x y coordinates center mass object. area:  area object (pixels). area_ch:  area convex hull around object (pixels). perimeter: perimeter (pixels). radius_min, radius_mean, radius_max: minimum, mean, maximum radius (pixels), respectively. radius_sd: standard deviation mean radius (pixels). radius_ratio: radius ratio given radius_max / radius_min. diam_min, diam_mean, diam_max: minimum, mean, maximum diameter (pixels), respectively. major_axis, minor_axis: elliptical fit major minor axes (pixels). eccentricity: elliptical eccentricity defined sqrt(1-minoraxis^2/majoraxis^2). Circle eccentricity 0 straight line eccentricity 1. theta: object angle (radians). solidity: object solidity given area / area_ch. circularity: object circularity given \\(4*pi *(area /     perimeter^2)\\). statistics: data frame summary statistics area objects. count: pattern used, shows number objects image. object_rgb: object_index used, returns R, G, B values pixel object. object_index: object_index used, returns index computed object. plot.anal_obj() returns trellis object containing distribution pixels, optionally  object facet = TRUEis used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyzes objects in an image — analyze_objects","text":"binary image first generated segment foreground background. argument index useful choose proper index segment image (see image_binary() details). , number objects foreground counted. setting arguments lower_size, upper_size possible set threshold lower upper sizes objects, respectively. argument object_size can used set pre-defined values tolerance extension depending image resolution. influence watershed-based object segmentation. Users can also tune-tolerance extension explicitly better precision watershed segmentation. watershed = FALSE used, pixels connected set foreground pixels img set unique object. faster (specially large number objects) able segment touching objects. color palettes samples provided, general linear model (binomial family) fitted RGB values used segment fore- background. using pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original'. speed computation time, one can set parallel = TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyzes objects in an image — analyze_objects","text":"Gupta, S., Rosenthal, D. M., Stinchcombe, J. R., & Baucom, R. S. (2020). remarkable morphological diversity leaf shape sweet potato (Ipomoea batatas): influence genetics, environment, G×E. New Phytologist, 225(5), 2183–2195. doi: 10.1111/NPH.16286 Lee, Y., & Lim, W. (2017). Shoelace Formula: Connecting Area Polygon Vector Cross Product. Mathematics Teacher, 110(8), 631–636. doi: 10.5951/mathteacher.110.8.0631","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analyzes objects in an image — analyze_objects","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyzes objects in an image — analyze_objects","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"soybean_touch.jpg\") obj <- analyze_objects(img)  obj$statistics #>        stat      value #> 1         n    30.0000 #> 2  min_area  1366.0000 #> 3 mean_area  2057.3667 #> 4  max_area  2445.0000 #> 5   sd_area   230.5574 #> 6  sum_area 61721.0000  # Enumerate the objects in the original image # Return the top-5 grains with the largest area  top <-  analyze_objects(img,                  marker = \"id\",                  topn_upper = 5)  top$results #>    id        x         y area area_ch perimeter radius_mean radius_min #> 4   4 345.3566 105.78323 2445    2406       158    27.51343   24.68250 #> 11 11 468.9970  56.42549 2315    2275       155    26.76542   23.03064 #> 3   3 237.5917 339.82483 2312    2282       152    26.69878   23.96521 #> 5   5 406.9314  77.54909 2302    2264       153    26.64891   23.96546 #> 2   2 538.0561 401.89604 2299    2258       153    26.60716   24.95688 #>    radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 4    30.47116 1.7303597     1.234525  55.02687 49.36499 60.94232   60.92191 #> 11   30.78003 2.3489729     1.336482  53.53085 46.06129 61.56007   61.22955 #> 3    29.04402 1.2334610     1.211924  53.39756 47.93042 58.08803   57.50966 #> 5    29.63586 1.6395963     1.236607  53.29783 47.93092 59.27173   58.85962 #> 2    28.40020 0.9346592     1.137971  53.21431 49.91376 56.80040   56.60376 #>    minor_axis eccentricity      theta solidity circularity #> 4    51.10462    0.5443558 -0.9908157 1.016209    1.230763 #> 11   48.15734    0.6175840  1.2923197 1.017582    1.210870 #> 3    51.24681    0.4538087 -0.5715211 1.013146    1.257507 #> 5    49.81918    0.5325370  1.1444750 1.016784    1.235755 #> 2    51.73299    0.4058277 -0.8382015 1.018158    1.234144 # }  # \\donttest{ library(pliman)  img <- image_pliman(\"soy_green.jpg\") # Segment the foreground (grains) using the normalized blue index (NB, default) # Shows the average value of the blue index in each object  rgb <-    analyze_objects(img,                    marker = \"id\",                    object_index = \"B\")  # density of area plot(rgb)   # histogram of perimeter plot(rgb, measure = \"perimeter\", type = \"histogram\") # or 'hist'   # density of the blue (B) index plot(rgb, which = \"index\")  # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the number of lesions — count_lesions","title":"Counts the number of lesions — count_lesions","text":"Counts number lesions sample entire leaf based provided color palettes samples. general linear model (binomial family) fitted RGB values used segment lesions healthy leaf. pallet background provided, function takes care details isolate computing number area lesions. using img_pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the number of lesions — count_lesions","text":"","code":"count_lesions(   img,   img_healthy = NULL,   img_lesion = NULL,   img_background = NULL,   img_pattern = NULL,   parallel = FALSE,   workers = NULL,   resize = FALSE,   fill_hull = TRUE,   invert = FALSE,   index = \"NB\",   my_index = NULL,   lower_size = NULL,   upper_size = NULL,   randomize = TRUE,   nrows = 3000,   lesion_size = \"medium\",   segment = TRUE,   tolerance = NULL,   extension = NULL,   show_segmentation = TRUE,   show_image = FALSE,   show_original = TRUE,   show_background = TRUE,   col_leaf = NULL,   col_lesions = NULL,   col_background = NULL,   marker = NULL,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the number of lesions — count_lesions","text":"img image analyzed. img_healthy color palette healthy areas. img_lesion color palette lesioned areas. img_background optional color palette image background. img_pattern pattern file name used identify images processed. example, img_pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., img_pattern = \"1\") select images named 1.-, 2.-, . parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially img_pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes image? Defaults TRUE. useful fill holes leaves, e.g., caused insect attack, ensuring hole area accounted leaf, background. invert Inverts binary image, desired. useful process images black background. Defaults FALSE. index, my_index character value specifying target mode conversion binary image img_healthy img_lesion declared. Defaults \"NB\" (normalized blue). See image_index() details. lower_size Lower limit size image analysis. Leaf images often contain dirt dust. prevent dust affecting image analysis, lower limit analyzed size set 0.1, .e., objects lesser 10% mean objects removed. One can set known area use lower_limit = 0 select objects (advised). upper_size Upper limit size image analysis. Defaults NULL, .e., upper limit used. randomize Randomize lines training model? nrows number lines used training step. lesion_size size lesion. Used automatically set tolerance extension parameters. One following. \"small\" (2-5 mm diameter, e.g, rust pustules), \"medium\" (0.5-1.0 cm diameter, e.g, wheat leaf spot), \"large\" (1-2 cm diameter,  \"elarge\" (2-3 cm diameter, e.g, target spot soybean). segment TRUE (Default) implements Watershed Algorithm segment lesions connected fairly pixels considered two distinct lesions. FALSE, lesions connected pixel considered unique lesions. details see EBImage::watershed(). tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. Defaults NULL, .e., starting values set according argument lesion_size. extension Radius neighborhood pixels detection neighboring objects. Defaults 20. Higher value smooths small objects. show_segmentation Shows object segmentation colored random permutations. Defaults TRUE. show_image Show image processing? show_original Show symptoms original image? show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. col_leaf Leaf color image processing. Defaults \"green\" col_lesions Symptoms color image processing. Defaults \"red\". col_background Background color image processing. Defaults \"NULL\". marker, marker_col, marker_size type, color size object marker. Defaults NULL, shows red point show_segmentation = FALSE. force marker used segmented objects, set marker = \"point\" (show point) marker = \"text\" enumerate objects. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the number of lesions — count_lesions","text":"list following objects: results data frame results (area, perimeter, radius) object. statistics data frame summary statistics image. count (img_pattern used), summarizing count number image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Counts the number of lesions — count_lesions","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_lesions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the number of lesions — count_lesions","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf_nb.jpg\") healthy <- image_pliman(\"sev_healthy.jpg\") lesions <- image_pliman(\"sev_sympt.jpg\") image_combine(img, healthy, lesions, ncol = 3)  a <- count_lesions(img = img,               img_healthy = healthy,               img_lesion = lesions,               lesion_size = \"elarge\", # extra large lesions               show_image = TRUE,               show_segmentation = FALSE,               marker = \"text\")  #>  statistics        area perimeter #>           n    14.00000        NA #>         min   303.00000   10.0000 #>        mean  3402.50000  188.4286 #>         max 12493.00000  592.0000 #>          sd  4091.47774  168.0878 #>         sum 47635.00000 2638.0000 #>        prop    10.84586        NA # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes number of objects in an image — count_objects","title":"Computes number of objects in an image — count_objects","text":"Counts number objects image. See details.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes number of objects in an image — count_objects","text":"","code":"count_objects(   img,   foreground = NULL,   background = NULL,   img_pattern = NULL,   parallel = FALSE,   workers = NULL,   resize = FALSE,   fill_hull = FALSE,   filter = FALSE,   invert = FALSE,   index = \"NB\",   my_index = NULL,   object_size = \"medium\",   tolerance = NULL,   extension = NULL,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   randomize = TRUE,   nrows = 10000,   show_image = TRUE,   show_original = TRUE,   show_background = TRUE,   show_segmentation = TRUE,   col_foreground = NULL,   col_background = NULL,   marker = NULL,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes number of objects in an image — count_objects","text":"img image analyzed. foreground color palette foreground (optional). background color palette background (optional). img_pattern pattern file name used identify images processed. example, img_pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., img_pattern = \"1\") select images named 1.-, 2.-, . parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially img_pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering image processing? defaults FALSE. See image_filter(). invert Inverts binary image, desired. useful process images black background. Defaults FALSE. index, my_index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. extension Radius neighborhood pixels detection neighboring objects. Defaults 20. Higher value smooths small objects. lower_size, upper_size Lower upper limits size image analysis. Plant images often contain dirt dust. prevent dust affecting image analysis, objects lesser 10% mean objects removed. Upper limit set NULL, .e., upper limit used. One can set known area use lower_limit = 0 select objects (advised). Objects matches size given range sizes can selected setting two arguments. example, lower_size = 120 upper_size = 140, objects size greater equal 120 less equal 140 considered. topn_lower, topn_upper Select top n objects based area. topn_lower selects n elements smallest area whereas topn_upper selects n objects largest area. randomize Randomize lines training model? nrows number lines used training step. show_image Show image processing? show_original Show count objects original image? show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. show_segmentation Shows object segmentation colored random permutations. Defaults TRUE. col_foreground, col_background Foreground background color image processing. Defaults NULL, \"black\", \"white\" used, respectively. marker, marker_col, marker_size type, color size object marker. Defaults NULL, shows red point show_segmentation = FALSE. force marker used segmented objects, set marker = \"point\" (show point) marker = \"text\" enumerate objects. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes number of objects in an image — count_objects","text":"list following objects: results data frame results (area, perimeter, radius) object. statistics data frame summary statistics image. count (img_pattern used), summarizing count number image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes number of objects in an image — count_objects","text":"Counts number objects image. binary image first generated segment foreground background. argument index useful choose proper index segment image (see image_binary() details). , number objects foreground counted. setting arguments lower_size, upper_size possible set threshold lower upper sizes objects, respectively.  Change tolerance extension values better set watershed-based object detection. color palettes samples provided, general linear model (binomial family) fitted RGB values used segment fore- background. using img_pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original'. speed computation time, one can set parallel = TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes number of objects in an image — count_objects","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/count_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes number of objects in an image — count_objects","text":"","code":"# \\donttest{ library(pliman) ###### deprecated use analyze_objects() instead ############ img <- image_pliman(\"soybean_touch.jpg\") analyze_objects(img)   # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a binary image — image_binary","title":"Creates a binary image — image_binary","text":"Reduce color, color near-infrared, grayscale images binary image using given color channel (red, green blue) even color indexes. Otsu's thresholding method (Otsu, 1979) used automatically perform clustering-based image thresholding.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a binary image — image_binary","text":"","code":"image_binary(   image,   index = NULL,   my_index = NULL,   threshold = \"Otsu\",   resize = 30,   fill_hull = FALSE,   re = NULL,   nir = NULL,   invert = FALSE,   show_image = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a binary image — image_binary","text":"image image object. index character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes() image_index() details. my_index User can calculate different index using band names, e.g. my_index = \"R+B/G\". threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. resize Resize image processing? Defaults FALSE. Use numeric value percentage desired resizing. example, resize = 30, resized image 30% size original image. fill_hull Fill holes objects? Defaults FALSE. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. invert Inverts binary image, desired. show_image Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a binary image — image_binary","text":"list containing binary images. length depend number indexes used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates a binary image — image_binary","text":"Nobuyuki Otsu, \"threshold selection method gray-level histograms\". IEEE Trans. Sys., Man., Cyber. 9 (1): 62-66. 1979. doi: 10.1109/TSMC.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a binary image — image_binary","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a binary image — image_binary","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") image_binary(img, index = c(\"R, G\"))"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines images to a grid — image_combine","title":"Combines images to a grid — image_combine","text":"Combines several images grid","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines images to a grid — image_combine","text":"","code":"image_combine(   ...,   labels = NULL,   nrow = NULL,   ncol = NULL,   col = \"black\",   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines images to a grid — image_combine","text":"... comma-separated name image objects list containing image objects. labels character vector length number objects ... indicate plot labels. nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. col color plot labels. Defaults col = \"black\". verbose Shows name objects declared ... numeric sequence list names provided. Set FALSE supress text.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines images to a grid — image_combine","text":"grid images ...","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combines images to a grid — image_combine","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines images to a grid — image_combine","text":"","code":"library(pliman) img1 <- image_pliman(\"sev_leaf.jpg\") img2 <- image_pliman(\"sev_leaf_nb.jpg\") image_combine(img1, img2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Image indexes — image_index","title":"Image indexes — image_index","text":"image_index() Builds image indexes using Red, Green, Blue, Red-Edge, NIR bands. plot.image_index() produces raster (type = \"raster\", default) density (type = \"density\") plot index values computed image_index().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image indexes — image_index","text":"","code":"image_index(   image,   index = NULL,   my_index = NULL,   resize = FALSE,   re = NULL,   nir = NULL,   show_image = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE )  # S3 method for image_index plot(x, type = \"raster\", nrow = NULL, ncol = NULL, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image indexes — image_index","text":"image image object. index character value (vector characters) specifying target mode conversion binary image. Use pliman_indexes() details section see available indexes.  Defaults NULL ((normalized) Red, Green Blue).  One can also use \"RGB\" RGB , \"NRGB\" normalized RGB, \"\" indexes. my_index User can calculate different index using bands names, e.g. my_index = \"R+B/G\". resize Resize image processing? Defaults 30, resizes image 30% original size speed image processing. Set resize = FALSE keep original size image. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. show_image Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. x object class image_index. type type plot. Use type = \"raster\" (default) produce raster plot showing intensity pixels image index type = \"density\" produce density plot pixels' intensity. ... Currently used","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image indexes — image_index","text":"list containing Grayscale images. length depend number indexes used. trellis object containing distribution pixels index.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image indexes — image_index","text":"following indexes available pliman. R red G green B blue NR normalized red R/(R+G+B). NG normalized green G/(R+G+B) NB normalized blue B/(R+G+B) GB green blue ratio G/B RB red blue ratio R/B GR green red ratio G/R BI brightness Index sqrt((R^2+G^2+B^2)/3) BIM brightness Index 2 sqrt((R*2+G*2+B*2)/3) SCI Soil Colour Index (R-G)/(R+G) GLI Green leaf index Vis Louhaichi et al. (2001) (2*G-R-B)/(2*G+R+B) HI Primary colours Hue Index    (2*R-G-B)/(G-B) NDGRI Normalized green red difference index (Tucker, 1979) (G-R)/(G+R) NDGBI Normalized green blue difference index (G-B)/(G+B) NDRBI Normalized red blue difference index (R-B)/(R+B)     R+G+B S     ((R+G+B)-3*B)/(R+G+B) L     R+G+B/3 VARI Visible Atmospherically Resistant Index (G-R)/(G+R-B) HUE Overall Hue Index atan(2*(B-G-R)/30.5*(G-R)) HUE2  atan(2*(R-G-R)/30.5*(G-B)) BGI   B/G GRAY\t0.299*R + 0.587*G + 0.114*B GLAI (25*(G-R)/(G+R-B)+1.25) CI Coloration Index (R-B)/R SAT Overhall Saturation Index (max(R,G,B) - min(R,G,B)) / max(R,G,B) SHP Shape Index 2*(R-G-B)/(G-B) RI Redness Index R**2/(B*G**3)","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image indexes — image_index","text":"Nobuyuki Otsu, \"threshold selection method gray-level histograms\". IEEE Trans. Sys., Man., Cyber. 9 (1): 62-66. 1979. doi: 10.1109/TSMC.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image indexes — image_index","text":"Tiago Olivoto tiagoolivoto@gmail.com Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image indexes — image_index","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") image_index(img, index = c(\"R, NR\"))  library(pliman) img <- image_pliman(\"sev_leaf.jpg\")  # resize the image to 30% of the original size ind <- image_index(img, resize = 30, show_image = FALSE) plot(ind) #> Warning: device support for raster images unknown, ignoring 'raster=TRUE'"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Image segmentation — image_segment","title":"Image segmentation — image_segment","text":"image_segment() reduces color, color near-infrared, grayscale images segmented image using given color channel (red, green blue) even color indexes (See image_index() details). Otsu's thresholding method (Otsu, 1979) used automatically perform clustering-based image thresholding. image_segment_iter() Provides iterative image segmentation, returning proportions segmented pixels.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image segmentation — image_segment","text":"","code":"image_segment(   image,   index = NULL,   my_index = NULL,   threshold = \"Otsu\",   fill_hull = FALSE,   re = NULL,   nir = NULL,   invert = FALSE,   show_image = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE )  image_segment_iter(   image,   nseg = 1,   index = NULL,   invert = NULL,   threshold = NULL,   show_image = TRUE,   verbose = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image segmentation — image_segment","text":"image image object list image objects. index image_segment(), character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes().  See image_index() details. image_segment_iter() character vector characters length nseg. can either available index (described ) operation involving RGB values (e.g., \"B/R+G\"). my_index User can calculate different index using bands names, e.g. my_index = \"R+B/G\". threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. image_segmentation_iter(), use vector (allows mixed (numeric character) type) length nseg. fill_hull Fill holes objects? Defaults FALSE. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. invert Inverts binary image, desired. image_segmentation_iter() use vector length nseg. show_image Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. nseg number iterative segmentation steps performed. ... Additional arguments passed image_segment().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image segmentation — image_segment","text":"image_segment() returns list containing n objects n number indexes used. objects contains: image image RGB bands (layers) segmented object. mask mask logical values 0 1 segmented image. image_segment_iter() returns list (1) data frame proportion pixels segmented images (2) segmented images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image segmentation — image_segment","text":"Nobuyuki Otsu, \"threshold selection method gray-level histograms\". IEEE Trans. Sys., Man., Cyber. 9 (1): 62-66. 1979. doi: 10.1109/TSMC.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image segmentation — image_segment","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image segmentation — image_segment","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\", plot = TRUE)  image_segment(img, index = c(\"R, G, B\"))"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an image to numerical matrices — image_to_mat","title":"Convert an image to numerical matrices — image_to_mat","text":"Given object image, converts three matrices (RGB) data frame column corresponds RGB values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an image to numerical matrices — image_to_mat","text":"","code":"image_to_mat(image, parallel = FALSE, workers = NULL, verbose = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an image to numerical matrices — image_to_mat","text":"image image object. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an image to numerical matrices — image_to_mat","text":"list containing three matrices (R, G, B), data frame containing four columns: name image image R, G, B values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an image to numerical matrices — image_to_mat","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an image to numerical matrices — image_to_mat","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf.jpg\") dim(img) #> [1] 490 557   3 mat <- image_to_mat(img) dim(mat[[1]]) #> [1] 490 557"},{"path":"https://tiagoolivoto.github.io/pliman/reference/leaf_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the leaf area — leaf_area","title":"Calculates the leaf area — leaf_area","text":"leaf_area () deprecated. use analyze_objects() instead.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leaf_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the leaf area — leaf_area","text":"","code":"leaf_area(   img,   img_leaf,   img_background,   img_template,   area_template,   resize = FALSE,   parallel = FALSE,   workers = NULL,   img_pattern = NULL,   lower_size = NULL,   upper_size = NULL,   randomize = TRUE,   nrows = 10000,   show_image = TRUE,   show_original = TRUE,   show_background = TRUE,   col_background = NULL,   col_leaf = \"green\",   text_col = \"black\",   text_size = 1,   text_digits = 2,   save_image = FALSE,   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/leaf_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the leaf area — leaf_area","text":"img image analyzed. img_leaf color palette leaves. img_background color palette background area. img_template color palette template areas. area_template known area template. leaf area given unit area_template. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially img_pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. img_pattern pattern file name used identify images processed. example, img_pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., img_pattern = \"1\") select images named 1.-, 2.-, . lower_size Lower limit size image analysis. Leaf images often contain dirt dust. prevent dust affecting image analysis, lower limit analyzed size set 0.1, .e., objects lesser 10% mean objects removed. One can set known area use lower_limit = 0 select objects (advised). upper_size Upper limit size image analysis. Defaults NULL, .e., upper limit used. randomize Randomize lines training model? nrows number lines used training step. show_image Show image processing? show_original Show symptoms original image? show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. col_background Background color image processing. col_leaf Leaf color image processing show_original = FALSE. Defaults \"green\". text_col, text_size, text_digits color, size significant digits used text. shows pattern o|, o object id area, respectively. save_image Save image processing? image saved current working directory named proc_* * image name given img. dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leaf_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the leaf area — leaf_area","text":"data frame results image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leaf_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the leaf area — leaf_area","text":"","code":"# \\donttest{ # use analyze_objects() to compute the leaf area.  library(pliman) img <- image_pliman(\"la_leaves.jpg\") lef_area <- analyze_objects(img, marker = \"id\")   # correct pixel to metric units using the image dpi (~84) # the object 6 (leaf square) has a known area of ~ 4 cm2. get_measures(lef_area, dpi = 84) #>   id       x       y   area area_ch perimeter radius_mean radius_min radius_max #> 1  1 537.380 498.981 40.823  40.997    21.923       3.656      2.738      5.222 #> 2  2 438.655 165.253 34.959  35.090    19.292       3.350      2.860      4.541 #> 3  3 110.862 477.018 30.908  31.743    19.957       3.249      2.364      4.844 #> 4  4 178.467 174.227 27.104  27.494    17.961       3.006      2.286      4.357 #> 5  5 315.232 434.602  8.424   8.429     9.676       1.646      1.305      2.247 #> 6  6 313.445 655.336  3.914   3.923     7.590       1.113      0.919      1.356 #>   radius_sd radius_ratio diam_mean diam_min diam_max major_axis minor_axis #> 1    21.561        1.907     7.311    5.476   10.445      9.097      5.840 #> 2    13.655        1.588     6.700    5.720    9.082      7.806      5.760 #> 3    21.404        2.050     6.498    4.727    9.689      7.903      5.151 #> 4    17.091        1.906     6.012    4.573    8.715      7.164      4.951 #> 5     8.608        1.721     3.292    2.610    4.493      4.051      2.668 #> 6     3.862        1.475     2.226    1.839    2.712      2.368      2.191 #>   eccentricity  theta solidity circularity #> 1        0.767  1.538    0.996       1.067 #> 2        0.675 -1.533    0.996       1.180 #> 3        0.758  1.545    0.974       0.975 #> 4        0.723  1.539    0.986       1.056 #> 5        0.752 -1.467    0.999       1.131 #> 6        0.380 -1.550    0.998       0.854 # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs plant disease measurements — measure_disease","title":"Performs plant disease measurements — measure_disease","text":"measure_disease() computes percentage symptomatic leaf area (optionally) counts compute shapes (area, perimeter, radius, etc.) lesions sample entire leaf using color palettes. See Details. measure_disease_iter() provides iterative section measure_disease(), user picks samples image create needed color palettes.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs plant disease measurements — measure_disease","text":"","code":"measure_disease(   img,   img_healthy = NULL,   img_symptoms = NULL,   img_background = NULL,   pattern = NULL,   parallel = FALSE,   workers = NULL,   resize = FALSE,   fill_hull = TRUE,   index_lb = NULL,   index_dh = \"GLI\",   threshold = NULL,   invert = FALSE,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   randomize = TRUE,   nsample = 3000,   watershed = FALSE,   lesion_size = \"medium\",   tolerance = NULL,   extension = NULL,   show_features = FALSE,   show_segmentation = FALSE,   show_image = TRUE,   show_original = TRUE,   show_background = TRUE,   show_contour = TRUE,   contour_col = \"white\",   contour_size = 1,   col_leaf = NULL,   col_lesions = NULL,   col_background = NULL,   marker = FALSE,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )  measure_disease_iter(img, has_background = TRUE, r = 5, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs plant disease measurements — measure_disease","text":"img image analyzed. img_healthy color palette healthy areas. img_symptoms color palette lesioned areas. img_background optional color palette image background. pattern pattern file name used identify images processed. example, pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes image? Defaults TRUE. useful fill holes leaves, e.g., caused insect attack, ensuring hole area accounted leaf, background. index_lb index used segment foreground (e.g., leaf) background. declared, entire image area (pixels) considered computation severity. index_dh index used segment diseased healthy tissues img_healthy img_symptoms declared. Defaults \"GLI\". See image_index() details. threshold default (threshold = NULL), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively choose threshold based raster plot showing pixel intensity index. Must vector length 2 indicate threshold index_lb index_dh, respectively. invert Inverts binary image desired. useful process images black background. Defaults FALSE. lower_size Lower limit size image analysis. Leaf images often contain dirt dust. prevent dust affecting image analysis, lower limit analyzed size set 0.1, .e., objects lesser 10% mean objects removed. One can set known area use lower_limit = 0 select objects (advised). upper_size Upper limit size image analysis. Defaults NULL, .e., upper limit used. topn_lower, topn_upper Select top n lesions based area. topn_lower selects n lesions smallest area whereas topn_upper selects n lesions largest area. randomize Randomize lines training model? Defaults TRUE. nsample number sample pixels used training step. Defaults 3000. watershed TRUE (Default) implements Watershed Algorithm segment lesions connected fairly pixels considered two distinct lesions. FALSE, lesions connected pixel considered unique lesions. details see EBImage::watershed(). lesion_size size lesion. Used automatically tune tolerance extension parameters. One following. \"small\" (2-5 mm diameter, e.g, rust pustules), \"medium\" (0.5-1.0 cm diameter, e.g, wheat leaf spot), \"large\" (1-2 cm diameter, \"elarge\" (2-3 cm diameter, e.g, target spot soybean). tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. Defaults NULL, .e., starting values set according argument lesion_size. extension Radius neighborhood pixels detection neighboring objects. Defaults 20. Higher value smooths small objects. show_features TRUE returnS lesion features number, area, perimeter, radius. Defaults FALSE. show_segmentation Shows object segmentation colored random permutations. Defaults TRUE. show_image Show image processing? Defaults TRUE. show_original Show symptoms original image? show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. show_contour Show contour line around lesions? Defaults TRUE. contour_col, contour_size color size contour line around objects. Defaults contour_col = \"white\" contour_size = 1. col_leaf Leaf color image processing. Defaults \"green\" col_lesions Symptoms color image processing. Defaults \"red\". col_background Background color image processing. Defaults \"NULL\". marker, marker_col, marker_size type, color size object marker. Defaults NULL, shows nothing. Use marker = \"point\" show point lesion marker = \"*\" \"*\" variable name shape data frame returned function. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". verbose TRUE (default) summary shown console. has_background logical indicating image background segmented processing. r radius neighborhood pixels. Defaults 5. square drawn indicating selected pixels. ... parameters passed measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs plant disease measurements — measure_disease","text":"measure_disease() returns list following objects: severity data frame percentage healthy symptomatic areas. shape,statistics show_features = TRUE used, returns shape (area, perimeter, etc.) lesion summary statistic results. measure_disease_iter() returns list following objects: results list objects returned measure_disease(). leaf color palettes healthy leaf. disease color palettes diseased leaf. background color palettes background.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs plant disease measurements — measure_disease","text":"measure_disease(), general linear model (binomial family) fitted RGB values used segment lesions healthy leaf. pallet background provided, function takes care details isolate computing number area lesions. using pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original. img_healthy img_symptoms declared, RGB-based phenotyping foliar disease severity performed using index informed index_lb first segment leaf background index_dh segment diseased healthy tissues. measure_disease_iter() run interactive section. function, users able pick samples images iteratively create needed color palettes. process calls pick_palette() internally. has_background TRUE (default) color palette background first created. sample colors performed left-button mouse click continues user press Esc. , new sampling process performed sample color healthy tissues diseased tissues. generated palettes passed measure_disease(). arguments function can passed using ... (three dots).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performs plant disease measurements — measure_disease","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs plant disease measurements — measure_disease","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf_nb.jpg\") healthy <- image_pliman(\"sev_healthy.jpg\") lesions <- image_pliman(\"sev_sympt.jpg\") image_combine(img, healthy, lesions, ncol = 3)   sev <-  measure_disease(img = img,                  img_healthy = healthy,                  img_symptoms = lesions,                  lesion_size = \"large\",                  show_image = TRUE)   # an interactive section measure_disease_iter(img) # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Red Green and Blue for image objects — objects_rgb","title":"Get Red Green and Blue for image objects — objects_rgb","text":"Get Red Green Blue (RGB) objects image. function deprecated near future. Use analyze_objects() argument object_index instead.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Red Green and Blue for image objects — objects_rgb","text":"","code":"objects_rgb(   img,   foreground = NULL,   background = NULL,   img_pattern = NULL,   parallel = FALSE,   workers = NULL,   resize = FALSE,   fill_hull = FALSE,   invert = FALSE,   index = \"NB\",   my_index = NULL,   object_index = \"B\",   object_size = \"large\",   tolerance = NULL,   extension = NULL,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   nrows = 10000,   show_image = TRUE,   save_image = FALSE,   prefix = \"proc_\",   marker = NULL,   marker_col = NULL,   marker_size = NULL,   marker_digits = NULL,   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Red Green and Blue for image objects — objects_rgb","text":"img image analyzed. foreground color palette foreground (optional). background color palette background (optional). img_pattern pattern file name used identify images processed. example, img_pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., img_pattern = \"1\") select images named 1.-, 2.-, . parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially img_pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. invert Inverts binary image, desired. useful process images black background. Defaults FALSE. index, my_index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. object_index index, used compute index object image. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. extension Radius neighborhood pixels detection neighboring objects. Defaults 20. Higher value smooths small objects. lower_size, upper_size Lower upper limits size image analysis. Plant images often contain dirt dust. prevent dust affecting image analysis, objects lesser 10% mean objects removed. Upper limit set NULL, .e., upper limit used. One can set known area use lower_limit = 0 select objects (advised). Objects matches size given range sizes can selected setting two arguments. example, lower_size = 120 upper_size = 140, objects size greater equal 120 less equal 140 considered. topn_lower, topn_upper Select top n objects based area. topn_lower selects n elements smallest area whereas topn_upper selects n objects largest area. nrows number lines used training step. show_image Show image processing? Defaults TRUE. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". marker, marker_col, marker_size, marker_digits marker, color, size significant digits object marker. Defaults marker = \"index\", shows object index. Set marker = \"id\" show object id. dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. verbose FALSE, runs code silently.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Red Green and Blue for image objects — objects_rgb","text":"list following objects. objects data frame measures object. rgb data frame Red, Green Blue values object indexes data frame index computed according argument object_index.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Red Green and Blue for image objects — objects_rgb","text":"binary image first generated segment foreground background. argument index useful choose proper index segment image (see image_binary() details). , number objects foreground counted. Change tolerance extension values better set watershed-based object detection. color palettes samples provided, general linear model (binomial family) fitted RGB values used segment fore- background. segmented object, RGB values obtained . Users can also compute index object using argument object_index, useful classify objects based RGB values. using img_pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original'. speed computation time, one can set parallel = TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Red Green and Blue for image objects — objects_rgb","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/objects_rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Red Green and Blue for image objects — objects_rgb","text":"","code":"# \\donttest{ # objects_rgb() will be deprecated in the future. # Use analyze_objects() with the argument `object_index` instead. # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create image palettes — palettes","title":"Create image palettes — palettes","text":"image_palette()  creates image palettes applying k-means algorithm RGB values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create image palettes — palettes","text":"","code":"image_palette(   image,   npal,   filter = TRUE,   blur = FALSE,   parallel = FALSE,   workers = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create image palettes — palettes","text":"image image object. npal number color palettes. filter Performs median filtering. can useful reduce noise produced palettes. Defaults TRUE. See image_filter(). blur Performs blurring filter palettes?  Defaults FALSE. See image_blur(). parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create image palettes — palettes","text":"image_palette() returns list npal color palettes class Image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create image palettes — palettes","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf_nb.jpg\") pal <- image_palette(img, npal = 4) image_combine(pal)    # runs only in an iterative section if(FALSE){ image_palette_pick(img) } # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-pipe operator — pipe","title":"Forward-pipe operator — pipe","text":"Pipe object forward function call expression.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-pipe operator — pipe","text":"","code":"lhs %>% rhs"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-pipe operator — pipe","text":"lhs result piping. rhs piping result .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forward-pipe operator — pipe","text":"Nathan Eastwood nathan.eastwood@icloud.com Antoine Fabri antoine.fabri@gmail.com. code obtained poorman package https://github.com/nathaneastwood/poorman/blob/master/R/pipe.R","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-pipe operator — pipe","text":"","code":"library(pliman)  # Basic use:  iris %>% head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # use to apply several functions to an image img <- image_pliman(\"la_leaves.jpg\")  img %>%  image_resize(50) %>%        # resize to 50% of the original size  object_isolate(id = 1) %>%  # isolate object 1  image_filter() %>%          # apply a median filter  plot()                      # plot"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample images — pliman_images","title":"Sample images — pliman_images","text":"Sample images installed pliman package","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample images — pliman_images","text":"*.jpg format la_back.jpg cyan palette representing background images la_pattern, la_leaves, soybean_touch. la_leaf.jpg sample leaves la_leaves la_leaves.jpg Tree leaves sample known area. objects_300dpi.jpg image 300 dpi resolution. potato_leaves.jpg Three potato leaves, gathered Gupta et al. (2020). sev_leaf.jpg soybean leaf blue background. sev_leaf_nb.jpg soybean leaf without background. sev_back.jpg blue palette representing background sev_leaf. sev_healthy.jpg Healthy area sev_leaf. sev_sympt.jpg symptomatic area sev_leaf. soy_green.jpg Soybean grains white background. soybean_grain.jpg sample palette grains soy_green. soybean_touch.jpg Soybean grains cyan background touching one .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample images — pliman_images","text":"Personal data, Gupta et al. (2020).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample images — pliman_images","text":"Gupta, S., Rosenthal, D. M., Stinchcombe, J. R., & Baucom, R. S. (2020). remarkable morphological diversity leaf shape sweet potato (Ipomoea batatas): influence genetics, environment, G×E. New Phytologist, 225(5), 2183–2195. doi: 10.1111/NPH.16286","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample images — pliman_images","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":null,"dir":"Reference","previous_headings":"","what":"Image segmentation with pixels proportion — prop_segmented","title":"Image segmentation with pixels proportion — prop_segmented","text":"Provides (iterative) image segmentation get proportion pixels. can used alternative way compute disease severity without using color palettes.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image segmentation with pixels proportion — prop_segmented","text":"","code":"prop_segmented(   image,   nseg = 1,   index = NULL,   threshold = \"Otsu\",   fill_hull = FALSE,   filter = FALSE,   parallel = FALSE,   workers = NULL,   show_image = TRUE,   ncol = NULL,   nrow = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image segmentation with pixels proportion — prop_segmented","text":"image object (list objects) class Image. nseg number iterative segmentation steps performed. index index used image segmentation. See image_index() details. threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. fill_hull Fill holes objects? Defaults FALSE. filter Performs median filtering image processing? defaults FALSE. See image_filter(). parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. show_image Show image results? Defaults TRUE. nrow, ncol Arguments passed EBImage::combine(). number rows columns plot grid. Defaults NULL, .e., square grid produced. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image segmentation with pixels proportion — prop_segmented","text":"list following objects results data frame number pixels proportion pixels relation previous segmentation. images list segmented images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image segmentation with pixels proportion — prop_segmented","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prop_segmented.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image segmentation with pixels proportion — prop_segmented","text":"","code":"# \\donttest{ img <- image_pliman(\"sev_leaf.jpg\") plot(img)  # prop_segmented() will be deprecated in the future. Use image_segment_iter() instead. image_segment_iter(img,                    nseg = 2,                    index = c(\"G\", \"GLI\"),                    ncol = 3) #>      image pixels   percent #> 1 original 818790 100.00000 #> 2     seg1 456753  55.78390 #> 3     seg2 313179  68.56638  # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Color spaces — rgb_to_hsv","title":"Color spaces — rgb_to_hsv","text":"Convert RGB LAB color space.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color spaces — rgb_to_hsv","text":"","code":"rgb_to_hsv(image)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color spaces — rgb_to_hsv","text":"image image object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color spaces — rgb_to_hsv","text":"list containing image new color space.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Color spaces — rgb_to_hsv","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/rgb_to_hsv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color spaces — rgb_to_hsv","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf.jpg\") img2 <- rgb_to_hsv(img) image_combine(img, img2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces Santandard Area Diagrams — sad","title":"Produces Santandard Area Diagrams — sad","text":"Given object computed measure_disease() Standard Area Diagram (SAD) n images returned respective severity values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces Santandard Area Diagrams — sad","text":"","code":"sad(   object,   n,   show_original = FALSE,   show_contour = FALSE,   nrow = NULL,   ncol = NULL,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces Santandard Area Diagrams — sad","text":"object object computed measure_disease(). n number leaves Standard Area Diagram. show_original Show original images? Defaults FALSE, .e., mask returned. show_contour Show original images? Defaults FALSE, .e., mask returned. nrow, ncol number rows columns plot. See [image_combine())] [image_combine())]: R:image_combine()) ... arguments passed measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces Santandard Area Diagrams — sad","text":"data frame severity values n sampled leaves. plot standard area diagram can saved wrapping sad() png().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produces Santandard Area Diagrams — sad","text":"leaves smallest highest severity always SAD. n = 1, leaf smallest severity returned. others sampled sequentially achieve n images severity ordered ascending order. example, 30 leaves n set 3, leaves sampled 1st, 15th, 30th smallest severity values. SAD can computed image pattern name used argument pattern measure_disease(). images saved, n images retrevied dir_processed directory. Otherwise, severity computed generate images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Produces Santandard Area Diagrams — sad","text":"Del Ponte EM, Pethybridge SJ, Bock CH, et al (2017) Standard area diagrams aiding severity estimation: Scientometrics, pathosystems, methodological trends last 25 years. Phytopathology 107:1161–1174. doi: 10.1094/PHYTO-02-17-0069-FI","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces Santandard Area Diagrams — sad","text":"","code":"if (FALSE) { library(pliman) sev <- measure_disease(pattern = \"sev_leaf\",                 img_healthy = \"sev_healthy\",                 img_symptoms = \"sev_sympt\",                 img_background  = \"sev_back\",                 show_image = FALSE,                 save_image = TRUE,                 show_original = FALSE,                 dir_original = image_pliman(),                 dir_processed = tempdir()) sad(sev, n = 2) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary an object index — summary_index","title":"Summary an object index — summary_index","text":"Performs report index within objects object_index argument used analyze_objects(). using cut point, number proportion objects mean value index bellow cut_point returned. Additionaly, number proportion pixels bellow cutpoint shown object (id).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary an object index — summary_index","text":"","code":"summary_index(object, index, cut_point, select_higher = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary an object index — summary_index","text":"object object computed analyze_objects(). index index desired, e.g., \"B\". Note value must match index(es) used argument object_index analyze_objects(). cut_point cut point. select_higher FALSE (default) selects objects index smaller cut_point. Use select_higher = TRUE select objects index higher cut_point.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary an object index — summary_index","text":"list following elements: ids identification selected objects. between_id data frame following columns n number objects. nsel number selected objects. prop proportion objects selected. mean_index_sel, mean_index_nsel mean value index selected non-selected objects, respectively. within_id data frame following columns id object identification n_less number pixels values lesser equal cut_point. n_greater number pixels values greater cut_point. less_ratio proportion pixels values lesser equal cut_point. greater_ratio proportion pixels values greater cut_point.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary an object index — summary_index","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary an object index — summary_index","text":"","code":"library(pliman) soy <- image_pliman(\"soy_green.jpg\") anal <- analyze_objects(soy, object_index = \"G\") plot_measures(anal, measure = \"G\")   summary_index(anal, index = \"G\", cut_point = 0.5) #> $ids #> [1] 5 9 #>  #> $between_id #>   n nsel      prop mean_index_sel mean_index_nsel #> 1 9    2 0.2222222      0.4706238       0.5733613 #>  #> $within_id #>   id         x         y n_less n_greater less_ratio greater_ratio #> 1  1 420.95904  68.21272    235      7456      0.031         0.969 #> 2  2 235.26034 228.21195    940      6727      0.123         0.877 #> 3  3 727.26033 326.57576    183      7803      0.023         0.977 #> 4  4 494.04409 250.08376    318      6487      0.047         0.953 #> 5  5 110.92892  75.81938   7053      1346      0.840         0.160 #> 6  6 420.70878 355.31750    429      6267      0.064         0.936 #> 7  7  49.67456 280.96337   1144      5490      0.172         0.828 #> 8  8 176.02633 348.97414    766      5614      0.120         0.880 #> 9  9 653.19076 110.38762   3512      2223      0.612         0.388 #>"},{"path":"https://tiagoolivoto.github.io/pliman/reference/symptomatic_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the percentage of symptomatic area — symptomatic_area","title":"Calculates the percentage of symptomatic area — symptomatic_area","text":"Calculates percentage symptomatic leaf area sample entire leaf based provided color palettes samples. general linear model (binomial family) fitted RGB values used segment lesions healthy leaf. pallet background provided, function takes care details isolate computing number area lesions. using pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/symptomatic_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the percentage of symptomatic area — symptomatic_area","text":"","code":"symptomatic_area(   img,   img_healthy,   img_symptoms,   img_background = NULL,   pattern = NULL,   img_pattern = NULL,   resize = FALSE,   fill_hull = TRUE,   parallel = FALSE,   workers = NULL,   nrows = 3000,   show_image = FALSE,   show_original = TRUE,   show_contour = TRUE,   show_background = TRUE,   col_leaf = \"green\",   col_symptoms = \"red\",   col_background = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/symptomatic_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the percentage of symptomatic area — symptomatic_area","text":"img image analyzed. img_healthy color palette healthy areas. img_symptoms color palette symptomatic areas. img_background color palette areas symptoms. pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). img_pattern Deprecated. Use pattern instead. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes image? Defaults TRUE. useful fill holes leaves, e.g., caused insect attack, ensuring hole area accounted leaf, background. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially img_pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. Defaults 50% available cores. nrows number lines used training step. Defaults 3000. show_image Show image processing? show_original Show symptoms original image? Defaults TRUE. show_contour Show contour line around symptomatic area? Defaults TRUE. false, symptomatic area filled color informed col_symptoms argument. show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. col_leaf Leaf color image processing. Defaults \"green\" col_symptoms Symptoms color image processing. Defaults \"red\". col_background Background color image processing. Defaults \"NULL\". save_image Save image processing? image saved current working directory named prefix provided proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/symptomatic_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the percentage of symptomatic area — symptomatic_area","text":"data frame results (healthy symptomatic area) image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/symptomatic_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the percentage of symptomatic area — symptomatic_area","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf.jpg\") healthy <- image_pliman(\"sev_healthy.jpg\") symptoms <- image_pliman(\"sev_sympt.jpg\") background <- image_pliman(\"sev_back.jpg\") image_combine(img, healthy, symptoms,background)  symptomatic_area(img = img,                  img_healthy = healthy,                  img_symptoms = symptoms,                  img_background = background,                  show_image = TRUE)  #>   healthy symptomatic #> 1 88.7908     11.2092 # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/tune_tolerance.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune tolerance parameter — tune_tolerance","title":"Tune tolerance parameter — tune_tolerance","text":"Provides options tunning tolerance parameter utilized [analyze_objects()] two ways: Declaring actual argument, iterative algorithm compute first analysis sequentially increase parameter tolerance computed number objects greater actual reduce parameter tolerance computed number objects less actual. algorithm converge maxiter reached, users can change default extension value. second way create grid tolerance extension values. grid informed, combinations (made base::expand.grid()) tested residual actual value plotted. Users can find better combination parameters use analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/tune_tolerance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune tolerance parameter — tune_tolerance","text":"","code":"tune_tolerance(   img,   actual,   start_tol = NULL,   extension = NULL,   grid = NULL,   maxiter = 200,   index = \"NB\",   my_index = NULL,   plot = TRUE,   fill_hull = FALSE,   filter = FALSE,   invert = FALSE,   workers = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/tune_tolerance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune tolerance parameter — tune_tolerance","text":"img image analyzed. actual actual number objects. start_tol starting value tolerance. Defaults 1. extension extension value. Defaults 1. grid list numeric sequence tolerance extension values. grid informed, combinations tested residual actual value plotted. maxiter maximum number iterations. Default 200. index, my_index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. plot Logical. TRUE (default) generates plot showing results. fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering image processing? defaults FALSE. See image_filter(). invert Inverts binary image, desired. useful process images black background. Defaults FALSE. workers number multiple sections used computation. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/tune_tolerance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tune tolerance parameter — tune_tolerance","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/tune_tolerance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune tolerance parameter — tune_tolerance","text":"","code":"library(pliman) if(FALSE){  img <- image_pliman(\"soybean_touch.jpg\")   # starts with tolerance = 1  tune_tolerance(img, actual = 30)   # Using a grid of tolerance and extension values  tune2 <-    tune_tolerance(img,                   actual = 30,                   grid = list(tolerance = seq(0, 5, by = 0.1),                               extension = 1:4), plot = TRUE) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for image resolution — utils_dpi","title":"Utilities for image resolution — utils_dpi","text":"Provides useful conversions size (cm), number pixels (px) dots per inch (dpi). dpi_to_cm() converts known dpi value centimeters. cm_to_dpi() converts known centimeter values dpi. pixels_to_cm() converts number pixels centimeters, given known resolution (dpi). cm_to_pixels() converts distance (cm) number pixels, given known resolution (dpi). distance() Computes distance two points image based Pythagorean theorem. dpi() interactive function compute image resolution given known distance informed user. See information Details section. npixels() returns number pixels image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for image resolution — utils_dpi","text":"","code":"dpi_to_cm(dpi)  cm_to_dpi(cm)  pixels_to_cm(px, dpi)  cm_to_pixels(cm, dpi)  npixels(image)  dpi(image, plot = TRUE)  distance(image, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for image resolution — utils_dpi","text":"dpi image resolution dots per inch. cm size centimeters. px number pixels. image image object. plot Call new plot image? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for image resolution — utils_dpi","text":"dpi_to_cm(), cm_to_dpi(), pixels_to_cm(), cm_to_pixels() return numeric value vector numeric values input data vector. dpi() returns computed dpi (dots per inch) given known distance informed plot.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities for image resolution — utils_dpi","text":"dpi() run interactive section. compute image resolution (dpi) user must use left button mouse create line known distance. can done, example, using template known distance image (e.g., la_leaves.jpg).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for image resolution — utils_dpi","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for image resolution — utils_dpi","text":"","code":"library(pliman) # Convert  dots per inch to centimeter dpi_to_cm(c(1, 2, 3)) #> [1] 2.5400000 1.2700000 0.8466667  # Convert centimeters to dots per inch cm_to_dpi(c(1, 2, 3)) #> [1] 0.3937008 0.7874016 1.1811024  # Convert centimeters to number of pixels with resolution of 96 dpi. cm_to_pixels(c(1, 2, 3), 96) #> [1]  37.79528  75.59055 113.38583  # Convert number of pixels to cm with resolution of 96 dpi. pixels_to_cm(c(1, 2, 3), 96) #> [1] 0.02645833 0.05291667 0.07937500  if(isTRUE(interactive())){ #### compute the dpi (dots per inch) resolution #### # only works in an interactive section # objects_300dpi.jpg has a known resolution of 300 dpi img <- image_pliman(\"objects_300dpi.jpg\") # Higher square: 10 x 10 cm # 1) Run the function dpi() # 2) Use the left mouse button to create a line in the higher square # 3) Declare a known distance (10 cm) # 4) See the computed dpi dpi(img)   img2 <- image_pliman(\"la_leaves.jpg\") # square leaf sample (2 x 2 cm) dpi(img2) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for file manipulation — utils_file","title":"Utilities for file manipulation — utils_file","text":"file_extension() Get extension file. file_name() Get name file. file_dir() Get directory file manipulate_files() Manipulate files directory options rename (insert prefix suffix) save new files provided directory. pliman_indexes() Get indexes available pliman. pliman_indexes_eq() Get equation indexes available pliman.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for file manipulation — utils_file","text":"","code":"file_extension(file)  file_name(file)  file_dir(file)  manipulate_files(   pattern,   dir = NULL,   prefix = NULL,   name = NULL,   suffix = NULL,   extension = NULL,   sep = \"\",   save_to = NULL,   overwrite = FALSE,   remove_original = FALSE,   verbose = TRUE )  pliman_indexes()  pliman_indexes_eq()"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for file manipulation — utils_file","text":"file file name. pattern file name pattern. dir working directory containing files manipulated. Defaults current working directory. prefix, suffix prefix suffix added new file names. Defaults NULL (prefix suffix). name name new files. Defaults NULL (original names). name can either single value character vector length number files manipulated. one value informed, sequential vector names created \"name_1\", \"name_2\", . extension new extension file. declared (default), original extensions used. sep optional separator. Defaults \"\". save_to directory save new files. Defaults current working directory. file name file changed, nothing occur. save_to refers subfolder current working directory, files saved given folder. case folder exist, created. default, files overwritten. Set overwrite = TRUE overwrite files. overwrite Overwrite files? Defaults FALSE. remove_original Remove original files manipulation? defaults FALSE. TRUE files pattern removed. verbose FALSE, code run silently.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for file manipulation — utils_file","text":"file_extension(),  file_name(), file_dir() return character string. manipulate_files() return value. verbose == TRUE, message printed indicating operation succeeded () files attempted.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for file manipulation — utils_file","text":"","code":"# \\donttest{ library(pliman) # get file name, directory and extension file <- \"E:/my_folder/my_subfolder/image1.png\" file_dir(file) #> [1] \"E:/my_folder/my_subfolder\" file_name(file) #> [1] \"image1\" file_extension(file) #> [1] \"png\"  # manipulate files dir <- tempdir() list.files(dir) #> [1] \"bslib-97f58998866628991c77028f36e7d4dc\" #> [2] \"downlit\"                                #> [3] \"file51057151ac6\"                        #> [4] \"file510ddd17b\"                          file.create(paste0(dir, \"/test.txt\")) #> [1] TRUE list.files(dir) #> [1] \"bslib-97f58998866628991c77028f36e7d4dc\" #> [2] \"downlit\"                                #> [3] \"file51057151ac6\"                        #> [4] \"file510ddd17b\"                          #> [5] \"test.txt\"                               manipulate_files(\"test\",                  dir = paste0(dir, \"\\\\\"),                 prefix = \"chang_\",                 save_to = paste0(dir, \"\\\\\"),                 overwrite = TRUE) #> Warning: Failed to copy 1 files. list.files(dir) #> [1] \"bslib-97f58998866628991c77028f36e7d4dc\" #> [2] \"downlit\"                                #> [3] \"file51057151ac6\"                        #> [4] \"file510ddd17b\"                          #> [5] \"test.txt\"                               # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and export images — utils_image","title":"Import and export images — utils_image","text":"Import images files URLs write images files, possibly batch processing.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and export images — utils_image","text":"","code":"image_import(   image,   ...,   pattern = NULL,   path = NULL,   plot = FALSE,   nrow = NULL,   ncol = NULL )  image_export(image, name, prefix = \"\", extension = NULL, subfolder = NULL, ...)  image_pliman(image, plot = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and export images — utils_image","text":"image image_import(), character vector file names URLs. image_export(), Image object, array list images. image_pliman(), charactere value specifying image example. See ?pliman_images details. ... Alternative arguments passed corresponding functions jpeg, png, tiff packages. pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). path character vector full path names; default corresponds working directory, getwd(). overwrite (given) path informed image argument. plot Plots image importing? Defaults FALSE. nrow, ncol Passed image_combine(). number rows columns use composite image plot = TRUE. name string specifying name image. can either character image name (e.g., \"img1\") name extension (e.g., \"img1.jpg\"). none file extension provided, image saved *.jpg file. prefix prefix include image name exporting list images. Defaults \"\", .e., prefix. extension image list, extension can used define extension exported files. overwrite file extensions given image. subfolder Optional character string indicating subfolder within current working directory save image(s). folder exist, created.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and export images — utils_image","text":"image_import() returns new Image object. image_export() returns invisible vector file names. image_pliman() returns new Image object example image required. empty call used, path tmp_images directory installed package returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import and export images — utils_image","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and export images — utils_image","text":"","code":"library(pliman) folder <- image_pliman() full_path <- paste0(folder, \"/sev_leaf.jpg\") (path <- file_dir(full_path)) #> [1] \"C:/Users/tiago/AppData/Local/Temp/RtmpwnR0to/temp_libpath373826cf1ad2/pliman/tmp_images\" (file <- basename(full_path)) #> [1] \"sev_leaf.jpg\" image_import(image = full_path) #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 490 557 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>             [,1]        [,2]        [,3]        [,4]        [,5]        [,6] #> [1,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [2,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [3,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [4,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [5,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.003921569 image_import(image = file, path = path) #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 490 557 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>             [,1]        [,2]        [,3]        [,4]        [,5]        [,6] #> [1,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [2,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [3,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [4,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [5,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.003921569"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for object measures — utils_measures","title":"Utilities for object measures — utils_measures","text":"get_measures() computes object measures (area, perimeter, radius) using either known resolution (dpi) object known measurements. plot_measures() draws object measures given object current plot. object identification (\"id\") drawn default.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for object measures — utils_measures","text":"","code":"get_measures(   object,   id = NULL,   measure = NULL,   dpi = NULL,   sep = \"\\\\_|-\",   verbose = TRUE,   digits = 3 )  plot_measures(   object,   id = NULL,   measure = \"id\",   hjust = NULL,   vjust = NULL,   digits = 2,   size = 0.9,   col = \"white\",   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for object measures — utils_measures","text":"object object computed analyze_objects(). id object image indicate known value. measure plot_measures(), character string; get_measures(), two-sided formula, e.g., measure = area ~ 100 indicating known value object id. right-hand side known value left-hand side can one following. area known area object. perimeter known perimeter object. radius_mean known radius object. radius_min known minimum radius object. object square, radius_min object L/2 L length square side. radius_max known maximum radius object. object square, radius_max object according Pythagorean theorem L x sqrt(2) / 2 L length square side. dpi known resolution image DPI (dots per inch). sep Regular expression manage file names. function combines merge object object measures (sum area mean measures) images share filename prefix, defined part filename preceding first hyphen (-) underscore (_) (hyphen underscore required). example, measures images named L1-1.jpeg, L1-2.jpeg, L1-3.jpeg combined single image information (L1). feature allows user treat multiple images belonging single sample, desired. Defaults sep = \"\\\\_|-\". verbose FALSE, runs code silently. digits number significant figures. Defaults 2. hjust, vjust numeric value adjust labels horizontally vertically. Positive values move labels right (hjust) top (vjust). Negative values move labels left bottom, respectively. size size text. Defaults 0.9. col color text. Defaults \"white\". ... arguments passed graphics::text().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for object measures — utils_measures","text":"get_measures(), measure informed, pixel values corrected value known object, given unit right-hand side measure. dpi informed, measures adjusted known dpi. applied object class anal_obj, returns data frame object id (corrected) measures. applied object class anal_obj_ls, returns list class measures_ls, two objects: () results, data frame containing identification image (img) object within image (id); (ii) summary data frame containing values image. one object detected given image, number objects (n), total area (area_sum), mean area (area_mean) standard deviation area (area_sd) computed. measures (perimeter radius), mean values presented. plot_measures() returns NULL object, drawing text according x y coordinates objects object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for object measures — utils_measures","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for object measures — utils_measures","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"objects_300dpi.jpg\") plot(img) # Image with four objects with a known resolution of 300 dpi # Higher square: 10 x 10 cm # Lower square: 5 x 5 cm # Rectangle: 4 x 2 cm # Circle: 3 cm in diameter  # Count the objects using the blue band to segment the image results <-    analyze_objects(img,                  index = \"B\") plot_measures(results, measure = \"id\")   # Get object measures by declaring the known resolution in dots per inch (measures <- get_measures(results, dpi = 300)) #>   id        x        y   area area_ch perimeter radius_mean radius_min #> 1  1  669.000  798.000 99.982  99.813    39.920       5.732      4.994 #> 2  2 1737.502  453.000 24.996  24.911    19.947       2.864      2.491 #> 3  3 1737.590 1296.339  7.050   7.044     8.551       1.494      1.481 #> 4  4 1737.496  939.498  7.984   7.934    11.904       1.671      0.993 #>   radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1      7.058    74.266        1.413    11.464    9.989   14.117     11.546 #> 2      3.528    37.117        1.416     5.728    4.983    7.055      5.778 #> 3      1.506     0.567        1.017     2.988    2.963    3.013      2.997 #> 4      2.224    49.872        2.239     3.341    1.987    4.448      4.614 #>   minor_axis eccentricity theta solidity circularity #> 1     11.546        0.002 0.785    1.002       0.788 #> 2      5.768        0.058 1.571    1.003       0.789 #> 3      2.995        0.036 0.028    1.001       1.212 #> 4      2.307        0.866 0.000    1.006       0.708  # Calculated diagonal of the object 1 # 10 * sqrt(2) = 14.14  # Observed diagonal of the object 1 measures[1, \"radius_max\"] * 2 #> [1] 14.116   # Get object measures by declaring the known area of object 1 get_measures(results,              id = 1,              area ~ 100) #> ----------------------------------------- #> measures corrected with: #> object id: 1 #> area     : 100 #> ----------------------------------------- #> Total    : 140.037  #> Average  : 35.009  #> ----------------------------------------- #>   id        x        y    area area_ch perimeter radius_mean radius_min #> 1  1  669.000  798.000 100.000  99.831    39.924       5.733      4.995 #> 2  2 1737.502  453.000  25.000  24.915    19.949       2.864      2.492 #> 3  3 1737.590 1296.339   7.051   7.046     8.552       1.494      1.481 #> 4  4 1737.496  939.498   7.986   7.935    11.905       1.671      0.994 #>   radius_max radius_sd radius_ratio diam_mean diam_min diam_max major_axis #> 1      7.059    74.266        1.413    11.465    9.989   14.118     11.547 #> 2      3.528    37.117        1.416     5.728    4.983    7.056      5.778 #> 3      1.506     0.567        1.017     2.989    2.963    3.013      2.997 #> 4      2.224    49.872        2.239     3.341    1.987    4.448      4.614 #>   minor_axis eccentricity theta solidity circularity #> 1     11.547        0.002 0.785    1.002       0.788 #> 2      5.769        0.058 1.571    1.003       0.789 #> 3      2.995        0.036 0.028    1.001       1.212 #> 4      2.307        0.866 0.000    1.006       0.708 # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for working with image objects — utils_objects","title":"Utilities for working with image objects — utils_objects","text":"object_id() get object identification image. object_coord() get object coordinates (optionally) draw bounding rectangle around multiple objects image. object_contour() returns coordinates (x y) contours object image. object_isolate() isolates object image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for working with image objects — utils_objects","text":"","code":"object_coord(   image,   id = NULL,   index = \"NB\",   watershed = TRUE,   invert = FALSE,   fill_hull = FALSE,   threshold = \"Otsu\",   edge = 2,   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   parallel = FALSE,   workers = NULL,   show_image = TRUE )  object_contour(   image,   index = \"NB\",   invert = FALSE,   fill_hull = FALSE,   threshold = \"Otsu\",   watershed = TRUE,   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   parallel = FALSE,   workers = NULL,   show_image = TRUE )  object_isolate(image, id = NULL, parallel = FALSE, workers = NULL, ...)  object_id(image, parallel = FALSE, workers = NULL, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for working with image objects — utils_objects","text":"image image class Image list Image objects. id object_coord(), vector (scalar) object id compute bounding rectangle. Object ids can obtained object_id(). Set id = \"\" compute coordinates objects image. id = NULL (default) bounding rectangle drawn including objects. object_isolate(), scalar identifies object extracted. index index produce binary image used compute bounding rectangle coordinates. See image_binary() details. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. invert Inverts binary image, desired. Defaults FALSE. fill_hull Fill holes objects? Defaults FALSE. threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. edge number pixels edge bounding rectangle. Defaults 2. extension, tolerance, object_size Controls watershed segmentation objects image. See analyze_objects() details. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 50% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. show_image Shows image bounding rectangles? Defaults TRUE. ... object_isolate(), arguments passed object_coord(). object_id(), arguments passed analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for working with image objects — utils_objects","text":"object_id() image class \"Image\" containing object's identification. object_coord() list coordinates bounding rectangles. id = \"\" numeric vector, list vector coordinates returned. object_isolate() image class \"Image\" containing isolated object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for working with image objects — utils_objects","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"la_leaves.jpg\") # Get the object's (leaves) identification object_id(img)   # Get the coordinates and draw a bounding rectangle around leaves 1 and 3 object_coord(img, id = c(1, 3))  #> $col_min #> [1] 320 304 #>  #> $col_max #> [1] 641 606 #>  #> $row_min #> [1] 436  21 #>  #> $row_max #> [1] 641 202 #>   # Isolate leaf 3 isolated <- object_isolate(img, id = 3) plot(isolated)   # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Picking up points in an image — utils_pick","title":"Picking up points in an image — utils_pick","text":"pick_count() opens interactive section user able click image count objects (points) manually. mouse click, point drawn upward counter shown console. n counts user press Esc, interactive process terminated data.frame x y coordinates point returned. pick_palette()  creates image palette picking color point(s) image. pick_rgb() Picks RGB values selected point(s) image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Picking up points in an image — utils_pick","text":"","code":"pick_count(   image,   n = Inf,   col = \"red\",   size = 0.8,   plot = TRUE,   verbose = TRUE )  pick_rgb(image, n = Inf, col = \"red\", size = 0.8, plot = TRUE, verbose = TRUE)  pick_palette(   image,   n = Inf,   r = 3,   shape = \"box\",   random = TRUE,   width = 100,   height = 100,   col = \"red\",   size = 0.8,   plot = TRUE,   palette = TRUE,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Picking up points in an image — utils_pick","text":"image Image object. n number points pick_* function. Defaults Inf. means picking run user press Esc. col, size color size marker point. plot Call new plot(image) processing? Defaults TRUE. verbose TRUE (default) shows counter console. r radius neighborhood pixels. Defaults 3. shape character vector indicating shape brush around selected pixel.  can \"box\", \"disc\", \"diamond\", \"Gaussian\" \"line\". Defaults \"box\". case, 'r = 1', 8 surrounding pixels sampled. Setting \"disc\" increasing radius (r) select surrounding pixels towards format sphere around selected pixel. random Randomize selected pixels? Defaults TRUE. width, height width height generated palette. Defaults 100 , .e., square image 100 x 100. palette Plot generated palette? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Picking up points in an image — utils_pick","text":"pick_count() returns data.frame x y coordinates selected point(x). pick_rgb() returns data.frame R, G, B values selected point(s). pick_palette() returns object class Image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Picking up points in an image — utils_pick","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Picking up points in an image — utils_pick","text":"","code":"if(interactive()){ library(pliman) img <- image_pliman(\"soybean_touch.jpg\")  # start a counting process pick_count(img)  # get rgb from point(s) pick_rgb(img)  # create a palette from point(s) pick_palette(img) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for Polygons — utils_polygon","title":"Utilities for Polygons — utils_polygon","text":"conv_hull() Compute convex hull set points. poly_area() Compute area polygon given vertices vectors x y. poly_mass() Compute center mass polygon given vertices vectors x y. poly_spline() Smooths polygon contour. plot_contour() Plot contour lines. plot_ellipse() Plots ellipse fits major minor axis object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for Polygons — utils_polygon","text":"","code":"conv_hull(x, y = NULL, closed = TRUE)  poly_area(x, y = NULL)  poly_mass(x, y = NULL)  poly_spline(x, y = NULL, vertices = 100, k = 2, ...)  plot_contour(x, y = NULL, id = NULL, col = \"black\", lwd = 1, ...)  plot_mass(   x,   y = NULL,   id = NULL,   arrow = TRUE,   col = \"black\",   cex = 1,   lwd = 1 )  plot_ellipse(object, id = NULL, col = \"black\", lwd = 1)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for Polygons — utils_polygon","text":"x, y Coordinate vectors points. can specified two vectors (x y), 2-column matrix x. x list vector coordinates function applied element using base::lapply(). closed TRUE (default) returns vector points closed polygon, .e., first point replicated last one. vertices number spline vertices create. k number points wrap around ends obtain smooth periodic spline. ... plot_contour() plot_ellipse() arguments passed graphics::lines(). plot_mass(), arguments passed graphics::points(). id object identification (numeric) plot contour/ellipse. default (id = NULL), contour plotted objects col, lwd, cex color, width lines, size point, respectively. arrow TRUE (default) plots two arrows connecting center mass minimum maximum radius. object object computed analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for Polygons — utils_polygon","text":"conv_hull() poly_spline() returns matrix x y coordinates convex hull/smooth line clockwise order. x list, list points returned. poly_area() returns double, list x list vector points. poly_mass() returns data.frame containing coordinates center mass, well maximum minimum distance contour center mass. plot_contour(), plot_mass(), plot_ellipse() return NULL object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities for Polygons — utils_polygon","text":"poly_area() computes area polygon given set x y coordinates using Shoelace formula, follows (Lee Lim, 2017). $$=\\frac{1}{2}\\left|\\sum_{=1}^{n}\\left(x_{} y_{+1}-x_{+1} y_{}\\right)\\right|$$, x y coordinates form corners polygon, n number coordinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Utilities for Polygons — utils_polygon","text":"Lee, Y., & Lim, W. (2017). Shoelace Formula: Connecting Area Polygon Vector Cross Product. Mathematics Teacher, 110(8), 631–636. doi: 10.5951/mathteacher.110.8.0631","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for Polygons — utils_polygon","text":"","code":"# \\donttest{ library(pliman) # A 2 x 2 square x <- c(0, 0, 2, 2, 0) y <- c(0, 2, 2, 0, 0) df <- data.frame(x = x, y = y) plot(df) with(df, polygon(x, y, col = \"red\"))  poly_area(x, y) #> [1] 4 poly_area(df) #> [1] 4  # center of mass of the square cm <- poly_mass(df) plot_mass(cm)  # The convex hull will be the vertices of the square (conv_square <- conv_hull(df)) #>     x y #> 4   2 0 #> 1   0 0 #> 2   0 2 #> 3   2 2 #> 4.1 2 0 plot_contour(conv_square,              col = \"blue\",              lwd = 6)  poly_area(conv_square) #> [1] 4  ############# Example with a polygon############# x <- c(0, 1,   2, 3,  5, 2, -1, 0, 0) y <- c(5, 6.5, 7, 3,  1, 1,  0, 2, 5) df_poly <- data.frame(x = x, y = y)  # area of the polygon poly_area(df_poly) #> [1] 18 plot(df_poly, pch = 19, col = \"red\") with(df_poly, polygon(x, y, col = \"red\"))  # center of mass of polygon # arrows from center of mass to maximum and minimum radius cm <- poly_mass(df_poly) plot_mass(cm, arrow = TRUE, col = \"blue\")  # vertices of the convex hull (conv_poly <- conv_hull(df_poly)) #>      x   y #> 5    5 1.0 #> 7   -1 0.0 #> 9    0 5.0 #> 2    1 6.5 #> 3    2 7.0 #> 5.1  5 1.0  # area of the convex hull poly_area(conv_poly) #> [1] 24  with(conv_poly,      polygon(x, y,            col  = rgb(1, 0, 0, 0.2)))  # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial transformations — utils_transform","title":"Spatial transformations — utils_transform","text":"Performs image rotation reflection image autocrop() Crops automatically  image area objects. image_crop() Crops image desired area. image_trim() Remove pixels edges image (20 default). image_dimension() Gives dimension (width height) image. image_rotate() Rotates image clockwise given angle. image_horizontal() Converts (needed) image horizontal image. image_vertical() Converts (needed) image vertical image. image_hreflect() Performs horizontal reflection image. image_vreflect() Performs vertical reflection image. image_resize() Resize image. See EBImage::resize(). image_contrast() Improve contrast locally performing adaptive histogram equalization. See EBImage::clahe(). image_dilate() Performs image dilatation. See EBImage::dilate(). image_erode() Performs image erosion. See EBImage::erode(). image_opening() Performs erosion followed dilation. See EBImage::opening(). image_closing() Performs dilation followed erosion. See EBImage::closing(). image_filter() Performs median filtering constant time. See EBImage::medianFilter(). image_blur() Performs blurring filter images. See EBImage::gblur(). image_skeleton() Performs image skeletonization.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial transformations — utils_transform","text":"","code":"image_autocrop(   image,   index = \"NB\",   edge = 5,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_crop(   image,   width = NULL,   height = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_dimension(image, parallel = FALSE, workers = NULL, verbose = TRUE)  image_rotate(   image,   angle,   bg_col = \"white\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = TRUE )  image_horizontal(   image,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_vertical(   image,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_hreflect(   image,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_vreflect(   image,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_resize(   image,   rel_size = 100,   width,   height,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_trim(   image,   edge = NULL,   top = NULL,   bottom = NULL,   left = NULL,   right = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_dilate(   image,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_erode(   image,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_opening(   image,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_closing(   image,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_skeleton(   image,   kern = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE,   ... )  image_filter(   image,   size = 2,   cache = 512,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_blur(   image,   sigma = 3,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_contrast(   image,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial transformations — utils_transform","text":"image image list images class Image. index index segment image. See image_index() details. Defaults \"NB\" (normalized blue). edge image_autocrop() number pixels edge cropped image. edge = 0 image cropped create bounding rectangle (x y coordinates) around image objects. image_trim(), number pixels removed edges. default, 20 pixels removed edges. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. plot TRUE plots modified image. Defaults FALSE. width, height image_resize() Width height resized image. arguments can missing. case, image resized according relative size informed rel_size. image_crop() numeric vector indicating pixel range (x y, respectively) maintained cropped image, e.g., width = 100:200 angle rotation angle degrees. bg_col Color used fill background pixels, defaults \"white\". rel_size relative size resized image. Defaults 100. example, setting rel_size = 50 image width 1280 x 720, new image size 640 x 360. top, bottom, left, right number pixels removed top, bottom, left, right using image_trim(). kern Image object array, containing structuring element. Defaults brushe generated EBImage::makeBrush(). size image_filter() median filter radius (integer). Defaults 3. image_dilate() image_erode() odd number containing size brush pixels. Even numbers rounded next odd one. default depends image resolution computed image resolution (megapixels) times 20. shape character vector indicating shape brush. Can box, disc, diamond, Gaussian line. Default disc. ... Additional arguments passed image_binary(). cache L2 cache size system CPU kB (integer). Defaults 512. sigma numeric denoting standard deviation Gaussian filter used blurring. Defaults 3.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial transformations — utils_transform","text":"image_skeleton() returns binary Image object. functions returns  modified version image depending image_*() function used. image list, list length returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial transformations — utils_transform","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial transformations — utils_transform","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf.jpg\") plot(img)  img <- image_resize(img, 50) img1 <- image_rotate(img, 45) img2 <- image_hreflect(img) img3 <- image_vreflect(img) img4 <- image_vertical(img) image_combine(img1, img2, img3, img4)"},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with pliman","title":"Getting help with pliman","text":"Thanks using pliman! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with pliman","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with pliman","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with pliman","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-110","dir":"Changelog","previous_headings":"","what":"pliman 1.1.0","title":"pliman 1.1.0","text":"CRAN release: 2021-12-10","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 1.1.0","text":"measure_disease_iter() measure disease interactive section. pick_count() count objects image manually. pick_palette() create image palette picking color point(s) image pick_rgb() pick RGB values selected point(s) image. summary_index() summary index either within objects. pliman now exports foward-pipe operator %>%. Code poorman package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"pliman 1.1.0","text":"Deprecated functions last version (count_objects(), image_show(), leaf_area(), objects_rgb(), prop_segmented(), symptomatic_area()) removed. Use Bootstrap 5 pkgdown 2.0.0 package site.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-100","dir":"Changelog","previous_headings":"","what":"pliman 1.0.0","title":"pliman 1.0.0","text":"CRAN release: 2021-11-09","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 1.0.0","text":"analyze_objects() now used main function compute number shape objects. measure_disease() now used main function perform phytopatometry studies. function can compute symptomatic area, well number shape lesions. image_segment_iter() used performs iterative image segmentation. conv_hull(), poly_area(), poly_mass(), poly_spline(), plot_contour(), plot_ellipse() utilities analyzing polygons. dpi() compute resolution (dots per inch) image. tune_tolerance() tunning tolerance parameter.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"deprecated-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions.","title":"pliman 1.0.0","text":"objects_rgb() depracated future. Now, compute index object use object_index argument analyze_objects(), example, analyze_objects(object_index = \"B\"). leaf_area() depracated future. Now, combine analyze_objects() get_measures() obtain area shape objects (leaves). prop_segmented() now deprecated favour image_segment_iter(). count_lesions() now deprecated. Now, compute number shape lesions, use argument show_features = TRUE measure_disease(). image_show() now deprecated favour plot().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"pliman 1.0.0","text":"Include fill_hull argument symptomatic_area() count_lesions() Improve image_contrast() function avoid error regarding image resolution. New argument subfolder image_export() export image subfolder. Now EBImage installation checked pliman installed. image_pliman() now returns image object instead path image. , necessarily call within image_import().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-030","dir":"Changelog","previous_headings":"","what":"pliman 0.3.0","title":"pliman 0.3.0","text":"CRAN release: 2021-06-10","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 0.3.0","text":"image_autocrop() automatic image cropping. image_filter() perform median-based filtering. image_contrast() improve contrast performing adaptive histogram equalization object_coord() get object coordinates (optionally) draw bounding rectangle around multiple objects image. object_id() get object identification image. object_isolate() isolate object image. prop_segmented() perform (iterative) image segmentation pixels proportion.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"pliman 0.3.0","text":"New argument filter count_objects() prop_segmented().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-020","dir":"Changelog","previous_headings":"","what":"pliman 0.2.0","title":"pliman 0.2.0","text":"CRAN release: 2021-05-15 Includes suggestions given CRAN team first submission","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-010","dir":"Changelog","previous_headings":"","what":"pliman 0.1.0","title":"pliman 0.1.0","text":"first version pliman package submitted CRAN.","code":""}]
