[{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Analyzing objects in an image","text":"function analyze_objects() can used count objects image. Let us start simple example image object_300dpi.png available GitHub page. facilitate image importation folder, helper function image_pliman() used.  image produced Microsoft PowerPoint. known resolution 300 dpi (dots per inch) shows four objects Larger square: 10 x 10 cm (100 cm2) Smaller square: 5 x 5 cm (25 cm2) Rectangle: 4 x 2 cm (8 cm2) Circle: 3 cm diameter (~7.08 cm2) count objects image use analyze_objects() inform image object (mandatory argument). First, use image_binary() see suitable index segment objects background. default, R, G, B (first row) normalized values (second row) used.","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| img <- image_pliman(\"objects_300dpi.jpg\", plot = TRUE) image_binary(img)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"analyzing-objects","dir":"Articles","previous_headings":"","what":"Analyzing objects","title":"Analyzing objects in an image","text":"","code":"img_res <-    analyze_objects(img,                   marker = \"id\",                   index = \"B\") # use blue index to segment"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"adjusting-object-measures","dir":"Articles","previous_headings":"","what":"Adjusting object measures","title":"Analyzing objects in an image","text":"results stored img_res. Since scale declared example, idea actual area objects cm2, pixels. case, use get_measures() adjust measures pixels metric units. two main ways adjusting object measures (pixels cm, example). first one declare known area, perimeter, radius given object. measure objects computed simple rule three. second one declaring known image resolution dpi (dots per inch). case, perimeter, area, radius adjusted informed dpi.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"declaring-a-known-value","dir":"Articles","previous_headings":"Adjusting object measures","what":"Declaring a known value","title":"Analyzing objects in an image","text":"Since known area larger square (object 1), let us adjust area objects image using . can used adjust measures based perimeter radius. Let us adjust perimeter objects perimeter object 2 (20 cm).","code":"get_measures(img_res,              id = 1,              area ~ 100) |>    str() #> ----------------------------------------- #> measures corrected with: #> object id: 1 #> area     : 100 #> ----------------------------------------- #> Total    : 40.001  #> Average  : 13.334  #> ----------------------------------------- #> Classes 'measures' and 'data.frame': 3 obs. of  34 variables: #>  $ id                  : num  2 3 4 #>  $ x                   : num  1737 1737 1736 #>  $ y                   : num  452 1295 938 #>  $ area                : num  25 7.05 7.95 #>  $ area_ch             : num  24.92 7.05 7.9 #>  $ perimeter           : num  19.9 10.1 11.9 #>  $ radius_mean         : num  2.86 1.49 1.67 #>  $ radius_min          : num  2.492 1.482 0.988 #>  $ radius_max          : num  3.53 1.51 2.23 #>  $ radius_sd           : num  0.31434 0.00396 0.42388 #>  $ diam_mean           : num  5.73 2.99 3.34 #>  $ diam_min            : num  4.98 2.96 1.98 #>  $ diam_max            : num  7.06 3.02 4.45 #>  $ major_axis          : num  2.04 1.06 1.48 #>  $ minor_axis          : num  2.036 1.053 0.874 #>  $ caliper             : num  7.01 3 4.43 #>  $ length              : num  5 3 3.99 #>  $ width               : num  4.99 3 1.98 #>  $ radius_ratio        : num  1.42 1.02 2.25 #>  $ theta               : num  -1.57 0.459 0 #>  $ eccentricity        : num  0.0505 0.1114 0.808 #>  $ form_factor         : num  0.79 0.873 0.704 #>  $ narrow_factor       : num  1.4 1 1.11 #>  $ asp_ratio           : num  1 1 2.01 #>  $ rectangularity      : num  0.998 1.278 0.994 #>  $ pd_ratio            : num  2.85 3.36 2.69 #>  $ plw_ratio           : num  2 1.68 2 #>  $ solidity            : num  1 1 1.01 #>  $ convexity           : num  0.75 0.909 0.836 #>  $ elongation          : num  0.00169 0.00113 0.50318 #>  $ circularity         : num  15.9 14.4 17.8 #>  $ circularity_haralick: num  9.11 377.4 3.94 #>  $ circularity_norm    : num  0.787 0.868 0.7 #>  $ coverage            : num  0.1068 0.0301 0.034 get_measures(img_res,              id = 2,              perimeter ~ 20) |>    str() #> ----------------------------------------- #> measures corrected with: #> object id: 2 #> perimeter     : 20 #> ----------------------------------------- #> Total    : 62.081  #> Average  : 20.694  #> ----------------------------------------- #> Classes 'measures' and 'data.frame': 3 obs. of  34 variables: #>  $ id                  : num  1 3 4 #>  $ x                   : num  668 1737 1736 #>  $ y                   : num  797 1295 938 #>  $ area                : num  100.52 7.09 7.99 #>  $ area_ch             : num  100.35 7.09 7.94 #>  $ perimeter           : num  40 10.1 11.9 #>  $ radius_mean         : num  5.75 1.5 1.67 #>  $ radius_min          : num  5.01 1.49 0.99 #>  $ radius_max          : num  7.08 1.51 2.23 #>  $ radius_sd           : num  0.63056 0.00397 0.42499 #>  $ diam_mean           : num  11.5 3 3.35 #>  $ diam_min            : num  10.02 2.97 1.98 #>  $ diam_max            : num  14.16 3.03 4.46 #>  $ major_axis          : num  4.09 1.06 1.49 #>  $ minor_axis          : num  4.088 1.056 0.876 #>  $ caliper             : num  14.08 3.01 4.45 #>  $ length              : num  14.16 3.01 4 #>  $ width               : num  14.15 3.01 1.99 #>  $ radius_ratio        : num  1.41 1.02 2.25 #>  $ theta               : num  0.783 0.459 0 #>  $ eccentricity        : num  0.0253 0.1114 0.808 #>  $ form_factor         : num  0.788 0.873 0.704 #>  $ narrow_factor       : num  0.995 1 1.112 #>  $ asp_ratio           : num  1 1 2.01 #>  $ rectangularity      : num  1.992 1.278 0.994 #>  $ pd_ratio            : num  2.84 3.36 2.69 #>  $ plw_ratio           : num  1.41 1.68 2 #>  $ solidity            : num  1 1 1.01 #>  $ convexity           : num  0.75 0.909 0.836 #>  $ elongation          : num  0.00043 0.00113 0.50318 #>  $ circularity         : num  15.9 14.4 17.8 #>  $ circularity_haralick: num  9.12 377.4 3.94 #>  $ circularity_norm    : num  0.787 0.868 0.7 #>  $ coverage            : num  0.4274 0.0301 0.034"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"declaring-the-image-resolution","dir":"Articles","previous_headings":"Adjusting object measures","what":"Declaring the image resolution","title":"Analyzing objects in an image","text":"image resolution known, measures adjusted according resolution. Let us see numerical example pixels_to_cm(). function converts number pixels (\\(px\\)) cm, considering image resolution \\(dpi\\), follows: \\(cm = px \\times (2.54/dpi)\\). Since know number pixels larger square, perimeter cm given perimeter object 1 adjusted image resolution close true (40 cm). Bellow, values measures adjusted declaring dpi argument get_measures().","code":"# number of pixels for the highest square perimeter ls_px <- img_res$results$perimeter[1] pixels_to_cm(px = ls_px, dpi = 300) #> [1] 39.9294 get_measures(img_res, dpi = 300) |> str() #> Classes 'measures' and 'data.frame': 4 obs. of  34 variables: #>  $ id                  : num  1 2 3 4 #>  $ x                   : num  668 1737 1737 1736 #>  $ y                   : num  797 452 1295 938 #>  $ area                : num  99.98 25 7.05 7.95 #>  $ area_ch             : num  99.81 24.91 7.05 7.9 #>  $ perimeter           : num  39.9 19.9 10.1 11.9 #>  $ radius_mean         : num  5.73 2.86 1.49 1.67 #>  $ radius_min          : num  4.994 2.491 1.482 0.988 #>  $ radius_max          : num  7.06 3.53 1.51 2.23 #>  $ radius_sd           : num  0.62885 0.31432 0.00396 0.42384 #>  $ diam_mean           : num  11.46 5.73 2.99 3.34 #>  $ diam_min            : num  9.99 4.98 2.96 1.98 #>  $ diam_max            : num  14.12 7.06 3.02 4.45 #>  $ major_axis          : num  4.08 2.04 1.06 1.48 #>  $ minor_axis          : num  4.077 2.036 1.053 0.874 #>  $ caliper             : num  14.05 7.01 3 4.43 #>  $ length              : num  14.12 5 3 3.99 #>  $ width               : num  14.11 4.99 3 1.98 #>  $ radius_ratio        : num  1.41 1.42 1.02 2.25 #>  $ theta               : num  0.783 -1.57 0.459 0 #>  $ eccentricity        : num  0.0253 0.0505 0.1114 0.808 #>  $ form_factor         : num  0.788 0.79 0.873 0.704 #>  $ narrow_factor       : num  0.995 1.402 1 1.112 #>  $ asp_ratio           : num  1 1 1 2.01 #>  $ rectangularity      : num  1.992 0.998 1.278 0.994 #>  $ pd_ratio            : num  2.84 2.85 3.36 2.69 #>  $ plw_ratio           : num  1.41 2 1.68 2 #>  $ solidity            : num  1 1 1 1.01 #>  $ convexity           : num  0.75 0.75 0.909 0.836 #>  $ elongation          : num  0.00043 0.00169 0.00113 0.50318 #>  $ circularity         : num  15.9 15.9 14.4 17.8 #>  $ circularity_haralick: num  9.12 9.11 377.4 3.94 #>  $ circularity_norm    : num  0.787 0.787 0.868 0.7 #>  $ coverage            : num  0.4274 0.1068 0.0301 0.034"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"counting-crop-grains","dir":"Articles","previous_headings":"","what":"Counting crop grains","title":"Analyzing objects in an image","text":", count grains image soybean_touch.jpg. image cyan background contains 30 soybean grains touch . Two segmentation strategies used. first one using image segmentation based color indexes.  function analyze_objects() segment image using default normalized blue index, follows \\(NB = (B/(R+G+B))\\), \\(R\\), \\(G\\), \\(B\\) red, green, blue bands. Objects count segmented objects colored random permutations.  Users can set show_contour = FALSE remove contour line identify objects (example grains) using arguments marker = \"id\". color background can also changed col_background.  following example, select objects area average objects using lower_size = 2057.36. Additionally, use argument show_original = FALSE show results colors (non-original image).  Users can also use topn_* arguments select top n objects based either smaller largest areas. Let’s see point 5 grains smallest area, showing original grains blue background. also use argument index choose personalized index segment image. Just comparison, set explicitly normalized blue index calling index = \"B/(R+G+B)\".","code":"soy <-        image_pliman(\"soybean_touch.jpg\") grain <-      image_pliman(\"soybean_grain.jpg\") background <- image_pliman(\"la_back.jpg\") image_combine(soy, grain, background, ncol = 3) count2 <-    analyze_objects(soy,                   index = \"NB\") # default count <-    analyze_objects(soy,                   show_contour = FALSE,                   marker = \"id\",                   show_segmentation = FALSE,                   col_background = \"white\",                   index = \"NB\") # default # Get the object measures measures <- get_measures(count) str(measures) #> Classes 'measures' and 'data.frame': 30 obs. of  34 variables: #>  $ id                  : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ x                   : num  245 537 237 344 277 ... #>  $ y                   : num  509 401 339 105 260 ... #>  $ area                : num  2279 2289 2310 2436 2159 ... #>  $ area_ch             : num  2304 2262 2288 2408 2122 ... #>  $ perimeter           : num  184 178 181 186 172 ... #>  $ radius_mean         : num  26.5 26.6 26.7 27.5 25.8 ... #>  $ radius_min          : num  23 24.8 24 24.3 24.2 ... #>  $ radius_max          : num  29.4 28.7 29.4 30.5 28 ... #>  $ radius_sd           : num  1.375 0.966 1.238 1.74 0.801 ... #>  $ diam_mean           : num  53 53.1 53.4 54.9 51.5 ... #>  $ diam_min            : num  45.9 49.7 48 48.6 48.5 ... #>  $ diam_max            : num  58.8 57.4 58.9 61.1 56.1 ... #>  $ major_axis          : num  19.3 19.5 19.8 20.8 18.7 ... #>  $ minor_axis          : num  18.2 18 17.9 18 17.7 ... #>  $ caliper             : num  57.3 56.9 57.7 61 54.4 ... #>  $ length              : num  56.6 56.5 57.2 61 54 ... #>  $ width               : num  51.5 52.4 52 51 50.5 ... #>  $ radius_ratio        : num  1.28 1.16 1.23 1.26 1.16 ... #>  $ theta               : num  -0.828 -0.804 -0.637 -0.979 -0.217 ... #>  $ eccentricity        : num  0.328 0.387 0.428 0.495 0.325 ... #>  $ form_factor         : num  0.85 0.906 0.886 0.889 0.92 ... #>  $ narrow_factor       : num  1.01 1.01 1.01 1 1.01 ... #>  $ asp_ratio           : num  1.1 1.08 1.1 1.2 1.07 ... #>  $ rectangularity      : num  1.28 1.29 1.29 1.28 1.26 ... #>  $ pd_ratio            : num  3.2 3.13 3.14 3.04 3.16 ... #>  $ plw_ratio           : num  1.7 1.64 1.66 1.66 1.64 ... #>  $ solidity            : num  0.989 1.012 1.009 1.012 1.017 ... #>  $ convexity           : num  0.887 0.879 0.911 0.919 0.898 ... #>  $ elongation          : num  0.089 0.0737 0.0911 0.1639 0.0643 ... #>  $ circularity         : num  14.8 13.9 14.2 14.1 13.7 ... #>  $ circularity_haralick: num  19.3 27.5 21.6 15.8 32.2 ... #>  $ circularity_norm    : num  0.821 0.875 0.855 0.858 0.887 ... #>  $ coverage            : num  0.00426 0.00428 0.00432 0.00456 0.00404 0.0043 0.00414 0.00406 0.00432 0.00405 ... analyze_objects(soy,                 marker = \"id\",                 show_original = FALSE,                 lower_size = 2057.36,                 index = \"NB\") # default analyze_objects(soy,                 marker = \"id\",                 topn_lower = 5,                 col_background = \"blue\",                 index = \"B/(R+G+B)\") # default"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"using-sample-palettes","dir":"Articles","previous_headings":"","what":"Using sample palettes","title":"Analyzing objects in an image","text":"Sometimes difficult choose image index segments image efficiently (even using index ). pliman users alternative image segmentation strategy using sample color palettes. case, users can say analyze_objects color palettes used background foreground. generalized linear model (binomial family) used predict value pixel (background foreground). Let’s see grains image can counted strategy.  Provided images stored current working directory (subdirectory), users can count objects need first import image R environment. case, image names need declared characters. Assuming soy, background, grain images saved current working directory, result obtained ","code":"analyze_objects(img = soy,                 background = background,                 foreground = grain) analyze_objects(img = \"soy\",                 background = \"background\",                 foreground = \"grain\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"leaf-shape","dir":"Articles","previous_headings":"","what":"Leaf shape","title":"Analyzing objects in an image","text":"function analyze_objects() computes range object features can used study leaf shape. motivating example, use image potato_leaves.png, gathered Gupta et al. (2020)1  Three key measures (pixel units) : area area object. area_ch area convex hull. perimeter perimeter object. Using measures, circularity solidity computed shown (Gupta et al, 2020). \\[ circularity = 4\\pi(area / perimeter^2)\\] \\[solidity = area / area\\_ch\\] Circularity influenced serrations lobing. Solidity sensitive leaves deep lobes, distinct petiole, can used distinguish leaves lacking structures. Unlike circularity, sensitive serrations minor lobings, since convex hull remains largely unaffected.","code":"potato <- image_pliman(\"potato_leaves.jpg\", plot = TRUE) pot_meas <-   analyze_objects(potato,                   watershed = FALSE,                   marker = \"id\",                   show_chull = TRUE) # shows the convex hull str(pot_meas) #> List of 14 #>  $ results         :'data.frame':    3 obs. of  34 variables: #>   ..$ id                  : num [1:3] 1 2 3 #>   ..$ x                   : num [1:3] 854 197 535 #>   ..$ y                   : num [1:3] 223 217 240 #>   ..$ area                : num [1:3] 51398 58909 35177 #>   ..$ area_ch             : num [1:3] 54600 76590 63138 #>   ..$ perimeter           : num [1:3] 1012 1255 1528 #>   ..$ radius_mean         : num [1:3] 131 140 110 #>   ..$ radius_min          : num [1:3] 92 68.8 37.3 #>   ..$ radius_max          : num [1:3] 199 193 189 #>   ..$ radius_sd           : num [1:3] 26.2 28.6 35.6 #>   ..$ diam_mean           : num [1:3] 263 280 220 #>   ..$ diam_min            : num [1:3] 184 137.6 74.7 #>   ..$ diam_max            : num [1:3] 398 385 378 #>   ..$ major_axis          : num [1:3] 105.4 106.8 83.6 #>   ..$ minor_axis          : num [1:3] 82.9 95.2 80.1 #>   ..$ caliper             : num [1:3] 346 350 318 #>   ..$ length              : num [1:3] 346 330 294 #>   ..$ width               : num [1:3] 255 331 309 #>   ..$ radius_ratio        : num [1:3] 2.16 2.8 5.06 #>   ..$ theta               : num [1:3] 1.432 -0.167 0.505 #>   ..$ eccentricity        : num [1:3] 0.617 0.454 0.287 #>   ..$ form_factor         : num [1:3] 0.631 0.47 0.189 #>   ..$ narrow_factor       : num [1:3] 1 1.06 1.08 #>   ..$ asp_ratio           : num [1:3] 1.358 0.995 0.95 #>   ..$ rectangularity      : num [1:3] 1.72 1.85 2.58 #>   ..$ pd_ratio            : num [1:3] 2.92 3.59 4.81 #>   ..$ plw_ratio           : num [1:3] 1.68 1.9 2.54 #>   ..$ solidity            : num [1:3] 0.941 0.769 0.557 #>   ..$ convexity           : num [1:3] 0.907 0.735 0.557 #>   ..$ elongation          : num [1:3] 0.2635 -0.0046 -0.0521 #>   ..$ circularity         : num [1:3] 19.9 26.7 66.4 #>   ..$ circularity_haralick: num [1:3] 5.02 4.9 3.1 #>   ..$ circularity_norm    : num [1:3] 0.626 0.466 0.186 #>   ..$ coverage            : num [1:3] 0.1339 0.1534 0.0916 #>  $ statistics      :'data.frame':    7 obs. of  2 variables: #>   ..$ stat : chr [1:7] \"n\" \"min_area\" \"mean_area\" \"max_area\" ... #>   ..$ value: num [1:7] 3 35177 48495 58909 12129 ... #>  $ object_rgb      : NULL #>  $ object_index    : NULL #>  $ efourier        : NULL #>  $ efourier_norm   : NULL #>  $ efourier_error  : NULL #>  $ efourier_power  : NULL #>  $ efourier_minharm: NULL #>  $ veins           : NULL #>  $ angles          : NULL #>  $ mask            : NULL #>  $ pcv             : NULL #>  $ parms           :List of 1 #>   ..$ index: chr \"NB\" #>  - attr(*, \"class\")= chr \"anal_obj\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"object-contour","dir":"Articles","previous_headings":"Leaf shape","what":"Object contour","title":"Analyzing objects in an image","text":"Users can also obtain object contour convex hull follows:","code":"cont <-   object_contour(potato,                  watershed = FALSE,                  plot = FALSE) plot(potato) plot_contour(cont, col = \"red\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"convex-hull","dir":"Articles","previous_headings":"Leaf shape","what":"Convex hull","title":"Analyzing objects in an image","text":"function object_contour() returns list coordinate points object contour can used obtain convex hull conv_hull().","code":"conv <- conv_hull(cont) plot(potato) plot_contour(conv, col = \"red\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"area-of-the-convex-hull","dir":"Articles","previous_headings":"Leaf shape","what":"Area of the convex hull","title":"Analyzing objects in an image","text":", area convex hull can obtained poly_area().","code":"(area <- poly_area(conv)) #> [1] 54600.0 76589.5 63138.0"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"leaves-as-base-plot","dir":"Articles","previous_headings":"Leaf shape","what":"Leaves as base plot","title":"Analyzing objects in an image","text":"ggplot2","code":"# create a data frame for contour and convex hull df_cont <-   do.call(rbind,           lapply(seq_along(cont), function(i){             transform(as.data.frame(cont[[i]]), object = names(cont[i]))           }))  df_conv <-     do.call(rbind,           lapply(seq_along(conv), function(i){             transform(as.data.frame(conv[[i]]), object = names(conv[i]))           }))   # plot the objects palette(c(\"red\",\"blue\",\"green\")) with(df_cont,      plot(V1, V2,            cex = 0.5,           col = object,           xlab = NA,           ylab = NA,           axes = F)) with(subset(df_conv, object == 1),      polygon(V1, V2,               col = rgb(1, 0, 0, 0.2),              border = NA)) with(subset(df_conv, object == 2),      polygon(V1, V2,               col = rgb(0, 0, 1, 0.2),              border = NA)) with(subset(df_conv, object == 3),      polygon(V1, V2,               col = rgb(0, 1, 0, 0.2),              border = NA)) library(ggplot2) ggplot(df_cont, aes(V1, V2, group = object)) +   geom_polygon(aes(fill = object)) +   geom_polygon(data = df_conv,                aes(V1, V2, fill = object),                alpha = 0.3) +   theme_void() +   theme(legend.position = \"bottom\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"batch-processing","dir":"Articles","previous_headings":"","what":"Batch processing","title":"Analyzing objects in an image","text":"plant image analysis, frequently necessary process one image. example, plant breeding, number grains per plant (e.g., wheat) frequently used indirect selection high-yielding plants. pliman, batch processing can done user declares argument pattern. following example used count objects images pattern name \"trat\" (e.g., \"trat1\", \"trat2\", \"tratn\") saved subfolder “originals\" current working directory. processed images saved subfolder \"processed\". object list_res list two objects (results statistics) image. speed processing time, especially large number images, argument parallel = TRUE can used. case, images processed asynchronously (parallel) separate R sessions running background machine. number sections set 50% available cores. number can controlled explicitly argument workers.","code":"list_res <-    analyze_objects(pattern = \"trat\", # matches the name pattern in 'originals' subfolder                   dir_original = \"originals\",                   dir_processed = \"processed\",                   parallel = TRUE, # parallel processing                   workers = 8, # 8 multiple sections                   save_image = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/analyze_objects.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Analyzing objects in an image","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Measure leaf area using leaf images","text":"can use analyze_objects() compute object features area, perimeter, radius, etc. can used, example, compute leaf area. Let’s compute leaf area leaves analyze_objects(). First, use image_segmentation() identify candidate indexes segment foreground (leaves) background.   B (Blue) NB (Normalized Blue) two possible candidates segment leaves background. use NB index (default option analyze_objects()). measurement leaf area approach can done two main ways: 1) using object known area, 2) knowing image resolution dpi (dots per inch).","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| path <- \"https://raw.githubusercontent.com/TiagoOlivoto/images/master/pliman\" leaves <-    image_import(\"leaves2.jpg\",                path = path,                plot = TRUE) image_index(leaves)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"using-an-object-of-known-area","dir":"Articles","previous_headings":"Getting started","what":"Using an object of known area","title":"Measure leaf area using leaf images","text":"Count number objects (leaves case) , use argument marker = \"id\" function analyze_objects() obtain identification object (leaf), allowing adjustment leaf area.  Note “holes” leaves resulted segmentation one leaf one object (e.g., 5, 8, 22, 25, 18, 28). affect total leaf area, area individual leaves average leaf area. can solved either setting argument fill_hull = TRUE watershed = FALSE (don’t implement watershed-based object segmentation). Let’s see much better can go.  Almost ! Due morphology leaf composed objects 2 23, segmented two objects. can solved setting argument object_size = \"large\" change default (medium) values tolerance extension arguments.  objects touching , argument watershed = FALSE better option.  ! Now, leaves identified correctly, measures given pixel units. next step convert measures metric units. Convert leaf area area known object function get_measures() used adjust leaf area using object 10, square side 5 cm (25 cm\\(^2\\)).","code":"count <- analyze_objects(leaves, marker = \"id\") count <-   analyze_objects(leaves,                   marker = \"id\",                   fill_hull = TRUE) count <-   analyze_objects(leaves,                   marker = \"id\",                   fill_hull = TRUE,                   object_size = \"large\") analyze_objects(leaves,                 watershed = FALSE) area <-   get_measures(count,                id = 11,                area ~ 25) #> ----------------------------------------- #> measures corrected with: #> object id: 11 #> area     : 25 #> ----------------------------------------- #> Total    : 801.522  #> Average  : 36.433  #> ----------------------------------------- # plot the area to the segmented image image_segment(leaves, index = \"NB\", verbose = FALSE) plot_measures(area,               measure = \"area\",               col = \"red\") # default is \"white\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"knowing-the-image-resolution-in-dpi-dots-per-inch","dir":"Articles","previous_headings":"Getting started","what":"knowing the image resolution in dpi (dots per inch)","title":"Measure leaf area using leaf images","text":"image resolution known, measures pixels obtained analyze_objects() corrected image resolution. function dpi() can used compute dpi image, provided size object known. See dpi section details. case, estimated resolution considering calibration object 10 ~50.5 DPIs. inform value dpi argument get_measures().","code":"area2 <- get_measures(count, dpi = 50.5) plot(leaves) plot_measures(area2,               measure = \"area\",               vjust = -60,               col = \"gray\") # default is \"white\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/leaf_area.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Measure leaf area using leaf images","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"importing-images","dir":"Articles","previous_headings":"Image manipulation","what":"Importing images","title":"Image manipulation with pliman","text":"import list images, argument pattern function image_import() used. images match pattern name imported list.","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| soy <- image_pliman(\"soybean_touch.jpg\") soy_list <-    image_import(pattern = \"sev_\",                path = image_pliman()) # choose path directory names(soy_list) #> [1] \"sev_back.jpg\"    \"sev_healthy.jpg\" \"sev_leaf.jpg\"    \"sev_leaf_nb.jpg\" #> [5] \"sev_sympt.jpg\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"displaying-images","dir":"Articles","previous_headings":"Image manipulation","what":"Displaying images","title":"Image manipulation with pliman","text":"Single images displayed plot(). combining images, function image_combine() used. Users can inform either comma-separated list objects list objects class Image.","code":"# Single images plot(soy) # Combine images image_combine(soy, soy) # Combine images image_combine(soy_list, ncol = 5)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"manipulating-images","dir":"Articles","previous_headings":"Image manipulation","what":"Manipulating images","title":"Image manipulation with pliman","text":"pliman provides set image_*() functions perform image manipulation transformation unique images list images based EBImage package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"resize-an-image","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Resize an image","title":"Image manipulation with pliman","text":"Sometimes resizing high-resolution images needed reduce processing time. function image_resize() used resize image. argument rel_size can used resize image relative size. example, setting rel_size = 50 image width 1280 x 720, new image size 640 x 360. useful speed time analysis computed analyze_objects() measure_disease().","code":"image_dimension(soy) #>  #> ---------------------- #> Image dimension #> ---------------------- #> Width :  825  #> Height:  648 soy_resized <- image_resize(soy, rel_size = 50) image_dimension(soy_resized) #>  #> ---------------------- #> Image dimension #> ---------------------- #> Width :  412  #> Height:  324"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"crop-an-image","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Crop an image","title":"Image manipulation with pliman","text":"Cropping images useful remove noises image edge, well reduce size images processing. crop image, function image_crop() used. Users need inform numeric vector indicating pixel range (width height) maintained cropped image.  width height informed, image cropped vertically horizontally.  width height missing, iterative process image cropping performed. Additionally, automated cropping process can performed. case, image automatically cropped area objects edge five pixels default.  function image_trim() used trim pixels image edges.","code":"crop1 <-   image_crop(soy,              width = 55:750,              height = 20:623,              plot = TRUE) crop2 <-   image_crop(soy,              width = 55:750,              plot = TRUE) # only run in an iterative section image_crop(soy) auto_crop <- image_autocrop(soy, plot = TRUE) # trim 50 pixels from all edges soy_trim <- image_trim(soy, edge = 50, plot = TRUE)  # The same is achieved with soy_trim2 <-   image_trim(soy,              top = 50,              bottom = 50,              left = 50,              right = 50,              plot = TRUE) # trim 100 pixels from top and bottom soy_trim3 <-   image_trim(soy,              top = 100,              bottom = 100,              plot = TRUE) # trim to 5 pixels around objects' area"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"dpi","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Image resolution (DPI)","title":"Image manipulation with pliman","text":"function dpi() runs interactive function compute image resolution given known distance informed user. compute image resolution (dpi) user must use left button mouse create line known distance. can done, example, using template known distance image (e.g., leaves.JPG).","code":"# only run in an interactive section leaves <- image_import(\"./data/leaf_area/leaves.JPG\") dpi(leaves)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"rotate-an-image","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Rotate an image","title":"Image manipulation with pliman","text":"image_rotate() used rotates image clockwise given angle.","code":"soy_rotated <- image_rotate(soy, angle = 45, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"horizontal-and-vertical-reflection","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Horizontal and vertical reflection","title":"Image manipulation with pliman","text":"image_hreflect() image_vreflect() performs vertical horizontal reflection images, respectively.","code":"soy_hrefl <- image_hreflect(soy) soy_vrefl <- image_vreflect(soy) image_combine(soy, soy_hrefl, soy_vrefl, ncol = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"horizontal-and-vertical-conversion","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Horizontal and vertical conversion","title":"Image manipulation with pliman","text":"image_horizontal() image_vertical() converts (needed) image horizontal vertical image, respectively.","code":"soy_h <- image_horizontal(soy) soy_v <- image_vertical(soy) image_combine(soy, soy_h, soy_v, ncol = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"filter-blur-contrast-dilatation-and-erosion","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Filter, blur, contrast, dilatation, and erosion","title":"Image manipulation with pliman","text":"","code":"soy_filter <- image_filter(soy) soy_blur <- image_blur(soy) soy_contrast <- image_contrast(soy) soy_dilatation <- image_dilate(soy) soy_erosion <- image_erode(soy) image_combine(soy, soy_filter, soy_blur, soy_contrast, soy_dilatation, soy_erosion)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"exporting-images","dir":"Articles","previous_headings":"Image manipulation > Manipulating images","what":"Exporting images","title":"Image manipulation with pliman","text":"export images current directory, use function image_export(). list images exported, images saved considering name extension present list. extension present, images saved *.jpg files.","code":"image_export(soy, \"exported.jpg\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/manipulation.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Image manipulation with pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"single-images","dir":"Articles","previous_headings":"","what":"Single images","title":"Phytopatometry in R with the package pliman","text":"","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| # set the path directory path_soy <- \"https://raw.githubusercontent.com/TiagoOlivoto/images/master/pliman\" # import images img <- image_import(\"leaf.jpg\", path = path_soy) healthy <- image_import(\"healthy.jpg\", path = path_soy) symptoms <- image_import(\"sympt.jpg\", path = path_soy) background <- image_import(\"back.jpg\", path = path_soy) image_combine(img, healthy, symptoms, background, ncol = 4)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"image-palettes","dir":"Articles","previous_headings":"","what":"Image palettes","title":"Phytopatometry in R with the package pliman","text":"Sample palettes can created manually sampling small areas representative images producing composite image represents desired classes (background, healthy, symptomatic tissues). Another approach use image_palette() function generate sample color palettes.     Alternatively, users can create mask instead displaying original image.","code":"pals <- image_palette(img, npal = 8) image_combine(pals$palette_list) # to extract the color palettes, use the object plot(pals$palette_list[[1]]) # default settings res <-   measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background) res$severity #>    healthy symptomatic #> 1 89.39804    10.60196 # create a personalized mask res2 <-    measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background,                   show_original = FALSE, # create a mask                   show_contour = FALSE, # hide the contour line                   col_background = \"white\", # default                   col_lesions = \"red\", # default                   col_leaf = \"green\") # default res2$severity #>    healthy symptomatic #> 1 89.18073    10.81927"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"variations-in-image-palettes","dir":"Articles","previous_headings":"","what":"Variations in image palettes","title":"Phytopatometry in R with the package pliman","text":"results may vary depending palettes chosen subjective due researcher’s experience. following example, present second variation color palettes, necrotic area assumed diseased tissue. Therefore, symptomatic area smaller previous example.","code":"# import images healthy2 <- image_import(\"healthy2.jpg\", path = path_soy) symptoms2 <- image_import(\"sympt2.jpg\", path = path_soy) background2 <- image_import(\"back2.jpg\", path = path_soy) image_combine(healthy2, symptoms2, background2, ncol = 3) res3 <-   measure_disease(img = img,                   img_healthy = healthy2,                   img_symptoms = symptoms2,                   img_background = background2) res3$severity #>    healthy symptomatic #> 1 93.66598    6.334016"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"lesion-features","dir":"Articles","previous_headings":"","what":"Lesion features","title":"Phytopatometry in R with the package pliman","text":"","code":"res4 <-   measure_disease(img = img,                   img_healthy = healthy,                   img_symptoms = symptoms,                   img_background = background,                   show_features = TRUE,                   marker = \"area\") res4$shape #>    id       mx       my area perimeter radius_mean radius_min radius_max #> 1   1 221.3230 113.6198 1043 198.19596   22.524952  0.5382155  39.317832 #> 2   2 189.7877 129.3725 1339 254.72287   20.468068  1.7730025  38.973200 #> 3   3 177.8989 213.2117 3749 476.61732   50.300026  1.1176741  94.503442 #> 4   4 209.8534 193.3666 1839 253.82338   23.979054  1.0059477  42.240143 #> 5   5 263.2661 192.6008  145  46.07107    6.447292  4.3339601   8.698971 #> 6   6 119.4659 201.5361  103  37.38478    5.298094  3.3301638   6.824576 #> 8   8 145.0417 260.5944   75  31.14214    4.507543  3.0958333   5.965248 #> 9   9 210.8746 328.1725  933 149.46804   18.447680  7.4482266  30.835115 #> 11 11 280.3878 323.9758  278  66.94113    9.207371  5.3200203  13.334911 #> 12 12 347.0320 334.8117  296  67.11270    9.408209  5.4714532  12.740082 #> 15 15 183.8135 384.5437 1885 194.43860   25.126750 13.1350914  38.595120 #> 16 16 333.2917 369.1520  158  48.45584    6.744503  4.5106324   9.189181 #> 17 17 249.6458 376.2982  150  48.04163    6.685175  3.2985429   9.627560 #> 19 19 172.3645 449.3024 2274 280.76450   28.799773 13.1529185  47.685429 #> 22 22 109.2456 464.1333  272  74.69848    9.005926  3.2101698  14.064589 #> 23 23 122.6870 492.3623  953 135.22540   18.132278  9.9418772  28.187512 #> 24 24 149.0288 520.2069 1299 164.53911   21.213790 11.0918627  33.242401 #>     radius_sd  diam_mean  diam_min  diam_max  maj_axis  min_axis    length #> 1  11.1489366  45.049904  1.076431  78.63566 24.224307  6.644468  76.56940 #> 2   9.0254818  40.936136  3.546005  77.94640 19.623372 10.721898  66.34859 #> 3  25.4850915 100.600052  2.235348 189.00688 54.860355 12.975027 185.17212 #> 4  10.1760043  47.958107  2.011895  84.48029 22.356987 13.351067  74.02319 #> 5   1.2267342  12.894584  8.667920  17.39794  5.392802  3.735867  15.98000 #> 6   1.0112952  10.596188  6.660328  13.64915  4.209667  3.367526  12.85279 #> 8   0.7874123   9.015086  6.191667  11.93050  3.655056  2.748887  11.20310 #> 9   6.4355489  36.895361 14.896453  61.67023 17.898721  7.813632  60.30310 #> 11  2.1417285  18.414742 10.640041  26.66982  8.080964  4.897102  25.08314 #> 12  2.0652271  18.816418 10.942906  25.48016  8.101090  5.203807  24.99819 #> 15  7.5497568  50.253501 26.270183  77.19024 23.227898 12.185394  73.99483 #> 16  1.3701225  13.489006  9.021265  18.37836  5.621635  3.964604  17.01560 #> 17  1.7034990  13.370349  6.597086  19.25512  5.934647  3.507754  18.37485 #> 19  9.9074281  57.599545 26.305837  95.37086 26.463373 15.062149  87.46015 #> 22  2.9475298  18.011851  6.420340  28.12918  8.205614  4.725766  26.10221 #> 23  5.6157518  36.264556 19.883754  56.37502 17.079670  8.266424  54.39893 #> 24  6.0500126  42.427580 22.183725  66.48480 19.355971 10.569757  62.98895 #>        width #> 1  22.625417 #> 2  37.293602 #> 3  46.077191 #> 4  46.393245 #> 5  11.030178 #> 6   9.648415 #> 8   8.557121 #> 9  23.661959 #> 11 14.802998 #> 12 15.182034 #> 15 34.920140 #> 16 12.058468 #> 17 10.717044 #> 19 54.775119 #> 22 14.881567 #> 23 22.776991 #> 24 32.971574 res4$statistics #>        stat      value #> 1         n    17.0000 #> 2  min_area    75.0000 #> 3 mean_area   987.7059 #> 4  max_area  3749.0000 #> 5   sd_area  1007.6932 #> 6  sum_area 16791.0000"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"interactive-disease-measurements","dir":"Articles","previous_headings":"","what":"Interactive disease measurements","title":"Phytopatometry in R with the package pliman","text":"alternative approach measuring disease percentage available measure_disease_iter() function. function offers interactive interface empowers users manually select sample colors directly image. , provides highly customizable analysis method. One advantage using measure_disease_iter() ability utilize “mapview” viewer, enhances analysis process offering zoom-options. feature allows users closely examine specific areas image, enabling detailed inspection accurate disease measurement.","code":"img <- image_pliman(\"sev_leaf.jpg\", plot = TRUE) measure_disease_iter(img, viewer = \"mapview\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/phytopatometry.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Phytopatometry in R with the package pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Plant IMage Analysis","text":"pliman (plant image analysis) package designed analyze plant images, particularly leaf seed analysis. offers range functionalities assist various tasks measuring disease severity, counting lesions, obtaining lesion shapes, counting objects image, extracting object characteristics, performing Fourier Analysis, obtaining RGB values, extracting object coordinates outlines, isolating objects, plotting object measurements.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"leaf-area-measurement","dir":"Articles","previous_headings":"","what":"Leaf area measurement","title":"Plant IMage Analysis","text":"measure leaf area image, can use analyze_objects() function. two ways adjust pixel area metric units (cm): Using object known area correct measurements Knowing image resolution dots per inch (dpi)","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"adjusting-leaf-area-using-a-known-object","dir":"Articles","previous_headings":"Leaf area measurement","what":"Adjusting leaf area using a known object","title":"Plant IMage Analysis","text":"demonstrate first approach, let’s count number objects plot IDs using marker = “id” argument analyze_objects() function. allows us adjust leaf area using known object, case, leaf square area 4 cm².  adjust leaf area using known object (id = 6), can utilize get_measures() function.","code":"library(pliman) # The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, # which was just loaded, will retire in October 2023. # Please refer to R-spatial evolution reports for details, especially # https://r-spatial.org/r/2023/05/15/evolution4.html. # It may be desirable to make the sf package available; # package maintainers should consider adding sf to Suggests:. # The sp package is now running under evolution status 2 #      (status 2 uses the sf package in place of rgdal) # |==========================================================| # | Tools for Plant Image Analysis (pliman 2.0.1)            | # | Author: Tiago Olivoto                                    | # | Type 'citation('pliman')' to know how to cite pliman     | # | Type 'vignette('pliman_start')' for a short tutorial     | # | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | # |==========================================================| leaves <- image_pliman(\"la_leaves.jpg\") plot(leaves) count <- analyze_objects(leaves, marker = \"id\") area <-    get_measures(count,                id = 6,                area ~ 4) # ----------------------------------------- # measures corrected with: # object id: 6 # area     : 4 # ----------------------------------------- # Total    : 144.308  # Average  : 28.862  # ----------------------------------------- str(area) # Classes 'measures' and 'data.frame':  5 obs. of  34 variables: #  $ id                  : num  1 2 3 4 5 #  $ x                   : num  536 438 110 177 314 #  $ y                   : num  498 164 476 173 434 #  $ area                : num  41.41 35.47 31.36 27.52 8.55 #  $ area_ch             : num  41.69 35.65 32.24 28.01 8.58 #  $ perimeter           : num  26.3 23.6 23.9 21.8 11.7 #  $ radius_mean         : num  3.69 3.38 3.28 3.03 1.66 #  $ radius_min          : num  2.76 2.87 2.37 2.3 1.3 #  $ radius_max          : num  5.26 4.54 4.87 4.39 2.24 #  $ radius_sd           : num  0.655 0.419 0.654 0.52 0.262 #  $ diam_mean           : num  7.38 6.76 6.55 6.06 3.32 #  $ diam_min            : num  5.53 5.74 4.75 4.6 2.59 #  $ diam_max            : num  10.52 9.07 9.73 8.78 4.48 #  $ major_axis          : num  3.06 2.68 2.78 2.51 1.36 #  $ minor_axis          : num  2.156 2.111 1.847 1.783 0.985 #  $ caliper             : num  9.65 8.53 9.05 8.01 4.36 #  $ length              : num  9.68 8.52 9.11 8.01 4.35 #  $ width               : num  6.17 5.94 5.42 5.18 2.79 #  $ radius_ratio        : num  1.9 1.58 2.05 1.91 1.73 #  $ theta               : num  1.52 -1.53 1.56 1.56 -1.46 #  $ eccentricity        : num  0.71 0.614 0.748 0.703 0.691 #  $ form_factor         : num  0.75 0.798 0.69 0.73 0.784 #  $ narrow_factor       : num  0.997 1.001 0.993 1 1.003 #  $ asp_ratio           : num  1.57 1.43 1.68 1.55 1.56 #  $ rectangularity      : num  1.44 1.43 1.57 1.51 1.42 #  $ pd_ratio            : num  2.73 2.77 2.64 2.72 2.69 #  $ plw_ratio           : num  1.66 1.63 1.64 1.65 1.64 #  $ solidity            : num  0.993 0.995 0.973 0.983 0.996 #  $ convexity           : num  0.887 0.916 0.904 0.899 0.883 #  $ elongation          : num  0.363 0.302 0.404 0.353 0.357 #  $ circularity         : num  16.8 15.7 18.2 17.2 16 #  $ circularity_haralick: num  5.63 8.08 5.01 5.83 6.33 #  $ circularity_norm    : num  0.743 0.792 0.683 0.723 0.77 #  $ coverage            : num  0.0956 0.0819 0.0724 0.0635 0.0197 # plot the area to the segmented image image_segment(leaves, index = \"NB\", verbose = FALSE) plot(leaves) plot_measures(area, measure = \"area\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"adjusting-leaf-area-using-image-resolution","dir":"Articles","previous_headings":"Leaf area measurement","what":"Adjusting leaf area using image resolution","title":"Plant IMage Analysis","text":"image resolution known, can use dpi() function compute dots per inch (dpi) image. allows us convert pixel units metric units. apply method, need know size object image. can refer tutorial details.","code":"area_dpi <- get_measures(count, dpi = 83.5) plot(leaves) plot_measures(area_dpi,               measure = \"area\",               vjust = -25)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"counting-crop-grains","dir":"Articles","previous_headings":"","what":"Counting crop grains","title":"Plant IMage Analysis","text":", count grains image soybean_touch.jpg. image cyan background contains 30 soybean grains touch .","code":"soy <- image_pliman(\"soybean_touch.jpg\") plot(soy)  # Count the objects in the image grains <- analyze_objects(soy)  # Draws the object id (by default) plot_measures(grains)"},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"using-image-indexes","dir":"Articles","previous_headings":"Disease severity","what":"Using image indexes","title":"Plant IMage Analysis","text":"compute percentage symptomatic leaf area can use measure_disease() function can use image index segment entire leaf background separate diseased tissue healthy tissue. Alternatively, can provide color palette samples measure_disease() function. approach, function fits general linear model (binomial family) RGB values image. uses color palette samples segment lesions healthy leaf. following example, compute symptomatic area soybean leaf. proportion healthy symptomatic areas given proportion total leaf area segmenting leaf background (blue).","code":"img <- image_pliman(\"sev_leaf.jpg\") # Computes the symptomatic area measure_disease(img = img,                 index_lb = \"B\", # to remove the background                 index_dh = \"NGRDI\", # to isolate the diseased area                 threshold = c(\"Otsu\", 0), # You can also use the Otsu algorithm in both indexes (default)                 plot = TRUE) # $severity #    healthy symptomatic # 1 92.62721    7.372791 #  # $shape # NULL #  # $statistics # NULL #  # attr(,\"class\") # [1] \"plm_disease\""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"interactive-disease-measurements","dir":"Articles","previous_headings":"Disease severity","what":"Interactive disease measurements","title":"Plant IMage Analysis","text":"alternative approach measuring disease percentage available measure_disease_iter() function. function offers interactive interface empowers users manually select sample colors directly image. , provides highly customizable analysis method. One advantage using measure_disease_iter() ability utilize “mapview” viewer, enhances analysis process offering zoom-options. feature allows users closely examine specific areas image, enabling detailed inspection accurate disease measurement.","code":"img <- image_pliman(\"sev_leaf.jpg\", plot = TRUE) measure_disease_iter(img, viewer = \"mapview\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"rgb-values-for-objects","dir":"Articles","previous_headings":"","what":"RGB values for objects","title":"Plant IMage Analysis","text":"function analyze_objects() can also used get Red Green Blue (RGB) -image index- objects image. , use argument object_index.","code":"img <- image_pliman(\"soy_green.jpg\") # Segment the foreground (grains) using the normalized blue index # Shows the average value of the blue index in each object  rgb <-    analyze_objects(img,                   object_index = \"B\",                   pixel_level_index = TRUE) # Plots the B index for each grain plot_measures(rgb, measure = \"B\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"Plant IMage Analysis","text":"come across clear bugs using package, please consider filing minimal reproducible example github. help developers address issue promptly. Suggestions criticisms aimed improving quality usability package highly encouraged. feedback valuable making {pliman} even better!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/pliman_start.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Plant IMage Analysis","text":"examples utilize {pliman} analyzing plant images, can visit link. page, find downloadable source code images can used analysis. Additionally, can watch talk {pliman} (Portuguese) gain insights tips using package effectively. Get ready project let {pliman} shine  image analysis capabilities!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Analyzing polygons with pliman","text":"polygon plane figure described finite number straight-line segments connected form closed polygonal chain (Singer, 1993)1. Given , may conclude image objects can expressed polygons n vertices. pliman set useful functions (draw_*()) draw common shapes circles, squares, triangles, rectangles n-tagons. Another group poly_*() functions can used analyze polygons. Let’s start simple example, related area perimeter square.  Now, Let’s see happens start hexagon increase number sides 1000.  Note \\(n \\\\infty\\), sum sides becomes circumference circle, given \\(2\\pi r\\), area becomes \\(\\pi r^2\\). cool, pliman mainly designed analyze plant image analysis. , use polygons? Let’s see can use functions obtain useful information.","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| square <- draw_square(side = 1) poly_area(square) #> [1] 1 poly_perimeter(square) #> [1] 3 shapes <- list(side6 <- draw_n_tagon(6, plot = FALSE),                side12 <- draw_n_tagon(12, plot = FALSE),                side24 <- draw_n_tagon(24, plot = FALSE),                side100 <- draw_n_tagon(100, plot = FALSE),                side500 <- draw_n_tagon(500, plot = FALSE),                side100 <- draw_n_tagon(1000, plot = FALSE)) plot_polygon(shapes, merge = FALSE) poly_area(shapes) #> [1] 2.598076 3.000000 3.105829 3.139526 3.141510 3.141572 poly_perimeter(shapes) #> [1] 5.000000 5.694019 6.004205 6.219330 6.270578 6.276892 link <- \"https://raw.githubusercontent.com/TiagoOlivoto/tiagoolivoto/master/static/tutorials/pliman_lca/imgs/leaves.jpg\" leaves <- image_import(link, plot = TRUE) cont <- object_contour(leaves, watershed = FALSE, index = \"HI\") # plotting the polygon plot_polygon(cont)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"object-measures","dir":"Articles","previous_headings":"","what":"Object measures","title":"Analyzing polygons with pliman","text":"Nice! can use contour object obtain useful information related shape. reduce amount output, use five samples: 2, 4, 13, 24, 35.  current version pliman, able compute following measures. details, see Chen & Wang (2005)2, Claude (2008)3, Montero et al. 20094.","code":"cont <- cont[c(\"2\", \"4\", \"13\", \"24\", \"41\")] plot_polygon(cont)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"area","dir":"Articles","previous_headings":"Object measures","what":"Area","title":"Analyzing polygons with pliman","text":"area shape computed using Shoelace Formula (Lee Lim, 2017)5, follows \\[ =\\frac{1}{2}\\left|\\sum_{=1}^{n}\\left(x_{} y_{+1}-x_{+1}y_{}\\right)\\right| \\]","code":"poly_area(cont) #> [1] 45075.0 20793.5 15183.5  4144.0  1688.0"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"perimeter","dir":"Articles","previous_headings":"Object measures","what":"Perimeter","title":"Analyzing polygons with pliman","text":"perimeter computed sum euclidean distance every point shape. distances can obtained poly_distpts().","code":"poly_perimeter(cont) #>         2         4        13        24        41  #> 1290.1413  630.7128  565.7422  291.5929  603.1543  # perimeter of a circle with radius equals to 2 circle <- draw_circle(radius = 2, plot = FALSE) poly_perimeter(circle) #> [1] 12.56635  # check the result 2*pi*2 #> [1] 12.56637"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"radius","dir":"Articles","previous_headings":"Object measures","what":"Radius","title":"Analyzing polygons with pliman","text":"radius pixel object contour computed distance object centroid (also called ‘center mass’). distances can obtained poly_centdist(). average, maximum minimum radius can obtained.","code":"dists <- poly_centdist(cont)  # statistics for the radius mean_list(dists) #>         2         4        13        24        41  #> 119.55450  85.22870  72.13064  39.10193  73.70601 min_list(dists) #>         2         4        13        24        41  #> 68.938361 62.146291 48.670983 25.480450  2.638939 max_list(dists) #>         2         4        13        24        41  #> 171.20105 129.75938 108.46217  61.56336 147.04645 sd_list(dists) #>        2        4       13       24       41  #> 20.94407 16.84946 14.62283 10.26425 42.27660  # average radius of the circle above poly_centdist(circle) |> mean_list() #> [1] 1.999998"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"length-and-width","dir":"Articles","previous_headings":"Object measures","what":"Length and width","title":"Analyzing polygons with pliman","text":"length width object computed poly_lw() difference maximum minimum x y coordinates object aligned poly_align().","code":"aligned <- poly_align(cont) # compute length and width poly_lw(cont) #>        length     width #> [1,] 314.3777 265.87632 #> [2,] 235.4453 138.61494 #> [3,] 186.3901 140.53457 #> [4,] 116.0408  56.15904 #> [5,] 292.2781  10.17229"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"circularity-eccentricity-caliper-and-elongation","dir":"Articles","previous_headings":"Object measures","what":"Circularity, eccentricity, caliper, and elongation","title":"Analyzing polygons with pliman","text":"Circularity measure (Montero et al. 2009)6 also called shape compactness, roundness measure object. given \\(C = P^2 / \\), \\(P\\) perimeter \\(\\) area object. Since measure dependent scale, normalized circularity can used. case, assumed unity circle. measure invariant translation, rotation, scaling transformations, dimensionless. given : \\(Cn = P^2 / 4 \\pi \\) poly_circularity_haralick() computes Haralick’s circularity (CH). method based computation Euclidean distances object centroid boundary pixel. set distances, mean (\\(m\\)) standard deviation (\\(s\\)) computed. statistical parameters used ratio calculates circularity, CH, shape, \\(CH = m/sd\\) poly_convexity() Computes convexity shape using ratio perimeter convex hull perimeter polygon. poly_eccentricity() Computes eccentricity shape using ratio eigenvalues (inertia axes coordinates). poly_elongation() Computes elongation shape 1 - width / length poly_caliper() Computes caliper (Also called Feret’s diameter). Users can use function poly_measures() compute object measures single call. image resolution known, , measures can corrected get_measures(). image resolution can obtained using known distance image. example, white square side 5 cm. , using dpi() resolution can obtained. case, dpi ~50.","code":"poly_circularity(cont) #>         2         4        13        24        41  #>  36.92656  19.13091  21.07974  20.51796 215.51845 poly_circularity_norm(cont) #>          2          4         13         24         41  #> 0.34030714 0.65686211 0.59613497 0.61245704 0.05830763  # normalized circularity for different shapes draw_square(plot = FALSE) |> poly_circularity_norm() #> [1] 1.396263 draw_circle(plot = FALSE) |> poly_circularity_norm() #> [1] 0.9999967 poly_circularity_haralick(cont) #>        2        4       13       24       41  #> 5.708275 5.058245 4.932743 3.809527 1.743423 poly_convexity(cont) #>         2         4        13        24        41  #> 0.6435196 0.8850799 0.7579630 0.9099463 0.7222449 poly_eccentricity(cont) #>             [,1] #> [1,] 0.833397171 #> [2,] 0.421770889 #> [3,] 0.599180391 #> [4,] 0.297943286 #> [5,] 0.001438398 poly_elongation(cont) #>           [,1] #> [1,] 0.1542773 #> [2,] 0.4112648 #> [3,] 0.2460192 #> [4,] 0.5160407 #> [5,] 0.9651965 poly_caliper(cont) #>        2        4       13       24       41  #> 317.5106 229.5125 187.4807 115.1347 253.3338 (measures <- poly_measures(cont)) #>    id        x        y    area area_ch perimeter radius_mean radius_min #> 2   1 911.0558 190.1729 45075.0   57540 1290.1413   119.55450  68.938361 #> 4   2 689.1227 171.8705 20793.5   21924  630.7128    85.22870  62.146291 #> 13  3 870.4033 485.5803 15183.5   16554  565.7422    72.13064  48.670983 #> 24  4 846.2110 625.7005  4144.0    4433  291.5929    39.10193  25.480450 #> 41  5 472.9797 784.6601  1688.0    2167  603.1543    73.70601   2.638939 #>    radius_max radius_sd radius_ratio diam_mean   diam_min diam_max  caliper #> 2   171.20105  20.94407     2.483393 239.10899 137.876721 342.4021 314.3777 #> 4   129.75938  16.84946     2.087967 170.45741 124.292582 259.5188 235.4453 #> 13  108.46217  14.62283     2.228477 144.26129  97.341966 216.9243 186.3901 #> 24   61.56336  10.26425     2.416102  78.20386  50.960900 123.1267 116.0408 #> 41  147.04645  42.27660    55.721805 147.41202   5.277878 294.0929 292.2781 #>      length     width  solidity convexity elongation circularity #> 2  314.3777 265.87632 0.7833681 0.6435196  0.1542773    36.92656 #> 4  235.4453 138.61494 0.9484355 0.8850799  0.4112648    19.13091 #> 13 186.3901 140.53457 0.9172103 0.7579630  0.2460192    21.07974 #> 24 116.0408  56.15904 0.9348071 0.9099463  0.5160407    20.51796 #> 41 292.2781  10.17229 0.7789571 0.7222449  0.9651965   215.51845 #>    circularity_haralick circularity_norm eccentricity       pcv #> 2              5.708275       0.34030714  0.833397171 2.6693543 #> 4              5.058245       0.65686211  0.421770889 0.8422071 #> 13             4.932743       0.59613497  0.599180391 1.1910148 #> 24             3.809527       0.61245704  0.297943286 1.7042851 #> 41             1.743423       0.05830763  0.001438398 0.6421213 (measures_cor <- get_measures(measures, dpi = 50)) #>    id        x        y      area   area_ch perimeter radius_mean radius_min #> 2   1 911.0558 190.1729 116.32235 148.49003  65.53918     6.07337    3.50207 #> 4   2 689.1227 171.8705  53.66054  56.57795  32.04021     4.32962    3.15703 #> 13  3 870.4033 485.5803  39.18315  42.71991  28.73970     3.66424    2.47249 #> 24  4 846.2110 625.7005  10.69417  11.43998  14.81292     1.98638    1.29441 #> 41  5 472.9797 784.6600   4.35612   5.59225  30.64024     3.74427    0.13406 #>    radius_max radius_sd radius_ratio diam_mean diam_min diam_max  caliper #> 2     8.69701   1.06396      0.12616  12.14674  7.00414 17.39403 15.97039 #> 4     6.59178   0.85595      0.10607   8.65924  6.31406 13.18355 11.96062 #> 13    5.50988   0.74284      0.11321   7.32847  4.94497 11.01976  9.46862 #> 24    3.12742   0.52142      0.12274   3.97276  2.58881  6.25484  5.89487 #> 41    7.46996   2.14765      2.83067   7.48853  0.26812 14.93992 14.84773 #>      length    width solidity convexity elongation circularity #> 2  15.97039 13.50652  0.03980   0.64352    0.15428    36.92656 #> 4  11.96062  7.04164  0.04818   0.88508    0.41126    19.13091 #> 13  9.46862  7.13916  0.04659   0.75796    0.24602    21.07974 #> 24  5.89487  2.85288  0.04749   0.90995    0.51604    20.51796 #> 41 14.84773  0.51675  0.03957   0.72224    0.96520   215.51845 #>    circularity_haralick circularity_norm eccentricity     pcv     pcv #> 2               5.70828          0.34031      0.83340 2.66935 2.66935 #> 4               5.05825          0.65686      0.42177 0.84221 0.84221 #> 13              4.93274          0.59613      0.59918 1.19101 1.19101 #> 24              3.80953          0.61246      0.29794 1.70429 1.70429 #> 41              1.74342          0.05831      0.00144 0.64212 0.64212"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Analyzing polygons with pliman","text":"useful functions can used manipulate coordinates. following example, show features implemented pliman. Just simplicity, use object 2.","code":"o2 <- cont[[\"2\"]] plot_polygon(o2)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"rotate-polygons","dir":"Articles","previous_headings":"A little bit more!","what":"Rotate polygons","title":"Analyzing polygons with pliman","text":"poly_rotate() can used rotate polygon coordinates angle (0-360 degrees) trigonometric direction (anti-clockwise).","code":"rot <- poly_rotate(o2, angle = 45)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"flip-polygons","dir":"Articles","previous_headings":"A little bit more!","what":"Flip polygons","title":"Analyzing polygons with pliman","text":"poly_flip_x() poly_flip_y() can used flip shapes along x y axis, respectively.","code":"flip <- list(   fx = poly_flip_x(o2),   fy = poly_flip_y(o2) ) plot_polygon(flip, merge = FALSE, aspect_ratio = 1)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"sample-points","dir":"Articles","previous_headings":"A little bit more!","what":"Sample points","title":"Analyzing polygons with pliman","text":"poly_sample() samples n coordinates among existing points, poly_sample_prop() samples proportion coordinates among existing.","code":"# sample 50 coordinates poly_sample(o2, n = 50) |> plot_polygon() # sample 10% of the coordinates poly_sample_prop(o2, prop = 0.1) |> plot_polygon()"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"smooth-polygons","dir":"Articles","previous_headings":"A little bit more!","what":"Smooth polygons","title":"Analyzing polygons with pliman","text":"poly_smooth() smooths polygon contour combining sampling prop coordinate points interpolating using vertices vertices.","code":"smooths <-    list(     s1 <- poly_smooth(o2, prop = 0.2, plot = FALSE),     s2 <- poly_smooth(o2, prop = 0.1, plot = FALSE),     s1 <- poly_smooth(o2, prop = 0.05, plot = FALSE)   ) plot_polygon(smooths, merge = FALSE, ncol = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"add-noise-to-a-polygon","dir":"Articles","previous_headings":"A little bit more!","what":"Add noise to a polygon","title":"Analyzing polygons with pliman","text":"poly_jitter() adds small amount noise set point coordinates. See base::jitter() details.","code":"poly_jitter(o2, noise_x = 5, noise_y = 5) |> plot_polygon()"},{"path":"https://tiagoolivoto.github.io/pliman/articles/polygons.html","id":"a-little-bit-more-1","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Analyzing polygons with pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Image segmentation with pliman","text":"Image segmentation process partitioning digital image multiple segments (sets pixels image objects). context plant image analysis, segmentation used simplify representation image something easier analyze. example, using count_objects() count crop grains, first grains need isolated (segmented) background. pliman following functions can used segment image. pliman following functions can used segment image. image_binary() produce binary (black white) image image_segment() produce segmented image (image objects white background). image_segment_iter() segment image iteratively. functions segment image based value image index, may one RGB bands operation bands. Internally, functions call image_index() compute indexes. following indexes currently available. , use argument index\" test segmentation based RGB normalized values. Users can also provide index explicitly providing formula. e.g., index = \"R-B\".   example, can see distribution RGB values (first row) normalized RGB values (second row). two peaks represent grains (smaller peak) blue background (larger peak). clearer difference peaks, better image segmentation.","code":"library(pliman) #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> |==========================================================| #> | Tools for Plant Image Analysis (pliman 2.0.1)            | #> | Author: Tiago Olivoto                                    | #> | Type `citation('pliman')` to know how to cite pliman     | #> | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial | #> |==========================================================| soy <- image_pliman(\"soybean_touch.jpg\") # Compute the indexes # Only show the first 16 to reduce the image size indexes <- image_index(soy, index = pliman_indexes()[1:16], plot = FALSE)  # Create a raster plot with the RGB values plot(indexes) # Create a density plot with the RGB values plot(indexes, type = \"density\")"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"segment-an-image","dir":"Articles","previous_headings":"Getting started","what":"Segment an image","title":"Image segmentation with pliman","text":"function image_segmentation() used segment images using image indexes. example, use indexes computed see image segmented. output function can used input function analyze_objects().   seems \"NB\" index provided better segmentation. \"R\" \"NR\" resulted inverted segmented image, .e., grains considered background remaining ‘selected’ image. circumvent problem, can use argument invert functions.","code":"segmented <- image_segment(soy, index = c(\"R, G, B, NR, NG, NB\")) plot(segmented$NB) image_segment(soy,               index = c(\"R, NR\"),               invert = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"iterative-segmentation","dir":"Articles","previous_headings":"Getting started","what":"Iterative segmentation","title":"Image segmentation with pliman","text":"function image_segment_iter() provides iterative image segmentation, returning proportions segmented pixels. useful one segmentation procedure needed. Users can choose many segmentation perform, using argument nseg.  Using soybean sample leaf (), use function image_segment_iter segment diseased tissue healthy tissue. aim segment symptoms two classes, namely, necrosis (brown areas) chlorosis (yellow areas), compute percentage symptom class. First, need find suitable index segmentation.   Note results can obtained image_segment_iter() using iterative section. \"VARI\" seems suitable index segment symptoms (necrosis chlorosis) healthy tissues. \"GLI\" can used segment necrosis chlorosis. Knowing , can now use image_segment_iter() explicitly indicating indexes, follows  can observed 30.28% original image characterized symptoms (necrosis chlorosis). (symptomatic area), 25.92% necrotic areas. 7.85% total area considered necrotic areas (30.288 \\(\\times\\) 0.2592 103464/1317600 \\(\\times\\) 100) 22.43% (30.28 - 7.85 (399075 - 103464) / 1317600 \\(\\times\\) 100) considered chlorotic areas. Users can use argument threshold controls segmentation made. default (threshold = \"Otsu\"), threshold value based Otsu’s method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. image_segmentation_iter(), vector (allows mixed (numeric character) type) length nseg can used.  Users can set argument threshold specific case, depending aims segmentation.","code":"seg_iter <- image_pliman(\"sev_leaf_nb.jpg\", plot = TRUE) # First segmentation seg <-   image_segment(seg_iter,                 index = \"all\") # second segmentation seg2 <-   image_segment(seg$VARI,                 index = \"all\") # Only run iteratively image_segment_iter(seg_iter, nseg = 2) image_segment_iter(seg_iter,                    nseg = 2, # two segmentations                    index = c(\"VARI\", \"GLI\"),                    ncol = 3) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  397044  30.13388 #> 3     seg2  102621  25.84625 seg_iter1 <-   image_segment_iter(seg_iter,                      nseg = 2, # two segmentations                      index = c(\"VARI\", \"GLI\"),                      threshold = c(0, \"Otsu\"),                      ncol = 3,                      plot = FALSE) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  103605   7.86316 #> 3     seg2   82395  79.52802 seg_iter2 <-   image_segment_iter(seg_iter,                      nseg = 2, # two segmentations                      index = c(\"VARI\", \"GLI\"),                      threshold = c(0.5, \"Otsu\"),                      ncol = 3,                      plot = FALSE) #>      image  pixels   percent #> 1 original 1317600 100.00000 #> 2     seg1  321999  24.43830 #> 3     seg2  101175  31.42091  image_combine(seg_iter1$images$seg1,               seg_iter2$images$seg1)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"producing-a-binary-image","dir":"Articles","previous_headings":"","what":"Producing a binary image","title":"Image segmentation with pliman","text":"can also produce binary image image_binary(). Just curiosity, use indexes \"B\" (blue) \"NB\" (normalized blue). default, image_binary() rescales image 30% size original image speed computation time. Use argument resize = FALSE produce binary image original size.","code":"binary <- image_binary(soy) # original image size image_binary(soy,              index = c(\"B, NB\"),              resize = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/articles/segmentation.html","id":"a-little-bit-more","dir":"Articles","previous_headings":"","what":"A little bit more!","title":"Image segmentation with pliman","text":"link find examples use {pliman} analyze plant images. Source code images can downloaded . can also find talk (Portuguese language) {pliman} . Lights, camera, {pliman}!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiago Olivoto. Author, maintainer.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Olivoto T (2022). “Lights, camera, pliman! R package plant image analysis.” Methods Ecology Evolution, 13(4), 789-798. doi:10.1111/2041-210X.13803.","code":"@Article{,   title = {Lights, camera, pliman! An R package for plant image analysis},   author = {Tiago Olivoto},   year = {2022},   journal = {Methods in Ecology and Evolution},   volume = {13},   number = {4},   pages = {789-798},   doi = {10.1111/2041-210X.13803}, }"},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to pliman","title":"Contributing to pliman","text":"outlines propose change pliman. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to pliman","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to pliman","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to pliman","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"TiagoOlivoto/pliman\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to pliman","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to pliman","text":"Please note pliman project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"pliman-","dir":"","previous_headings":"","what":"pliman","title":"pliman","text":"pliman (plant image analysis) package designed analyze plant images, particularly leaf seed analysis. offers range functionalities assist various tasks measuring disease severity, counting lesions, obtaining lesion shapes, counting objects image, extracting object characteristics, performing Fourier Analysis, obtaining RGB values, extracting object coordinates outlines, isolating objects, plotting object measurements. pliman also provides useful functions image transformation, binarization, segmentation, resolution. Please visit Examples page pliman website detailed documentation function.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pliman","text":"Install latest stable version pliman CRAN : development version pliman can installed GitHub : Note: Windows user, also first download install latest version Rtools.","code":"install.packages(\"pliman\") devtools::install_github(\"TiagoOlivoto/pliman\")  # To build the HTML vignette use devtools::install_github(\"TiagoOlivoto/pliman\", build_vignettes = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"analyze-objects","dir":"","previous_headings":"","what":"Analyze objects","title":"pliman","text":"function analyze_objects() can used analyze objects leaves, grains, pods, pollen image. default, measures returned pixel units. Users can adjust object measures get_measures() provided image resolution (Dots Per Inch) known. Another option use reference object image. last case, argument reference must set TRUE. two options identify reference object: color, using arguments back_fore_index fore_ref_index size, using arguments reference_larger reference_smaller cases, reference_area must declared. Let’s see analyze image flax grains containing reference object (rectangle 2x3 cm). , ’ll identify reference object size; , final results case metric units (cm).","code":"library(pliman) img <- image_pliman(\"flax_grains.jpg\") flax <-    analyze_objects(img,                   index = \"GRAY\",                   reference = TRUE,                   reference_larger = TRUE,                   reference_area = 6,                   marker = \"point\",                   marker_size = 0.5,                   marker_col = \"red\", # default is white                   show_contour = FALSE) # default is TRUE # summary statistics flax$statistics #        stat        value # 1         n 271.00000000 # 2  min_area   0.01868645 # 3 mean_area   0.06165272 # 4  max_area   0.07969222 # 5   sd_area   0.00654426 # 6  sum_area  16.70788678 # 7  coverage   0.05391447  # plot the density of the grain's length (in cm) plot(flax, measure = \"length\")"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"analyzing-shapefiles","dir":"","previous_headings":"","what":"Analyzing shapefiles","title":"pliman","text":"analyze_objects_shp() function performs object analysis based shapefiles (rows columns). Possible applications include computing canopy coverage vegetation indexes useful high-throughput phenotyping. default analyze_objects_shp() calls image_prepare_mv() internally, allowing alignment crop image processing. following example, compute canopy coverage Normalized Green Red Difference Index (NGRDI) one 12 soybean plots.","code":"shp <- image_pliman(\"field_mosaic.jpg\") res <-    analyze_objects_shp(shp,                        ncol = 12,                       nrow = 1,                       buffer_x = 0.1, # defaults is 0                       index = \"HUE\", # used to segment the soil                       object_index = \"NGRDI\")  plot_index_shp(res, attribute = \"coverage\")"},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"using-image-indexes","dir":"","previous_headings":"","what":"Using image indexes","title":"pliman","text":"compute percentage symptomatic leaf area can use measure_disease() function can use image index segment entire leaf background separate diseased tissue healthy tissue. Alternatively, can provide color palette samples measure_disease() function. approach, function fits general linear model (binomial family) RGB values image. uses color palette samples segment lesions healthy leaf. following example, compute symptomatic area soybean leaf. proportion healthy symptomatic areas given proportion total leaf area segmenting leaf background (blue).","code":"img <- image_pliman(\"sev_leaf.jpg\") # Computes the symptomatic area sev <-  measure_disease(img = img,                 index_lb = \"B\", # to remove the background                 index_dh = \"NGRDI\", # to isolate the diseased area                 threshold = c(\"Otsu\", 0), # You can also use the Otsu algorithm in both indexes (default)                 plot = TRUE) sev$severity #    healthy symptomatic # 1 92.62721    7.372791"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"interactive-disease-measurements","dir":"","previous_headings":"","what":"Interactive disease measurements","title":"pliman","text":"alternative approach measuring disease percentage available measure_disease_iter() function. function offers interactive interface empowers users manually select sample colors directly image. , provides highly customizable analysis method. One advantage using measure_disease_iter() ability utilize “mapview” viewer, enhances analysis process offering zoom-options. feature allows users closely examine specific areas image, enabling detailed inspection accurate disease measurement.","code":"img <- image_pliman(\"sev_leaf.jpg\", plot = TRUE)  # works only in an interactive section measure_disease_iter(img, viewer = \"mapview\")"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"pliman","text":"","code":"citation(\"pliman\") Please, support this project by citing it in your publications!    Olivoto T (2022). \"Lights, camera, pliman! An R package for plant   image analysis.\" _Methods in Ecology and Evolution_, *13*(4),   789-798. doi:10.1111/2041-210X.13803   <https://doi.org/10.1111/2041-210X.13803>.  Uma entrada BibTeX para usuários(as) de LaTeX é    @Article{,     title = {Lights, camera, pliman! An R package for plant image analysis},     author = {Tiago Olivoto},     year = {2022},     journal = {Methods in Ecology and Evolution},     volume = {13},     number = {4},     pages = {789-798},     doi = {10.1111/2041-210X.13803},   }"},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"pliman","text":"come across clear bugs using package, please consider filing minimal reproducible example github. help developers address issue promptly. Suggestions criticisms aimed improving quality usability package highly encouraged. feedback valuable making {pliman} even better!","code":""},{"path":"https://tiagoolivoto.github.io/pliman/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"pliman","text":"Please note pliman project released Contributor Code Conduct. contributing project, agree abide terms. Free website hit counter","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tiagoolivoto.github.io/pliman/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyzes objects in an image — analyze_objects","title":"Analyzes objects in an image — analyze_objects","text":"analyze_objects() provides tools counting extracting object features (e.g., area, perimeter, radius, pixel intensity) image. See Details section. analyze_objects_iter() provides iterative section measure object features using object known area. plot.anal_obj() produces histogram R, G, B values argument object_index used function analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyzes objects in an image — analyze_objects","text":"","code":"analyze_objects(   img,   foreground = NULL,   background = NULL,   pick_palettes = FALSE,   viewer = get_pliman_viewer(),   reference = FALSE,   reference_area = NULL,   back_fore_index = \"R/(G/B)\",   fore_ref_index = \"B-R\",   reference_larger = FALSE,   reference_smaller = FALSE,   pattern = NULL,   parallel = FALSE,   workers = NULL,   watershed = TRUE,   veins = FALSE,   sigma_veins = 1,   ab_angles = FALSE,   ab_angles_percentiles = c(0.25, 0.75),   haralick = FALSE,   har_nbins = 32,   har_scales = 1,   har_band = 1,   pcv = FALSE,   pcv_niter = 100,   resize = FALSE,   trim = FALSE,   fill_hull = FALSE,   filter = FALSE,   invert = FALSE,   object_size = \"medium\",   index = \"NB\",   object_index = NULL,   pixel_level_index = FALSE,   return_mask = FALSE,   efourier = FALSE,   nharm = 10,   threshold = \"Otsu\",   k = 0.1,   windowsize = NULL,   tolerance = NULL,   extension = NULL,   lower_noise = 0.1,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   lower_eccent = NULL,   upper_eccent = NULL,   lower_circ = NULL,   upper_circ = NULL,   randomize = TRUE,   nrows = 1000,   plot = TRUE,   show_original = TRUE,   show_chull = FALSE,   show_contour = TRUE,   contour_col = \"red\",   contour_size = 1,   show_lw = FALSE,   show_background = TRUE,   show_segmentation = FALSE,   col_foreground = NULL,   col_background = NULL,   marker = FALSE,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )  # S3 method for anal_obj plot(   x,   which = \"measure\",   measure = \"area\",   type = c(\"density\", \"histogram\"),   ... )  analyze_objects_iter(pattern, known_area, verbose = TRUE, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyzes objects in an image — analyze_objects","text":"img image analyzed. foreground, background color palette foregrond background, respectively (optional). chacarceter used (eg., foreground = \"fore\"), function search current working directory valid image named \"fore\". pick_palettes Logical argument indicating wheater user needs pick color palettes foreground background image. TRUE pick_palette() called internally user can sample color points representing foreground background. viewer viewer option. option controls type viewer use interactive plotting (eg., pick_palettes = TRUE).  provided, value retrieved using get_pliman_viewer(). reference Logical indicate reference object present image. useful adjust measures images obtained standard resolution (e.g., field images). See details section. reference_area known area reference objects. measures objects image corrected using unit area informed . back_fore_index character value indicate index segment foreground (objects reference) background. Defaults \"R/(G/B)\". index optimized segment white backgrounds green leaves blue reference object. fore_ref_index character value indicate index segment objects reference object. can either available index pliman (see pliman_indexes() index computed R, G, B bands. Defaults \"B-R\". index optimized segment green leaves blue reference object white background removed. reference_larger, reference_smaller Logical argument indicating larger/smaller object image must used reference object. valid reference set TRUE reference_area indicates area reference object. IMPORTANT. reference_smaller used, objects area smaller 1% mean objects ignored. used remove possible noise image dust. , sure reference object area removed cutpoint. pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). parallel TRUE processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. object_index informed, multiple sections used extract RGB values object image. may significantly speed processing time image lots objects (say >1000). workers positive numeric scalar function specifying number parallel processes can active time. default, number sections set 50% available cores. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. veins Logical argument indicating whether vein features computed. call object_edge() applies Sobel-Feldman Operator detect edges. result proportion edges relation entire area object(s) image. Note OPERATION IMAGE LEVEL, OBJECT!. sigma_veins Gaussian kernel standard deviation used gaussian blur edge detection algorithm ab_angles Logical argument indicating whether apex base angles computed. Defaults FALSE. TRUE, poly_apex_base_angle() called base apex angles computed considering 25th 75th percentiles object height. percentiles can changed argument ab_angles_percentiles. ab_angles_percentiles percentiles indicating heights object angle computed (apex bottom). Defaults c(0.25, 0.75), means considering 25th 75th percentiles object height. haralick Logical value indicating whether Haralick features computed. Defaults FALSE. har_nbins integer indicating number bins using compute Haralick matrix. Defaults 32. See Details har_scales integer vector indicating number scales use compute Haralick features. See Details. har_band band compute Haralick features (1 = R, 2 = G, 3 = B). Defaults 1. pcv Computes Perimeter Complexity Value? Defaults FALSE. pcv_niter integer specifying number smoothing iterations computing  Perimeter Complexity Value. Defaults 100. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). trim Number pixels removed edges analysis. edges images often shaded, can affect image analysis. edges images can removed specifying number pixels. Defaults FALSE (trimmed edges). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. invert Inverts binary image desired. useful process images black background. Defaults FALSE. reference = TRUE use, invert can declared logical vector length 2 (eg., invert = c(FALSE, TRUE). case, segmentation objects reference foreground using back_fore_index performed using default (inverted), segmentation objects reference performed inverting selection (selecting pixels higher threshold). object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. User can also calculate index using bands names, e.g. index = \"R+B/G\" object_index Defaults FALSE. index informed, average value object returned. can R, G, B values operation involving , e.g., object_index = \"R/B\". case, return object image, average value R/B ratio. Use pliman_indexes_eq() see equations available indexes. pixel_level_index Return indexes computed object_index pixel level? Defaults FALSE avoid returning large data.frames. return_mask Returns mask analyzed image? Defaults FALSE. efourier Logical argument indicating Elliptical Fourier computed object. call efourier() internally. efourier = TRUE used, standard normalized Fourier coefficients returned. nharm integer indicating number harmonics use. Defaults 10. details see efourier(). threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. k numeric range 0-1. k high, local threshold values tend lower. k low, local threshold value tend higher. windowsize windowsize controls number local neighborhood adaptive thresholding. default set 1/3 * minxy, minxy minimum dimension image (pixels). tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. lower_noise prevent noise affecting image analysis, objects lesser 10% mean area objects removed (lower_noise = 0.1). Increasing value remove larger noises (dust points), can remove desired objects . define explicit lower upper size, use lower_size upper_size arguments. lower_size, upper_size Lower upper limits size image analysis. Plant images often contain dirt dust.  Upper limit set NULL, .e., upper limit used. One can set known area use lower_limit = 0 select objects (advised). Objects matches size given range sizes can selected setting two arguments. example, lower_size = 120 upper_size = 140, objects size greater equal 120 less equal 140 considered. topn_lower, topn_upper Select top n objects based area. topn_lower selects n elements smallest area whereas topn_upper selects n objects largest area. lower_eccent, upper_eccent, lower_circ, upper_circ Lower upper limit object eccentricity/circularity image analysis. Users may use arguments remove objects square papers scale (low eccentricity) cut petioles (high eccentricity) images. Defaults NULL (.e., lower upper limits). randomize Randomize lines training model? nrows number lines used training step. Defaults 2000. plot Show image processing? show_original Show count objects original image? show_chull Show convex hull around objects? Defaults FALSE. show_contour Show contour line around objects? Defaults TRUE. contour_col, contour_size color size contour line around objects. Defaults contour_col = \"red\" contour_size = 1. show_lw TRUE, plots length width lines object calling plot_lw(). show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. show_segmentation Shows object segmentation colored random permutations. Defaults FALSE. col_foreground, col_background Foreground background color image processing. Defaults NULL, \"black\", \"white\" used, respectively. marker, marker_col, marker_size type, color size object marker. Defaults NULL, plots object id. Use marker = \"point\" show point object marker = FALSE omit object marker. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". verbose TRUE (default) summary shown console. x object class anal_obj. plot. Either 'measure' (object measures) 'index' (object index). Defaults \"measure\". measure measure plot. Defaults \"area\". type type plot. Either \"hist\" \"density\". Partial matches recognized. ... Depends function: analyze_objects_iter(), arguments passed analyze_objects(). known_area known area template object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyzes objects in an image — analyze_objects","text":"analyze_objects() returns list following objects: results data frame following variables object image: id:  object identification. x,y:  x y coordinates center mass object. area:  area object (pixels). area_ch:  area convex hull around object (pixels). perimeter: perimeter (pixels). radius_min, radius_mean, radius_max: minimum, mean, maximum radius (pixels), respectively. radius_sd: standard deviation mean radius (pixels). diam_min, diam_mean, diam_max: minimum, mean, maximum diameter (pixels), respectively. major_axis, minor_axis: elliptical fit major minor axes (pixels). caliper: longest distance two points margin object. See poly_caliper() details length, width length width objects (pixels). measures obtained range x y coordinates aligning object poly_align(). radius_ratio: radius ratio given radius_max / radius_min. theta: object angle (radians). eccentricity: elliptical eccentricity computed using ratio eigen values (inertia axes coordinates). form_factor (Wu et al., 2007):  difference leaf circle. defined 4*pi*/P, area P perimeter object. narrow_factor (Wu et al., 2007): Narrow factor (caliper / length). asp_ratio (Wu et al., 2007): Aspect ratio (length / width). rectangularity (Wu et al., 2007): similarity leaf rectangle (length * width/ area). pd_ratio (Wu et al., 2007): Ratio perimeter diameter (perimeter / caliper) plw_ratio (Wu et al., 2007): Perimeter ratio length width (perimeter / (length + width)) solidity: object solidity given area / area_ch. convexity: convexity object computed using ratio perimeter convex hull perimeter polygon. elongation: elongation object computed 1 - width / length. circularity: object circularity given perimeter ^ 2 / area. circularity_haralick: Haralick's circularity (CH), computed CH =  m/sd, m sd mean standard deviations pixels perimeter centroid object. circularity_norm: normalized circularity (Cn), unity circle. measure computed Cn = perimeter ^ 2 / 4*pi*area invariant translation, rotation, scaling transformations, dimensionless. asm: angular second-moment feature. con: contrast feature cor: Correlation measures linear dependency gray levels neighboring pixels. var: variance gray levels pixels. idm: Inverse Difference Moment (IDM), .e., local homogeneity. sav: Sum Average. sva: Sum Variance. sen: Sum Entropy. dva: Difference Variance. den: Difference Entropy f12: Difference Variance. f13: angular second-moment feature. statistics: data frame summary statistics area objects. count: pattern used, shows number objects image. obj_rgb: object_index used, returns R, G, B values pixel object. object_index: object_index used, returns index computed object. Elliptical Fourier Analysis: efourier = TRUE used, following objects returned. efourier: Fourier coefficients.  details see efourier(). efourier_norm: normalized Fourier coefficients. details see efourier_norm(). efourier_error: error original data  reconstructed outline. details see efourier_error(). efourier_power: spectrum harmonic Fourier power. details see efourier_power(). veins: veins = TRUE used, returns, image, proportion veins (fact object edges) related total object(s)' area. analyze_objects_iter() returns data.frame containing features described results object analyze_objects(). plot.anal_obj() returns trellis object containing distribution pixels, optionally  object facet = TRUE used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyzes objects in an image — analyze_objects","text":"binary image first generated segment foreground background. argument index useful choose proper index segment image (see image_binary() details). also possible provide color palettes background foreground (arguments background foreground, respectively). used, general linear model (binomial family) fitted RGB values segment fore- background. , number objects  foreground counted. setting arguments lower_size upper_size, possible set threshold lower upper sizes objects, respectively. argument object_size can used set pre-defined values tolerance extension depending image resolution. influence watershed-based object segmentation. Users can also tune tolerance extension explicitly better precision watershed segmentation. watershed = FALSE used, pixels connected set foreground pixels img set unique object. faster, especially large number objects, able segment touching objects. ways correct measures based reference object. reference object known area (reference_area) used image reference = TRUE used, measures objects corrected, considering unit measure informed reference_area. two main ways work reference objects. first, provide reference object contrasting color background object interest. case, arguments back_fore_index fore_ref_index can used define index first segment reference object objects measured background, reference object objects measured. second one use reference object similar color objects measured, contrasting size. example, counting small brown grains, can use brown reference template area larger (says 3 times area grains) uses reference_larger = TRUE. , larger object image used reference object. particularly useful images captured background light, example  2. types: () suggested reference object much larger objects interest (mainly watershed = TRUE). cases, reference object can broken several pieces due watershed algorithm. (ii) Since reference object increase mean area object, argument lower_noise can increased. default (lower_noise = 0.1) objects lesser 10% mean area objects removed. Since mean area increased, increasing lower_noise remove dust noises reliably. argument reference_smaller can used way using pattern, possible process several images common pattern names stored current working directory subdirectory informed dir_original. speed computation time, one can set parallel = TRUE. analyze_objects_iter() can used process several images using object known area template. case, images current working directory match pattern processed. image, function compute features objects show identification (id) object. user needs inform id known object. , given known_area, measures adjusted. end, data.frame adjusted measures returned. useful images taken different heights. cases, image resolution conserved. Consequently, measures adjusted using argument dpi get_measures(), since image different resolution. NOTE: work interactive section. Additional measures: default, measures computed, mainly due computational efficiency user needs simple measures area, length, width. haralick = TRUE, function computes 13 Haralick texture features object based gray-level co-occurrence matrix (Haralick et al. 1979). Haralick features depend configuration parameters har_nbins har_scales. har_nbins controls number bins used compute Haralick matrix. smaller har_nbins can give accurate estimates correlation number events per bin higher. higher value give sensitivity. har_scales controls number scales used compute Haralick features. Since Haralick features compute correlation intensities neighboring pixels possible identify textures different scales, e.g., texture repeated every two pixels 10 pixels. default, Haralick features computed R band. chance default, use argument har_band. example, har_band = 2 compute features green band. efourier = TRUE used, Elliptical Fourier Analysis (Kuhl Giardina, 1982) computed object contour using efourier(). veins = TRUE (experimental), vein features computed. call object_edge() applies Sobel-Feldman Operator detect edges. result proportion edges relation entire area object(s) image. Note OPERATION IMAGE LEVEL, OBJECT LEVEL! , vein features need computed leaves, strongly suggested use one leaf per image. ab_angles = TRUE apex base angles object computed poly_apex_base_angle(). default, function computes angle first pixel apex object two pixels slice object 25th percentile object height (apex angle). base angle computed way first base pixel.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyzes objects in an image — analyze_objects","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp. Gupta, S., Rosenthal, D. M., Stinchcombe, J. R., & Baucom, R. S. (2020). remarkable morphological diversity leaf shape sweet potato (Ipomoea batatas): influence genetics, environment, G×E. New Phytologist, 225(5), 2183–2195. doi:10.1111/NPH.16286 Haralick, R.M., K. Shanmugam, . Dinstein. 1973. Textural Features Image Classification. IEEE Transactions Systems, Man, Cybernetics SMC-3(6): 610–621. doi:10.1109/TSMC.1973.4309314 Kuhl, F. P., Giardina, C. R. (1982). Elliptic Fourier features closed contour. Computer Graphics Image Processing 18, 236–258. doi: doi:10.1016/0146-664X(82)90034-X Lee, Y., & Lim, W. (2017). Shoelace Formula: Connecting Area Polygon Vector Cross Product. Mathematics Teacher, 110(8), 631–636. doi:10.5951/mathteacher.110.8.0631 Montero, R. S., Bribiesca, E., Santiago, R., & Bribiesca, E. (2009). State Art Compactness Circularity Measures. International Mathematical Forum, 4(27), 1305–1335. Chen, C.H., P.S.P. Wang. 2005. Handbook Pattern Recognition Computer Vision. 3rd ed. World Scientific. Wu, S. G., Bao, F. S., Xu, E. Y., Wang, Y.-X., Chang, Y.-F., Xiang, Q.-L. (2007). Leaf Recognition Algorithm Plant Classification Using Probabilistic Neural Network. 2007 IEEE International Symposium Signal Processing Information Technology, 11–16. doi:10.1109/ISSPIT.2007.4458016","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analyzes objects in an image — analyze_objects","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyzes objects in an image — analyze_objects","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"soybean_touch.jpg\") obj <- analyze_objects(img)  obj$statistics #>        stat        value #> 1         n 3.000000e+01 #> 2  min_area 1.366000e+03 #> 3 mean_area 2.051300e+03 #> 4  max_area 2.436000e+03 #> 5   sd_area 2.300703e+02 #> 6  sum_area 6.153900e+04 #> 7  coverage 1.151122e-01  ########################### Example 1 ######################### # Enumerate the objects in the original image # Return the top-5 grains with the largest area top <-  analyze_objects(img,                  marker = \"id\",                  topn_upper = 5)  top$results #>   id        x         y area area_ch perimeter radius_mean radius_min #> 4  4 344.3132 104.74372 2436  2408.0  185.6102    27.45204   24.31796 #> 9  9 468.0383  55.44180 2311  2278.0  181.0244    26.77622   23.16169 #> 3  3 236.6572 338.80546 2310  2288.5  181.0244    26.69273   23.99117 #> 6  6 405.9755  76.41826 2297  2264.5  178.7817    26.58139   24.07681 #> 2  2 537.0532 400.81350 2289  2261.5  178.1960    26.55606   24.84882 #>   radius_max radius_sd diam_mean diam_min diam_max major_axis minor_axis #> 4   30.53131 1.7403323  54.90407 48.63592 61.06262   20.76326   18.04194 #> 9   31.04441 2.3392198  53.55243 46.32339 62.08881   20.69928   17.14476 #> 3   29.44025 1.2381808  53.38545 47.98234 58.88049   19.82571   17.91553 #> 6   30.02968 1.6596304  53.16279 48.15362 60.05937   19.82630   17.78272 #> 2   28.70321 0.9660995  53.11211 49.69764 57.40641   19.53438   18.01553 #>    caliper   length    width radius_ratio      theta eccentricity form_factor #> 4 61.03278 61.02182 51.02160     1.255504 -0.9790241    0.4949248   0.8885535 #> 9 61.18823 61.07428 48.72944     1.340334  1.2628961    0.5603174   0.8862079 #> 3 57.69749 57.20139 51.99249     1.227128 -0.6370637    0.4282680   0.8858245 #> 6 59.48109 59.42578 50.82265     1.247245  1.1427598    0.4421814   0.9030764 #> 2 56.85948 56.53366 52.36854     1.155113 -0.8035065    0.3866007   0.9058576 #>   narrow_factor asp_ratio rectangularity pd_ratio plw_ratio solidity convexity #> 4      1.000180  1.196000       1.278091 3.041156  1.656592 1.011628 0.9187379 #> 9      1.001866  1.253334       1.287804 2.958484  1.648618 1.014486 0.8658923 #> 3      1.008673  1.100186       1.287464 3.137474  1.657825 1.009395 0.9111738 #> 6      1.000931  1.169277       1.314835 3.005691  1.621626 1.014352 0.8761289 #> 2      1.005763  1.079535       1.293397 3.133971  1.636293 1.012160 0.8794599 #>   elongation circularity circularity_haralick circularity_norm    coverage #> 4 0.16387934    14.14250             15.77402        0.8584609 0.004556678 #> 9 0.20212827    14.17993             11.44664        0.8555300 0.004322858 #> 3 0.09106255    14.18607             21.55802        0.8551466 0.004320988 #> 6 0.14477098    13.91507             16.01645        0.8718206 0.004296670 #> 2 0.07367508    13.87235             27.48791        0.8745939 0.004281706   #' ########################### Example 1 ######################### # Correct the measures based on the area of the largest object # note that since the reference object  img <- image_pliman(\"flax_grains.jpg\") res <-   analyze_objects(img,                   index = \"GRAY\",                   marker = \"point\",                   show_contour = FALSE,                   reference = TRUE,                   reference_area = 6,                   reference_larger = TRUE,                   lower_noise = 0.3)  # }  # \\donttest{ library(pliman)  img <- image_pliman(\"soy_green.jpg\") # Segment the foreground (grains) using the normalized blue index (NB, default) # Shows the average value of the blue index in each object  rgb <-    analyze_objects(img,                    marker = \"id\",                    object_index = \"B\",                    pixel_level_index = TRUE)  # density of area plot(rgb)   # histogram of perimeter plot(rgb, measure = \"perimeter\", type = \"histogram\") # or 'hist'   # density of the blue (B) index plot(rgb, which = \"index\")  # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyzes objects using shapefiles — analyze_objects_shp","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"Analyzes objects using shapefiles","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"","code":"analyze_objects_shp(   img,   nrow = 1,   ncol = 1,   buffer_x = 0,   buffer_y = 0,   prepare = FALSE,   viewer = get_pliman_viewer(),   index = \"R\",   shapefile = NULL,   interactive = FALSE,   plot = FALSE,   parallel = FALSE,   workers = NULL,   watershed = TRUE,   filter = FALSE,   object_size = \"medium\",   efourier = FALSE,   object_index = NULL,   veins = FALSE,   verbose = TRUE,   invert = FALSE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"img Image object nrow, ncol number rows columns generate shapefile shapefile declared. Defaults 1. buffer_x, buffer_y Buffering factor width height, respectively, individual shape's side. value 0 0.5 0 means buffering 0.5 means complete buffering (default: 0). value 0.25 buffer shape 25% side. prepare Logical value indicating whether prepare image analysis using image_prepare_mv() function. Defaults FALSE. Set TRUE interactively align crop image processing. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. User can also calculate index using bands names, e.g. index = \"R+B/G\" shapefile (Optional) object created image_shp(). NULL (default), nrow ncol must declared. interactive FALSE (default) grid created automatically based image dimension number nrow/columns. interactive = TRUE, users must draw points diagonal desired bounding box contain grid. plot Plots processed images? Defaults FALSE. parallel TRUE processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. object_index informed, multiple sections used extract RGB values object image. may significantly speed processing time image lots objects (say >1000). workers positive numeric scalar function specifying number parallel processes can active time. default, number sections set 50% available cores. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. object_size Argument control control watershed segmentation. See analyze_objects() details. efourier Logical argument indicating Elliptical Fourier computed object. call efourier() internally. efourier = TRUE used, standard normalized Fourier coefficients returned. object_index Defaults FALSE. index informed, average value object returned. can R, G, B values operation involving , e.g., object_index = \"R/B\". case, return object image, average value R/B ratio. Use pliman_indexes_eq() see equations available indexes. veins Logical argument indicating whether vein features computed. call object_edge() applies Sobel-Feldman Operator detect edges. result proportion edges relation entire area object(s) image. Note OPERATION IMAGE LEVEL, OBJECT!. verbose TRUE (default) summary shown console. invert Inverts binary image desired. useful process images black background. Defaults FALSE. reference = TRUE use, invert can declared logical vector length 2 (eg., invert = c(FALSE, TRUE). case, segmentation objects reference foreground using back_fore_index performed using default (inverted), segmentation objects reference performed inverting selection (selecting pixels higher threshold). ... Aditional arguments passed analyze_objects.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"object class anal_obj. See details Value section analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"analyze_objects_shp function performs object analysis image generates shapefiles representing analyzed objects. function first prepares image analysis using image_prepare_mv() function prepare argument set TRUE. shapefile object provided, number rows columns splitting image obtained shapefile. Otherwise, image split multiple sub-images based specified number rows columns using object_split_shp() function. objects sub-image analyzed using analyze_objects() function, results stored list. parallel processing enabled, analysis performed parallel using multiple workers. analysis results output object provides access various components analysis results, analyzed object coordinates properties. Additionally, shapefiles representing analyzed objects included output object analysis visualization.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/analyze_objects_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyzes objects using shapefiles — analyze_objects_shp","text":"","code":"if(interactive()){ library(pliman)  # Computes the DGCI index for each flax leaf flax <- image_pliman(\"flax_leaves.jpg\", plot =TRUE) res <-    analyze_objects_shp(flax,                        nrow = 3,                        ncol = 5,                        plot = FALSE,                        object_index = \"DGCI\") plot(flax) plot(res$shapefiles) plot_measures(res, measure = \"DGCI\") }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/apply_fun_to_imgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to images — apply_fun_to_imgs","title":"Apply a function to images — apply_fun_to_imgs","text":"functions pliman can applied list images, can ideal deal lots images, mainly high resolution. curiosity, 6000 x 4000 image use nearly 570 Megabytes RAM. , impossible deal lots images within R. apply_fun_to_img() applies function images stored given directory follows: Create vector image names contain given pattern name. Import image list. Apply function imported image. Export mutated image computer. parallel set FALSE (default), images processed sequentially, means one image needs imported, processed, exported image can processed. parallel set TRUE,  images processed asynchronously (parallel) separate R sessions (3) running background machine. may speed processing time lots images need processed.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/apply_fun_to_imgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to images — apply_fun_to_imgs","text":"","code":"apply_fun_to_imgs(   pattern,   fun,   ...,   dir_original = NULL,   dir_processed = NULL,   prefix = \"\",   suffix = \"\",   parallel = FALSE,   workers = 3,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/apply_fun_to_imgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to images — apply_fun_to_imgs","text":"pattern pattern match images' names. fun function apply images. ... Arguments passed fun. dir_original, dir_processed directory containing original processed images. Defaults NULL, means current working directory considered. processed image overwrite original image unless prefix/suffix used subfolder informed dir_processed argument. prefix, suffix prefix /suffix included name processed images. Defaults \"\". parallel TRUE processes images asynchronously (parallel) separate R sessions (3 default) running background machine. may speed processing time, especially pattern used informed. workers positive numeric scalar function specifying number parallel processes can active time. Defaults 3. verbose Shows progress console? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/apply_fun_to_imgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to images — apply_fun_to_imgs","text":"Nothing. processed images saved current working directory.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/apply_fun_to_imgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to images — apply_fun_to_imgs","text":"","code":"# apply_fun_to_imgs(\"pattern\", image_resize, rel_size = 50)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/as_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Image object — as_image","title":"Create an Image object — as_image","text":"function simple wrapper around EBImage::Image().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/as_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Image object — as_image","text":"","code":"as_image(data, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/as_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Image object — as_image","text":"data vector array containing pixel intensities image. missing, default 1x1 zero-filled array used. ... Additional arguments passed EBImage::Image().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/as_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Image object — as_image","text":"Image object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/as_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Image object — as_image","text":"","code":"img <- as_image(rnorm(150 * 150 * 3),          dim = c(150, 150, 3),          colormode = 'Color') plot(img)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrates distances of landmarks — calibrate","title":"Calibrates distances of landmarks — calibrate","text":"Calibrating actual size possible interlandmark distance image known. calibrate() can used determine size known distance (cm) graph. invite users photograph object together scale (e.g., ruler, micrometer...).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrates distances of landmarks — calibrate","text":"","code":"calibrate(img, viewer = get_pliman_viewer())"},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrates distances of landmarks — calibrate","text":"img Image object viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrates distances of landmarks — calibrate","text":"numeric (double) scalar value indicating scale (pixels per unit known distance).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calibrates distances of landmarks — calibrate","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrates distances of landmarks — calibrate","text":"","code":"if(isTRUE(interactive())){ library(pliman) #### compute scale (dots per unit of known distance) #### # only works in an interactive section # objects_300dpi.jpg has a known resolution of 300 dpi img <- image_pliman(\"objects_300dpi.jpg\") # Larger square: 10 x 10 cm # 1) Run the function calibrate() # 2) Use the left mouse button to create a line in the larger square # 3) Declare a known distance (10 cm) # 4) See the computed scale (pixels per cm) calibrate(img)  # scale ~118 # 118 * 2.54 ~300 DPI }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/contours.html","id":null,"dir":"Reference","previous_headings":"","what":"Contour outlines from five leaves — contours","title":"Contour outlines from five leaves — contours","text":"list contour outlines five leaves. may used example functions efourier()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/contours.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contour outlines from five leaves — contours","text":"list five objects leaf_1 leaf_2 leaf_3 leaf_4 leaf_5 object data.frame coordinates outline perimeter","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/contours.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contour outlines from five leaves — contours","text":"Personal data. images obtained Flavia data set downlodable https://flavia.sourceforge.net/","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/contours.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Contour outlines from five leaves — contours","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/custom_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Custom Color Palette — custom_palette","title":"Generate Custom Color Palette — custom_palette","text":"function generates custom color palette using specified colors number colors.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/custom_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Custom Color Palette — custom_palette","text":"","code":"custom_palette(   colors = c(\"#4B0055\", \"#00588B\", \"#009B95\", \"#53CC67\", \"yellow\"),   n = 100 )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/custom_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Custom Color Palette — custom_palette","text":"colors vector colors create color palette. Default c(\"steelblue\", \"salmon\", \"forestgreen\"). n number gradient colors color palette. Default 100.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/custom_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Custom Color Palette — custom_palette","text":"vector colors representing custom color palette.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/custom_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Custom Color Palette — custom_palette","text":"","code":"# Generate a custom color palette with default colors and 10 colors custom_palette() #>   [1] \"#4B0055\" \"#470357\" \"#440759\" \"#410A5B\" \"#3E0E5D\" \"#3B115F\" \"#381562\" #>   [8] \"#351864\" \"#321C66\" \"#2F2068\" \"#2C236A\" \"#29276D\" \"#262A6F\" \"#232E71\" #>  [15] \"#203173\" \"#1D3575\" \"#1A3877\" \"#173C7A\" \"#14407C\" \"#11437E\" \"#0E4780\" #>  [22] \"#0B4A82\" \"#084E84\" \"#055187\" \"#025589\" \"#00588B\" \"#005B8B\" \"#005E8B\" #>  [29] \"#00608C\" \"#00638C\" \"#00668D\" \"#00688D\" \"#006B8D\" \"#006E8E\" \"#00718E\" #>  [36] \"#00738F\" \"#00768F\" \"#00798F\" \"#007B90\" \"#007E90\" \"#008191\" \"#008391\" #>  [43] \"#008691\" \"#008992\" \"#008C92\" \"#008E93\" \"#009193\" \"#009493\" \"#009694\" #>  [50] \"#009994\" \"#019B94\" \"#059D92\" \"#089F90\" \"#0BA18E\" \"#0FA38C\" \"#12A58A\" #>  [57] \"#15A788\" \"#19A987\" \"#1CAB85\" \"#1FAD83\" \"#23AF81\" \"#26B17F\" \"#29B37D\" #>  [64] \"#2DB57B\" \"#30B77A\" \"#33B978\" \"#37BB76\" \"#3ABD74\" \"#3EBF72\" \"#41C170\" #>  [71] \"#44C36E\" \"#48C56D\" \"#4BC76B\" \"#4EC969\" \"#52CB67\" \"#58CD63\" \"#5FCF5F\" #>  [78] \"#66D15B\" \"#6DD357\" \"#74D553\" \"#7AD74F\" \"#81D94A\" \"#88DB46\" \"#8FDE42\" #>  [85] \"#96E03E\" \"#9DE23A\" \"#A4E436\" \"#ABE631\" \"#B2E82D\" \"#B9EA29\" \"#C0EC25\" #>  [92] \"#C7EE21\" \"#CEF01D\" \"#D5F218\" \"#DCF414\" \"#E3F610\" \"#EAF80C\" \"#F1FA08\" #>  [99] \"#F8FC04\" \"#FFFF00\"  # Generate a custom color palette with specified colors and 20 colors custom_palette(colors = c(\"blue\", \"red\"), n = 20) #>  [1] \"#0000FF\" \"#0D00F1\" \"#1A00E4\" \"#2800D6\" \"#3500C9\" \"#4300BB\" \"#5000AE\" #>  [8] \"#5D00A1\" \"#6B0093\" \"#780086\" \"#860078\" \"#93006B\" \"#A1005D\" \"#AE0050\" #> [15] \"#BB0043\" \"#C90035\" \"#D60028\" \"#E4001A\" \"#F1000D\" \"#FF0000\"  # example code library(pliman) custom_palette(n = 5) #> [1] \"#4B0055\" \"#00588B\" \"#009B95\" \"#53CC67\" \"#FFFF00\""},{"path":"https://tiagoolivoto.github.io/pliman/reference/dist_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance map transform — dist_transform","title":"Distance map transform — dist_transform","text":"Computes distance map transform binary image. distance map matrix contains pixel distance nearest background pixel.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/dist_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance map transform — dist_transform","text":"","code":"dist_transform(binary)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/dist_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance map transform — dist_transform","text":"binary binary image","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/dist_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance map transform — dist_transform","text":"Image object array, pixels containing distances nearest background points","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/dist_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance map transform — dist_transform","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") binary <- image_binary(img, \"B\")[[1]]  wts <- dist_transform(binary) range(wts) #> [1]  0 29"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":null,"dir":"Reference","previous_headings":"","what":"Elliptical Fourier Analysis — efourier","title":"Elliptical Fourier Analysis — efourier","text":"Computes Elliptical Fourier Analysis closed outlines based x y-coordinates coordinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elliptical Fourier Analysis — efourier","text":"","code":"efourier(x, nharm = 10, align = FALSE, center = FALSE, smooth_iter = 0)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elliptical Fourier Analysis — efourier","text":"x matrix, data.frame list perimeter coordinates, often produced object_contour() vector landmarks produced landmarks() landmarks_regradi(). nharm integer indicating number harmonics use. Defaults 10. align Align objects computing Fourier analysis? Defaults FALSE. TRUE, object first aligned along major caliper poly_align(). center Center objects origin computing Fourier analysis? Defaults FALSE. TRUE, object first centered origin poly_center(). smooth_iter number smoothing iterations perform. smooth perimeter objects using poly_smooth().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elliptical Fourier Analysis — efourier","text":"list class efourier : harmonic coefficients (, bn, cn dn) estimates coordinates centroid configuration (a0 c0). number rows (points) perimeter outline (nr). number harmonics used (nharm). original coordinates (coords). x list perimeter coordinates, list efourier objects returned object class iefourier_lst.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Elliptical Fourier Analysis — efourier","text":"Adapted Claude (2008). pp. 222-223.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Elliptical Fourier Analysis — efourier","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp. Kuhl, F. P., Giardina, C. R. (1982). Elliptic Fourier features closed contour. Computer Graphics Image Processing 18, 236–258. doi: doi:10.1016/0146-664X(82)90034-X","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elliptical Fourier Analysis — efourier","text":"","code":"library(pliman) leaf1 <- contours[[4]] plot_polygon(leaf1)   #### default options # 10 harmonics (default) # without alignment  ef <- efourier(leaf1) efourier_coefs(ef) #>            an           bn          cn           dn #> 1  21.1298663 -382.7540180 -364.126202 -21.29189747 #> 2   1.6804167  151.6255507  -40.467153  10.80476561 #> 3   4.3779839   -0.9870311 -129.212508   3.20445130 #> 4  -3.1329537  -46.3028113  -26.380285  -4.12257511 #> 5  -1.6548827    3.6997248   19.343685  -3.32106033 #> 6   4.9296483   39.2656639  -15.461424   0.48631684 #> 7   1.2043295    0.5415148  -15.556049   0.96104147 #> 8   0.5959547  -13.0422412  -18.885184   1.42268431 #> 9  -0.8187422    3.9795071   -4.368973   0.04457129 #> 10 -0.3849895   -5.7461417   -2.553430  -1.11528942  # object is aligned along the major caliper with `poly_align()` # object is centered on the origin with `poly_center()` # using a list of object coordinates ef2 <- efourier(contours, align = TRUE, center = TRUE) efourier_coefs(ef2) #>   object          A1          A2          A3          A4          A5 #> 1      1   -3.454896   1.4236717   2.0106840   0.1466309   0.5199967 #> 2      2   -6.334470  -0.2967615  -0.7702261   0.2801859  -0.6714594 #> 3      3  218.575292  34.2419339  -4.9119088 -13.7802222  -1.0202461 #> 4      4  364.641136  40.4763360 129.1371411  26.0505297 -19.3876516 #> 5      5  239.132916  33.0146334  85.7776812  18.8680604 -15.1400194 #> 6      6 -264.070968 -29.1909758 -93.4285366 -18.2405782  13.7512553 #>            A6           A7          A8         A9         A10          B1 #> 1  -0.4408357   0.44137596  -0.6056412  0.9417381 -0.26564910 -148.824787 #> 2   0.4311535  -0.22620126  -0.6846717  0.2515723 -0.05888466  200.920820 #> 3   3.6849989  -0.00647676   0.4886815  0.4219516 -0.18070193   59.582410 #> 4  15.8259341  15.59258473  18.8435168  4.2933668  2.52397439    9.673004 #> 5  10.9262111  10.55175506   9.7457787  3.5449760  1.87498734  -10.324537 #> 6 -12.2561200 -11.02228148 -13.1404595 -2.9138170 -1.71374125  -13.650309 #>              B2          B3          B4         B5         B6         B7 #> 1  28.029518485  -0.2127443 -11.4786529 -10.949379 -5.4915306  2.6883177 #> 2 -15.123601609   8.3273886   5.4390320  -1.302683  5.5558649 -2.5143876 #> 3 -22.772838905 -13.8616981   2.9352695   6.443341  2.1943531 -0.5649768 #> 4  -1.145858707   3.8285493  -0.2855784  -3.743367 -2.4951148  1.0716896 #> 5  10.225308487  -8.0119622   0.8561190   6.073920 -4.2025875  0.4377322 #> 6   0.005283962  -7.8696590  -1.2793494   4.173352  0.8257853 -2.1945136 #>          B8         B9        B10          C1        C2          C3        C4 #> 1  5.893369  3.9981753  1.5697637 -406.469731  7.290806 -41.0790328 -7.697306 #> 2  2.571339 -0.3229630  1.7582312  539.528656  5.957966  50.0543857  3.715272 #> 3 -2.360508  0.6635131  0.2141676  160.384260 -9.311378 -38.8115119  5.651363 #> 4  2.669661 -0.2159548 -0.6196221    8.382921  1.100087   5.8929473  5.483243 #> 5 -2.550309  1.9803590 -2.4258117  -17.439016 11.098566   0.2180498 -4.348582 #> 6 -3.833611 -0.3067454  0.2984537  -12.638361  2.597616  -4.8345028 -6.457647 #>             C5         C6          C7         C8         C9        C10 #> 1 -18.11801594  0.2606615 -5.68731105  2.1891199 -3.4289571 -0.2464125 #> 2  17.17030986  1.0820960  9.79104866 -0.4928921  6.6569005 -0.7439777 #> 3  14.68641558 -5.3380193 -5.53831281  5.6818998  1.7865148 -4.2605136 #> 4   0.09001916 -4.0242602  0.02777567  1.0524829  1.1115069  0.6698001 #> 5  -2.35767498  5.6158684 -1.45450075 -3.4880139  1.3938644 -2.1658376 #> 6   0.63438360  5.8021373 -0.09256805 -2.0875489 -0.3663413 -1.3115065 #>            D1          D2          D3         D4         D5          D6 #> 1    3.298372   -2.314733 -0.09430072  -0.678610  0.9444166   0.3421264 #> 2   -2.865168   -5.135947 -4.91431850  -1.764671 -1.1627028  -1.4357995 #> 3 -572.881478    4.205287 32.96616840  -8.724172 -3.8271289   4.5248076 #> 4 -383.224931  152.008578 -0.70426128 -46.453237  3.4252380  39.1472283 #> 5 -271.189230  102.128067 -3.77118279 -35.849002  2.5042633  21.9498152 #> 6  276.773140 -110.341939  0.83957168  33.434955 -3.3904501 -27.5795990 #>            D7         D8         D9        D10 #> 1  0.47040544  -0.386826  0.6443593 -0.3005889 #> 2 -0.96461765  -1.135715 -0.8628120 -0.9279190 #> 3 -1.37287058  -1.047192  1.9778502 -1.2315894 #> 4  0.61638325 -12.876975  3.9851780 -5.8075146 #> 5  0.57504583  -7.039522  1.0449584 -3.3843351 #> 6  0.01447241   8.793250 -3.0186753  4.3101466  # reconstruct the perimeter of the object # Use only the first one for simplicity plot_polygon(contours[[1]] |> poly_align() |> poly_center())  efourier_inv(ef2[[1]]) |> plot_contour(col = \"red\", lwd = 4)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Fourier coefficients — efourier_coefs","title":"Get Fourier coefficients — efourier_coefs","text":"Extracts Fourier coefficients objects computed efourier() efourier_norm() returning 'ready--analyze' data frame.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Fourier coefficients — efourier_coefs","text":"","code":"efourier_coefs(x)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Fourier coefficients — efourier_coefs","text":"x object computed efourier() efourier_norm().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Fourier coefficients — efourier_coefs","text":"data.frame object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Fourier coefficients — efourier_coefs","text":"","code":"library(pliman)  # a list of objects efourier(contours) |> efourier_coefs() #>   object         A1         A2         A3         A4         A5         A6 #> 1      1  -26.81446  -1.020677  -5.101594 -0.6044017  -1.737430  0.5477908 #> 2      2 -446.11163  -5.077747 -41.457959 -2.8494414 -14.470822 -0.5854536 #> 3      3 -153.34051  10.219867  38.480398 -5.9588528 -14.671502  5.3867878 #> 4      4   21.12987   1.680417   4.377984 -3.1329537  -1.654883  4.9296483 #> 5      5   24.17204 -10.674299   2.016357  5.1368729   1.941578 -5.6116916 #> 6      6  185.70771  22.900274  65.355121  9.1963003  -9.718945 12.7074908 #>           A7          A8         A9        A10        B1         B2         B3 #> 1 -0.9186428  0.64203755 -1.2924775  0.2035948 -148.7221  28.119190 -0.2461177 #> 2 -8.1727080  0.05443768 -5.3078616  0.6146517 -118.1324   4.406516 -9.0589414 #> 3  5.5530146 -5.65155391 -1.8064063  4.2759473 -574.5693   4.859407 33.5419810 #> 4  1.2043295  0.59595465 -0.8187422 -0.3849895 -382.7540 151.625551 -0.9870311 #> 5  1.7175588  3.85557662 -1.3206717  2.2832033 -270.7823 101.786207 -3.5506182 #> 6  8.0520457  8.36941459  1.8579864  0.4215073 -197.5489  75.003155 -5.9601824 #>           B4          B5        B6         B7         B8         B9       B10 #> 1 -11.401916 -11.0137336 -5.493582  2.6283813   5.920910  3.9081015  1.594003 #> 2  -4.581074  -0.3650273 -4.361229  0.5225924  -2.400882 -0.6261401 -1.753473 #> 3  -8.844474  -4.1349826  4.522949 -1.2860416  -1.065522  1.9296365 -1.158945 #> 4 -46.302811   3.6997248 39.265664  0.5415148 -13.042241  3.9795071 -5.746142 #> 5 -35.816977   2.3674823 21.981432  0.5890628  -6.907170  0.9685829 -3.273101 #> 6 -23.565309   5.2700281 19.481690 -1.5097008  -8.652852  1.8574676 -2.699077 #>          C1         C2         C3         C4          C5          C6 #> 1 -405.5923   7.376273  -40.80992  -7.680440 -18.0240037   0.2254621 #> 2 -303.4839  -3.095435  -27.99859  -2.382727  -9.2424147  -1.0202905 #> 3 -222.9291 -33.893442    6.03481  13.601618   0.5631769  -3.5639251 #> 4 -364.1262 -40.467153 -129.21251 -26.380285  19.3436849 -15.4614244 #> 5 -238.5666 -33.343917  -85.70162 -18.748409  15.1300285 -11.0203562 #> 6 -188.1656 -18.230309  -67.00263 -16.936475   9.8040583  -4.2937119 #>            C7          C8        C9        C10          D1          D2 #> 1  -5.6241993   2.1379721 -3.324373 -0.2705189    6.847621   0.2335718 #> 2  -5.3699042   0.8183129 -3.995362  0.4537936  162.589617 -15.3591697 #> 3   0.1645273  -0.6077500 -0.482035  0.2929498   43.599766 -22.7744048 #> 4 -15.5560493 -18.8851841 -4.368973 -2.5534298  -21.291897  10.8047656 #> 5 -10.5162891  -9.6050074 -3.617288 -1.7649747  -17.818338  12.7143164 #> 6  -7.5704581 -10.3911201 -2.289949 -2.0593015 -194.328820  80.9442040 #>            D3          D4         D5          D6         D7         D8 #> 1  -0.2185792   1.4600886 -0.3577973  0.07669717 -0.7776518 -0.0128856 #> 2   3.8448490   3.4345218 -1.8327855  3.72584352 -2.6956081  1.4753024 #> 3 -12.9286806   2.7969155  6.3424795  2.27741660 -0.5999832 -2.3972162 #> 4   3.2044513  -4.1225751 -3.3210603  0.48631684  0.9610415  1.4226843 #> 5  -8.6505475  -0.2271619  6.2968401 -3.77538268  0.2967408 -2.8939163 #> 6   4.3280779 -23.8162331 -0.2466535 19.64028886  1.3743670 -4.0190823 #>            D9        D10 #> 1 -1.02470042  0.1741323 #> 2 -0.83546430  0.9224907 #> 3  0.70912680  0.1860412 #> 4  0.04457129 -1.1152894 #> 5  1.93813705 -2.5501708 #> 6  2.38429526 -3.4088104  # one object, normalized coefficients efourier(contours[[4]]) |>   efourier_norm() |>   efourier_coefs() #>              an            bn            cn            dn #> 1   1.000000000  1.853479e-17  9.267394e-18 -0.9514067664 #> 2  -0.019954383 -3.957299e-01  1.047938e-01 -0.0202869737 #> 3  -0.002321877 -2.216469e-04  3.269770e-02  0.3357663692 #> 4  -0.021985444 -1.195120e-01 -6.884594e-02 -0.0001935063 #> 5  -0.009614050 -1.523015e-03  1.496870e-02  0.0491334898 #> 6  -0.026121940 -9.969463e-02  4.060766e-02 -0.0037886893 #> 7   0.001169439 -2.036878e-03  9.228959e-03  0.0396746712 #> 8  -0.006527314 -3.324696e-02 -4.745917e-02  0.0141460581 #> 9  -0.010675203 -2.227608e-04 -2.210092e-03 -0.0111050934 #> 10  0.004773081  1.435275e-02  7.009215e-03  0.0007721095"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Erros between the original and reconstructed outline — efourier_error","title":"Erros between the original and reconstructed outline — efourier_error","text":"Computes sum squared distances original data reconstructed outline. allows examining reconstructed outlines addition successive contributing harmonics indicated argument nharm.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erros between the original and reconstructed outline — efourier_error","text":"","code":"efourier_error(   x,   nharm = NULL,   type = c(\"error\", \"outline\", \"deviations\"),   plot = TRUE,   ncol = NULL,   nrow = NULL )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Erros between the original and reconstructed outline — efourier_error","text":"x object computed efourier(). nharm integer vector integers indicating number harmonics use. specified number harmonics used x used. type type plot produce. default, line plot sum squared distances (y-axis) number harmonics (x-axis) produced. type = \"outline\" used, plot original polygon constructed outline produced. type = \"deviations\" used, plot deviations original outline reconstructed outline (y-axis) points along outline (x-axis) produced. plot logical inform plot produced. Defaults TRUE. ncol, nrow number rows columns plot grid. Defaults NULL, .e., square grid produced.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Erros between the original and reconstructed outline — efourier_error","text":"list objects: dev_points list deviations (distances) original predicted outline pixel outline. data.frame object minimum, maximum average deviations (based outline points). x object class efourier_lst, list returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Erros between the original and reconstructed outline — efourier_error","text":"","code":"library(pliman) ef <-   contours[[1]] |>   efourier(nharm = 30)  efourier_error(ef)   efourier_error(ef,                nharm = 30,                type = \"outline\")   efourier_error(ef,                nharm = c(1, 4, 20),                type = \"deviations\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Elliptical Fourier Analysis — efourier_inv","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"Performs inverse elliptical Fourier transformation construct shape, given list Fourier coefficients computed efourier().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"","code":"efourier_inv(x, nharm = NULL, a0 = NULL, c0 = NULL, npoints = 500)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"x object class efourier efourier_lst computed efourier(). nharm integer indicating number harmonics use. specified number harmonics used x used. a0, c0 estimates coordinates centroid configuration. NULL (default), generated coordinates centered position original shape given efourier(). npoints number interpolated points constructed outline. Defaults 500.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"Adapted Claude (2008). pp. 223.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_inv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Elliptical Fourier Analysis — efourier_inv","text":"","code":"library(pliman) plot_polygon(contours, aspect_ratio = 1) # without alignment ef <- efourier(contours, nharm = 10, align = FALSE) ief <- efourier_inv(ef) plot_contour(ief, col = \"red\", lwd = 2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Fourier coefficients — efourier_norm","title":"Normalized Fourier coefficients — efourier_norm","text":"first harmonic defines ellipse best fits outlines. One can use parameters first harmonic “normalize” data can invariant size, rotation, starting position outline trace. approach referred literature normalized elliptic Fourier. efourier_norm() calculates new set Fourier coefficients , Bn, Cn, Dn one can use multivariate analyses (Claude, 2008).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Fourier coefficients — efourier_norm","text":"","code":"efourier_norm(x, start = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Fourier coefficients — efourier_norm","text":"x object computed efourier(). start Logical value telling whether position starting point preserved .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Fourier coefficients — efourier_norm","text":"list following components: , B, C, D harmonic coefficients. size magnitude semi-major axis first fitting ellipse. theta angle, radians, starting semi-major axis first fitting ellipse. psi orientation first fitting ellipse a0 c0, harmonic coefficients. lnef concatenation coefficients. nharm number harmonics used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalized Fourier coefficients — efourier_norm","text":"Adapted Claude (2008). pp. 226.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalized Fourier coefficients — efourier_norm","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized Fourier coefficients — efourier_norm","text":"","code":"library(pliman) leaf1 <- contours[[4]] plot_polygon(leaf1)   # compute the Fourier coefficients ef <- efourier(leaf1) efourier_coefs(ef) #>            an           bn          cn           dn #> 1  21.1298663 -382.7540180 -364.126202 -21.29189747 #> 2   1.6804167  151.6255507  -40.467153  10.80476561 #> 3   4.3779839   -0.9870311 -129.212508   3.20445130 #> 4  -3.1329537  -46.3028113  -26.380285  -4.12257511 #> 5  -1.6548827    3.6997248   19.343685  -3.32106033 #> 6   4.9296483   39.2656639  -15.461424   0.48631684 #> 7   1.2043295    0.5415148  -15.556049   0.96104147 #> 8   0.5959547  -13.0422412  -18.885184   1.42268431 #> 9  -0.8187422    3.9795071   -4.368973   0.04457129 #> 10 -0.3849895   -5.7461417   -2.553430  -1.11528942  # Normalized Fourier coefficients  efn <- efourier_norm(ef) efourier_coefs(efn) #>              an            bn            cn            dn #> 1   1.000000000  1.853479e-17  9.267394e-18 -0.9514067664 #> 2  -0.019954383 -3.957299e-01  1.047938e-01 -0.0202869737 #> 3  -0.002321877 -2.216469e-04  3.269770e-02  0.3357663692 #> 4  -0.021985444 -1.195120e-01 -6.884594e-02 -0.0001935063 #> 5  -0.009614050 -1.523015e-03  1.496870e-02  0.0491334898 #> 6  -0.026121940 -9.969463e-02  4.060766e-02 -0.0037886893 #> 7   0.001169439 -2.036878e-03  9.228959e-03  0.0396746712 #> 8  -0.006527314 -3.324696e-02 -4.745917e-02  0.0141460581 #> 9  -0.010675203 -2.227608e-04 -2.210092e-03 -0.0111050934 #> 10  0.004773081  1.435275e-02  7.009215e-03  0.0007721095"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Power in Fourier Analysis — efourier_power","title":"Power in Fourier Analysis — efourier_power","text":"Computes spectrum harmonic Fourier power. power proportional harmonic amplitude can considered measure shape information. rank harmonic increases, power decreases adds less less information. can evaluate number harmonics must select, cumulative power gathers 99% total cumulative power (Claude, 2008).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power in Fourier Analysis — efourier_power","text":"","code":"efourier_power(   x,   first = TRUE,   thresh = c(0.8, 0.85, 0.9, 0.95, 0.99, 0.999),   plot = TRUE,   ncol = NULL,   nrow = NULL )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power in Fourier Analysis — efourier_power","text":"x object class efouriercomputed efourier(). first Logical argument indicating whether include first harmonic computing power. See Details. thresh numeric vector indicating threshold power. number harmonics needed thresholds computed. plot Logical argument indicating whether produce plot. ncol, nrow number rows columns plot grid. Defaults NULL, .e., square grid produced.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power in Fourier Analysis — efourier_power","text":"list objects: cum_power, data.frame object accumulated power depending number harmonics","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power in Fourier Analysis — efourier_power","text":"shape \"information\" contained first harmonic. surprising harmonic best fits outline, size ellipses decreases explaining successive residual variation. However, one may think first ellipse contain relevant shape information, especially differences one wants investigate concern complex outlines. using first = FALSE possible remove first harmonic computation. working set outlines, high-rank-harmonics can contain information may allow groups distinguished (Claude, 2008). Adapted Claude (2008). pp. 229.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power in Fourier Analysis — efourier_power","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power in Fourier Analysis — efourier_power","text":"","code":"library(pliman) pw <- efourier(contours) |> efourier_power()"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw shapes based on Fourier coefficients — efourier_shape","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"Calculates 'Fourier elliptical shape' given Fourier coefficients","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"","code":"efourier_shape(   an = NULL,   bn = NULL,   cn = NULL,   dn = NULL,   n = 1,   nharm = NULL,   npoints = 150,   alpha = 4,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"\\(a_n\\) Fourier coefficients calculate shape. bn \\(b_n\\) Fourier coefficients calculate shape. cn \\(c_n\\) Fourier coefficients calculate shape. dn \\(d_n\\) Fourier coefficients calculate shape. n number shapes generate. Defaults 1. one shape used, list coordinates returned. nharm number harmonics use. must less equal length *_n coefficients. npoints number points calculate. alpha power coefficient associated (usually decreasing) amplitude Fourier coefficients. plot Logical indicating Whether plot shape. Defaults ´TRUE`","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"list components: x vector x-coordrdinates y vector y-coordrdinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"efourier_shape can used specifying nharm alpha. coefficients sampled uniform distribution \\((-\\pi ; \\pi)\\) amplitude divided \\(harmonicrank ^ alpha\\). alpha lower 1, consecutive coefficients thus increase. See Claude (2008) pp.223 maths behind inverse ellipitical Fourier Adapted Claude (2008). pp. 223.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/efourier_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw shapes based on Fourier coefficients — efourier_shape","text":"","code":"library(pliman) # approximation of the third leaf's perimeter # 4 harmonics image_pliman(\"potato_leaves.jpg\", plot = TRUE)  #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 1013 379 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    1    1    1 #> [2,]    1    1    1    1    1    1 #> [3,]    1    1    1    1    1    1 #> [4,]    1    1    1    1    1    1 #> [5,]    1    1    1    1    1    1  efourier_shape(an = c(-7.34,  1.81,  -1.32, 0.50),                bn = c(-113.88, 21.90, -0.31, -6.14),                cn = c(-147.51, -20.89, 0.66, -14.06),                dn = c(-0.48, 2.36, -4.36, 3.03))  #>                   x           y #>   [1,]    0.8688009 -178.161400 #>   [2,]   -3.1267700 -177.630817 #>   [3,]   -7.0904777 -176.324599 #>   [4,]  -10.9980633 -174.267723 #>   [5,]  -14.8266031 -171.496357 #>   [6,]  -18.5551958 -168.056856 #>   [7,]  -22.1655915 -164.004498 #>   [8,]  -25.6427436 -159.402017 #>   [9,]  -28.9752658 -154.317955 #>  [10,]  -32.1557816 -148.824898 #>  [11,]  -35.1811522 -142.997624 #>  [12,]  -38.0525784 -136.911237 #>  [13,]  -40.7755699 -130.639320 #>  [14,]  -43.3597821 -124.252172 #>  [15,]  -45.8187240 -117.815169 #>  [16,]  -48.1693449 -111.387295 #>  [17,]  -50.4315088 -105.019885 #>  [18,]  -52.6273720  -98.755611 #>  [19,]  -54.7806799  -92.627741 #>  [20,]  -56.9160015  -86.659678 #>  [21,]  -59.0579245  -80.864806 #>  [22,]  -61.2302309  -75.246634 #>  [23,]  -63.4550782  -69.799227 #>  [24,]  -65.7522075  -64.507921 #>  [25,]  -68.1382025  -59.350289 #>  [26,]  -70.6258197  -54.297329 #>  [27,]  -73.2234093  -49.314842 #>  [28,]  -75.9344445  -44.364948 #>  [29,]  -78.7571724  -39.407710 #>  [30,]  -81.6843986  -34.402798 #>  [31,]  -84.7034122  -29.311154 #>  [32,]  -87.7960553  -24.096611 #>  [33,]  -90.9389357  -18.727408 #>  [34,]  -94.1037812  -13.177564 #>  [35,]  -97.2579239   -7.428056 #>  [36,] -100.3649069   -1.467795 #>  [37,] -103.3851952    4.705671 #>  [38,] -106.2769760   11.085713 #>  [39,] -108.9970258   17.656463 #>  [40,] -111.5016245   24.392961 #>  [41,] -113.7474919   31.261575 #>  [42,] -115.6927233   38.220710 #>  [43,] -117.2977001   45.221771 #>  [44,] -118.5259525   52.210358 #>  [45,] -119.3449524   59.127659 #>  [46,] -119.7268157   65.911999 #>  [47,] -119.6488973   72.500498 #>  [48,] -119.0942636   78.830803 #>  [49,] -118.0520315   84.842827 #>  [50,] -116.5175645   90.480451 #>  [51,] -114.4925244   95.693145 #>  [52,] -111.9847755  100.437450 #>  [53,] -109.0081481  104.678283 #>  [54,] -105.5820652  108.390025 #>  [55,] -101.7310475  111.557355 #>  [56,]  -97.4841066  114.175809 #>  [57,]  -92.8740478  116.252041 #>  [58,]  -87.9366983  117.803778 #>  [59,]  -82.7100851  118.859463 #>  [60,]  -77.2335821  119.457606 #>  [61,]  -71.5470528  119.645836 #>  [62,]  -65.6900084  119.479700 #>  [63,]  -59.7008062  119.021230 #>  [64,]  -53.6159078  118.337313 #>  [65,]  -47.4692172  117.497917 #>  [66,]  -41.2915145  116.574208 #>  [67,]  -35.1100005  115.636628 #>  [68,]  -28.9479618  114.752964 #>  [69,]  -22.8245644  113.986483 #>  [70,]  -16.7547775  113.394163 #>  [71,]  -10.7494307  113.025092 #>  [72,]   -4.8153961  112.919062 #>  [73,]    1.0441085  113.105408 #>  [74,]    6.8291083  113.602114 #>  [75,]   12.5423666  114.415230 #>  [76,]   18.1888009  115.538600 #>  [77,]   23.7748414  116.953915 #>  [78,]   29.3077503  118.631101 #>  [79,]   34.7949249  120.529018 #>  [80,]   40.2432053  122.596459 #>  [81,]   45.6582094  124.773429 #>  [82,]   51.0437144  126.992660 #>  [83,]   56.4011063  129.181328 #>  [84,]   61.7289128  131.262922 #>  [85,]   67.0224354  133.159224 #>  [86,]   72.2734929  134.792334 #>  [87,]   77.4702834  136.086698 #>  [88,]   82.5973725  136.971070 #>  [89,]   87.6358065  137.380374 #>  [90,]   92.5633505  137.257399 #>  [91,]   97.3548438  136.554288 #>  [92,]  101.9826650  135.233781 #>  [93,]  106.4172927  133.270185 #>  [94,]  110.6279473  130.650024 #>  [95,]  114.5832959  127.372384 #>  [96,]  118.2522003  123.448914 #>  [97,]  121.6044871  118.903501 #>  [98,]  124.6117182  113.771624 #>  [99,]  127.2479397  108.099404 #> [100,]  129.4903869  101.942384 #> [101,]  131.3201263   95.364055 #> [102,]  132.7226143   88.434196 #> [103,]  133.6881577   81.227046 #> [104,]  134.2122607   73.819385 #> [105,]  134.2958481   66.288551 #> [106,]  133.9453577   58.710469 #> [107,]  133.1726975   51.157739 #> [108,]  131.9950684   43.697825 #> [109,]  130.4346547   36.391419 #> [110,]  128.5181914   29.290997 #> [111,]  126.2764179   22.439623 #> [112,]  123.7434325   15.870034 #> [113,]  120.9559637    9.604025 #> [114,]  117.9525784    3.652144 #> [115,]  114.7728469   -1.986280 #> [116,]  111.4564869   -7.322786 #> [117,]  108.0425089  -12.379124 #> [118,]  104.5683859  -17.186300 #> [119,]  101.0692687  -21.783355 #> [120,]   97.5772688  -26.215919 #> [121,]   94.1208250  -30.534571 #> [122,]   90.7241734  -34.793054 #> [123,]   87.4069317  -39.046408 #> [124,]   84.1838098  -43.349052 #> [125,]   81.0644531  -47.752887 #> [126,]   78.0534216  -52.305471 #> [127,]   75.1503049  -57.048302 #> [128,]   72.3499679  -62.015284 #> [129,]   69.6429210  -67.231396 #> [130,]   67.0158014  -72.711610 #> [131,]   64.4519533  -78.460098 #> [132,]   61.9320883  -84.469732 #> [133,]   59.4350086  -90.721906 #> [134,]   56.9383703  -97.186686 #> [135,]   54.4194665 -103.823273 #> [136,]   51.8560067 -110.580774 #> [137,]   49.2268718 -117.399267 #> [138,]   46.5128217 -124.211118 #> [139,]   43.6971365 -130.942523 #> [140,]   40.7661740 -137.515229 #> [141,]   37.7098262 -143.848391 #> [142,]   34.5218643 -149.860511 #> [143,]   31.2001611 -155.471409 #> [144,]   27.7467864 -160.604170 #> [145,]   24.1679724 -165.187010 #> [146,]   20.4739512 -169.155028 #> [147,]   16.6786695 -172.451774 #> [148,]   12.7993892 -175.030600 #> [149,]    8.8561869 -176.855773 #> [150,]    4.8713661 -177.903289"},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence ellipse — ellipse","title":"Confidence ellipse — ellipse","text":"Produces confidence ellipse iso-contour Gaussian distribution, allowing visualize 2D confidence interval.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence ellipse — ellipse","text":"","code":"ellipse(   x,   conf = 0.95,   np = 100,   plot = TRUE,   fill = \"green\",   alpha = 0.3,   random_fill = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence ellipse — ellipse","text":"x matrix, data.frame list perimeter coordinates, often produced object_contour(). conf confidence level. Defaults 0.95 np Number sampled points ellipse. plot Create plot? Defaults TRUE. fill color fill ellipse. Defaults \"green\". alpha alpha value define opacity ellipse. Defaults 0.3 random_fill Fill multiple ellipses random colors? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence ellipse — ellipse","text":"matrix coordinates points sampled ellipse.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Confidence ellipse — ellipse","text":"Borrowed Claude (2008), pp. 85","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence ellipse — ellipse","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence ellipse — ellipse","text":"","code":"library(pliman) ellipse(contours)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/get_pliman_viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of the pliman_viewer option — get_pliman_viewer","title":"Get the value of the pliman_viewer option — get_pliman_viewer","text":"Retrieves current value pliman_viewer option used package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/get_pliman_viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of the pliman_viewer option — get_pliman_viewer","text":"","code":"get_pliman_viewer()"},{"path":"https://tiagoolivoto.github.io/pliman/reference/get_pliman_viewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of the pliman_viewer option — get_pliman_viewer","text":"current value pliman_viewer option.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ggplot_color.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2-like colors generation — ggplot_color","title":"ggplot2-like colors generation — ggplot_color","text":"Generate ggplot2","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ggplot_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2-like colors generation — ggplot_color","text":"","code":"ggplot_color(n = 1)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/ggplot_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2-like colors generation — ggplot_color","text":"n number colors. works well eight colours, becomes hard tell different colours apart.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/ggplot_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2-like colors generation — ggplot_color","text":"","code":"library(pliman) ggplot_color(n = 3) #> [1] \"#F8766D\" \"#00BA38\" \"#619CFF\""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Aligns an Image object by hand — image_align","title":"Aligns an Image object by hand — image_align","text":"image_rotate() rotate image given line desired aligment along y axis corresponds alignment objects (e.g., field plots). default, aligment vertical, means drawed line angle < 90º parallel x axis, rotation angle wil negative (anticlocwise rotation).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aligns an Image object by hand — image_align","text":"","code":"image_align(   img,   align = c(\"vertical\", \"horizontal\"),   viewer = get_pliman_viewer(),   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aligns an Image object by hand — image_align","text":"img Image object align desired alignment. Either \"vertical\" (default) \"horizontal\". viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. plot Plots aligned image? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aligns an Image object by hand — image_align","text":"img aligned","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aligns an Image object by hand — image_align","text":"image_align function aligns image along vertical horizontal axis based user-selected points. alignment can performed either base plotting system using mapview package interactive visualization. viewer option set \"base\", function prompts user select two points image define alignment line. viewer option set \"mapview\", function opens interactive map user can draw polyline define alignment line. alignment angle calculated based selected points, image rotated accordingly using image_rotate function. function returns aligned image object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aligns an Image object by hand — image_align","text":"","code":"if(interactive()){ library(pliman) flax <- image_pliman(\"flax_leaves.jpg\", plot = TRUE) aligned <- image_align(flax) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a binary image — image_binary","title":"Creates a binary image — image_binary","text":"Reduce color, color near-infrared, grayscale images binary image using given color channel (red, green blue) even color indexes. Otsu's thresholding method (Otsu, 1979) used automatically perform clustering-based image thresholding.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a binary image — image_binary","text":"","code":"image_binary(   img,   index = NULL,   threshold = c(\"Otsu\", \"adaptive\"),   k = 0.1,   windowsize = NULL,   has_white_bg = FALSE,   resize = FALSE,   fill_hull = FALSE,   filter = FALSE,   re = NULL,   nir = NULL,   invert = FALSE,   plot = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a binary image — image_binary","text":"img image object. index character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes() image_index() details. threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. k numeric range 0-1. k high, local threshold values tend lower. k low, local threshold value tend higher. windowsize windowsize controls number local neighborhood adaptive thresholding. default set 1/3 * minxy, minxy minimum dimension image (pixels). has_white_bg Logical indicating whether white background present. TRUE, pixels R, G, B values equals 1 considered NA. may useful compute image index objects , example, white background. cases, background considered threshold computation. resize Resize image processing? Defaults FALSE. Use numeric value percentage desired resizing. example, resize = 30, resized image 30% size original image. fill_hull Fill holes objects? Defaults FALSE. filter Performs median filtering binary image? (Defaults FALSE). Provide positive integer > 1 indicate size median filtering. Higher values efficient remove noise background can dramatically impact perimeter objects, mainly irregular perimeters leaves serrated edges. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. invert Inverts binary image, desired. plot Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a binary image — image_binary","text":"list containing binary images. length depend number indexes used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates a binary image — image_binary","text":"Otsu, N. 1979. Threshold selection method gray-level histograms. IEEE Trans Syst Man Cybern SMC-9(1): 62–66. doi:10.1109/tsmc.1979.4310076 Shafait, F., D. Keysers, T.M. Breuel. 2008. Efficient implementation local adaptive thresholding techniques using integral images. Document Recognition Retrieval XV. SPIE. p. 317–322 doi:10.1117/12.767755","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a binary image — image_binary","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a binary image — image_binary","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") image_binary(img, index = c(\"R, G\"))"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines images to a grid — image_combine","title":"Combines images to a grid — image_combine","text":"Combines several images grid","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines images to a grid — image_combine","text":"","code":"image_combine(   ...,   labels = NULL,   nrow = NULL,   ncol = NULL,   col = \"black\",   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines images to a grid — image_combine","text":"... comma-separated name image objects list containing image objects. labels character vector length number objects ... indicate plot labels. nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. col color plot labels. Defaults col = \"black\". verbose Shows name objects declared ... numeric sequence list names provided. Set FALSE supress text.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines images to a grid — image_combine","text":"grid images ...","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combines images to a grid — image_combine","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines images to a grid — image_combine","text":"","code":"library(pliman) img1 <- image_pliman(\"sev_leaf.jpg\") img2 <- image_pliman(\"sev_leaf_nb.jpg\") image_combine(img1, img2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Image object of a given color — image_create","title":"Create an Image object of a given color — image_create","text":"image_create() can used create Image object desired color size.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Image object of a given color — image_create","text":"","code":"image_create(color, width = 200, heigth = 200, plot = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Image object of a given color — image_create","text":"color either color name (listed grDevices::colors()), hexadecimal string form \"#rrggbb\". width, heigth width heigth image pixel units. plot Plots image creating ? Defaults FALSE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Image object of a given color — image_create","text":"object class Image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Image object of a given color — image_create","text":"","code":"image_create(\"red\") #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 200 200 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    1    1    1 #> [2,]    1    1    1    1    1    1 #> [3,]    1    1    1    1    1    1 #> [4,]    1    1    1    1    1    1 #> [5,]    1    1    1    1    1    1 image_create(\"#009E73\", width = 300, heigth = 100) #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 300 100 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0 #> [3,]    0    0    0    0    0    0 #> [4,]    0    0    0    0    0    0 #> [5,]    0    0    0    0    0    0"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expands an image — image_expand","title":"Expands an image — image_expand","text":"Expands image towards left, top, right, bottom sampling pixels image edge. Users can choose many pixels (rows columns) sampled many pixels expansion .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expands an image — image_expand","text":"","code":"image_expand(   img,   left = NULL,   top = NULL,   right = NULL,   bottom = NULL,   edge = NULL,   sample_left = 10,   sample_top = 10,   sample_right = 10,   sample_bottom = 10,   random = FALSE,   filter = NULL,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expands an image — image_expand","text":"img Image object. left, top, right, bottom number pixels expand left, top, right, bottom directions, respectively. edge number pixels expand directions. can used avoid calling arguments sample_left, sample_top, sample_right, sample_bottom number pixels sample side. Defaults 20. random Randomly sampling edge's pixels? Defaults FALSE. filter Apply median filter sampled pixels? Defaults FALSE. plot Plots extended image? defaults FALSE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expands an image — image_expand","text":"Image object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expands an image — image_expand","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") image_expand(img, left = 200)  image_expand(img, right = 150, bottom = 250, filter = 5)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Image indexes — image_index","title":"Image indexes — image_index","text":"image_index() Builds image indexes using Red, Green, Blue, Red-Edge, NIR bands. Generates raster density plot index values computed image_index().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image indexes — image_index","text":"","code":"image_index(   img,   index = NULL,   resize = FALSE,   re = NULL,   nir = NULL,   has_white_bg = FALSE,   plot = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   ... )  # S3 method for image_index plot(x, type = c(\"raster\", \"density\"), nrow = NULL, ncol = NULL, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image indexes — image_index","text":"img image object. index character value (vector characters) specifying target mode conversion binary image. Use pliman_indexes() details section see available indexes.  Defaults NULL ((normalized) Red, Green Blue).  One can also use \"RGB\" RGB , \"NRGB\" normalized RGB, \"\" indexes. User can also calculate index using bands names, e.g. index = \"R+B/G\". resize Resize image processing? Defaults resize = FALSE. Use resize = 50, resizes image 50% original size speed image processing. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. has_white_bg Logical indicating whether white background present. TRUE, pixels R, G, B values equals 1 considered NA. may useful compute image index objects , example, white background. cases, background considered threshold computation. plot Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. ... Additional arguments passed plot_index() customization. x object class image_index. type type plot. Use type = \"raster\" (default) produce raster plot showing intensity pixels image index type = \"density\" produce density plot pixels' intensity.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image indexes — image_index","text":"list containing Grayscale images. length depend number indexes used. NULL object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image indexes — image_index","text":"following indexes available pliman. RGB color space R red G green B blue NR normalized red R/(R+G+B). NG normalized green G/(R+G+B) NB normalized blue B/(R+G+B) GB green blue ratio G/B RB red blue ratio R/B GR green red ratio G/R BI brightness Index sqrt((R^2+G^2+B^2)/3) BIM brightness Index 2 sqrt((R*2+G*2+B*2)/3) SCI Soil Colour Index (R-G)/(R+G) GLI Green leaf index Vis Louhaichi et al. (2001) (2*G-R-B)/(2*G+R+B) HI Primary colours Hue Index    (2*R-G-B)/(G-B) NDGRI Normalized green red difference index (Tucker, 1979) (G-R)/(G+R) NDGBI Normalized green blue difference index (G-B)/(G+B) NDRBI Normalized red blue difference index (R-B)/(R+B)     R+G+B S     ((R+G+B)-3*B)/(R+G+B) L     R+G+B/3 VARI Visible Atmospherically Resistant Index (G-R)/(G+R-B) HUE Overall Hue Index atan(2*(B-G-R)/30.5*(G-R)) HUE2  atan(2*(R-G-R)/30.5*(G-B)) BGI   B/G GRAY\t0.299*R + 0.587*G + 0.114*B GRAY2 ((R^2.2+(1.5*G)^2.2+(0.6*B)^2.2)/(1+1.5^2.2+0.6^2.2))^1/2.2 GLAI (25*(G-R)/(G+R-B)+1.25) CI Coloration Index (R-B)/R SAT Overhall Saturation Index (max(R,G,B) - min(R,G,B)) / max(R,G,B) SHP Shape Index 2*(R-G-B)/(G-B) RI Redness Index R**2/(B*G**3) HSB color space DGCI Dark Green Color Index, based HSB color space 60\\*((G - B) / (max(R, G, B) - min(R, G, B))) CIE-Lab color space L*: relative luminance (0.2126 * R + 0.7152 * G + 0.0722 * B) *: 0.55*( (R - (0.2126 * R + 0.7152 * G + 0.0722 * B)) / (1.0 - 0.2126)) type = \"raster\" (default), function calls plot_index() create raster plot index present x. type = \"density\", loop used create density plot index. types plots can arranged grid controlled ncol nrow arguments.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image indexes — image_index","text":"Nobuyuki Otsu, \"threshold selection method gray-level histograms\". IEEE Trans. Sys., Man., Cyber. 9 (1): 62-66. 1979. doi:10.1109/TSMC.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image indexes — image_index","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image indexes — image_index","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") image_index(img, index = c(\"R, NR\"))   # Example for S3 method plot() library(pliman) img <- image_pliman(\"sev_leaf.jpg\") # compute the index ind <- image_index(img, index = c(\"R, G, B, NGRDI\"), plot = FALSE) plot(ind)   # density plot plot(ind, type = \"density\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_prepare_mv.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an image (align and crop) — image_prepare_mv","title":"Prepare an image (align and crop) — image_prepare_mv","text":"function aligns crops image using either base mapview visualization. useful prepare images analyzed analyze_objects_shp()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_prepare_mv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an image (align and crop) — image_prepare_mv","text":"","code":"image_prepare_mv(img, viewer = get_pliman_viewer())"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_prepare_mv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an image (align and crop) — image_prepare_mv","text":"img optional Image object viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_prepare_mv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an image (align and crop) — image_prepare_mv","text":"alighed/cropped image visualization analysis.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_prepare_mv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an image (align and crop) — image_prepare_mv","text":"","code":"# Example usage: if(interactive()){ img <- image_pliman(\"mult_leaves.jpg\") image_prepare_mv(img, viewer = \"mapview\") }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Image segmentation — image_segment","title":"Image segmentation — image_segment","text":"image_segment() reduces color, color near-infrared, grayscale images segmented image using given color channel (red, green blue) even color indexes (See image_index() details). Otsu's thresholding method (Otsu, 1979) used automatically perform clustering-based image thresholding. image_segment_iter() Provides iterative image segmentation, returning proportions segmented pixels.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image segmentation — image_segment","text":"","code":"image_segment(   img,   index = NULL,   threshold = c(\"Otsu\", \"adaptive\"),   k = 0.1,   windowsize = NULL,   col_background = NULL,   has_white_bg = FALSE,   fill_hull = FALSE,   filter = FALSE,   re = NULL,   nir = NULL,   invert = FALSE,   plot = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE )  image_segment_iter(   img,   nseg = 2,   index = NULL,   invert = NULL,   threshold = NULL,   k = 0.1,   windowsize = NULL,   has_white_bg = FALSE,   plot = TRUE,   verbose = TRUE,   nrow = NULL,   ncol = NULL,   parallel = FALSE,   workers = NULL,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image segmentation — image_segment","text":"img image object list image objects. index image_segment(), character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes().  See image_index() details. image_segment_iter() character vector characters length nseg. can either available index (described ) operation involving RGB values (e.g., \"B/R+G\"). threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. k numeric range 0-1. k high, local threshold values tend lower. k low, local threshold value tend higher. windowsize windowsize controls number local neighborhood adaptive thresholding. default set 1/3 * minxy, minxy minimum dimension image (pixels). col_background color segmented background. Defaults NULL (white background). has_white_bg Logical indicating whether white background present. TRUE, pixels R, G, B values equals 1 considered NA. may useful compute image index objects , example, white background. cases, background considered threshold computation. fill_hull Fill holes objects? Defaults FALSE. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. re Respective position red-edge band original image file. nir Respective position near-infrared band original image file. invert Inverts binary image, desired. image_segmentation_iter() use vector length nseg. plot Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. nseg number iterative segmentation steps performed. ... Additional arguments passed image_segment().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image segmentation — image_segment","text":"image_segment() returns list containing n objects n number indexes used. objects contains: image image RGB bands (layers) segmented object. mask mask logical values 0 1 segmented image. image_segment_iter() returns list (1) data frame proportion pixels segmented images (2) segmented images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image segmentation — image_segment","text":"Nobuyuki Otsu, \"threshold selection method gray-level histograms\". IEEE Trans. Sys., Man., Cyber. 9 (1): 62-66. 1979. doi:10.1109/TSMC.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image segmentation — image_segment","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image segmentation — image_segment","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\", plot = TRUE)  image_segment(img, index = c(\"R, G, B\"))   # adaptive thresholding"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Image segmentation using k-means clustering — image_segment_kmeans","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"Segments image objects using clustering k-means clustering algorithm","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"","code":"image_segment_kmeans(   img,   bands = 1:3,   nclasses = 2,   invert = FALSE,   filter = FALSE,   fill_hull = FALSE,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"img Image object. bands numeric integer/vector indicating RGB band used segmentation. Defaults 1:3, .e., RGB bands used. nclasses number desired classes image segmentation. invert Invert segmentation? Defaults FALSE. TRUE binary matrix inverted. filter Applies median filtering binary matrix? Defaults FALSE. Use numeric integer indicate size median filter. fill_hull Fill holes objects? Defaults FALSE. plot Plot segmented image?","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"list following values: image segmented image considering two classes (foreground background) clusters class pixel. example, ncluster = 3, clusters two-way matrix values ranging 1 3. masks list binary matrices showing segmentation.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"Hartigan, J. . Wong, M. . (1979). Algorithm 136: K-means clustering algorithm. Applied Statistics, 28, 100–108. doi:10.2307/2346830","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image segmentation using k-means clustering — image_segment_kmeans","text":"","code":"img <- image_pliman(\"la_leaves.jpg\", plot = TRUE)  seg <- image_segment_kmeans(img)  seg <- image_segment_kmeans(img, fill_hull = TRUE, invert = TRUE, filter = 10)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Image segmentation by hand — image_segment_manual","title":"Image segmentation by hand — image_segment_manual","text":"R code function allows user manually segment image based parameters provided. works interactive section.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image segmentation by hand — image_segment_manual","text":"","code":"image_segment_manual(   img,   shape = c(\"free\", \"circle\", \"rectangle\"),   type = c(\"select\", \"remove\"),   viewer = get_pliman_viewer(),   resize = TRUE,   edge = 5,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image segmentation by hand — image_segment_manual","text":"img Image object. shape type shape use. Defaults \"free\". possible values \"circle\" \"rectangle\". Partial matching allowed. type type segmentation. default (type = \"select\") objects selected. Use type = \"remove\" remove selected area image. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. resize default, segmented object resized fill original image size. Use resize = FALSE keep segmented object original scale. edge Number pixels add edge segmented object resize = TRUE. Defaults 5. plot Plot segmented object? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image segmentation by hand — image_segment_manual","text":"list segmented image mask used segmentation.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image segmentation by hand — image_segment_manual","text":"shape \"free\", allows user draw perimeter select/remove objects. shape \"circle\", allows user click center edge circle define desired area. shape \"rectangle\", allows user select two points define area.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image segmentation by hand — image_segment_manual","text":"","code":"if (interactive()) { img <- image_pliman(\"la_leaves.jpg\") seg <- image_segment_manual(img) plot(seg$mask)  }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment an Image object using a brush mask — image_segment_mask","title":"Segment an Image object using a brush mask — image_segment_mask","text":"combines make_mask() make_brush() segment Image object using brush desired size, shape, position.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment an Image object using a brush mask — image_segment_mask","text":"","code":"image_segment_mask(   img,   size,   shape = \"disc\",   rel_pos_x = 0.5,   rel_pos_y = 0.5,   type = c(\"binary\", \"shadow\"),   plot = TRUE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment an Image object using a brush mask — image_segment_mask","text":"img Image object size numeric containing size brush pixels. odd number; even numbers rounded next odd one. shape character vector indicating shape brush. Can \"box\", \"disc\", \"diamond\", \"Gaussian\" \"line\" Defaults \"disc\". rel_pos_x, rel_pos_y relative position include brush image. Defaults 0.5. means brush centered original image. Smaller values move brush toward left top, respectively. type Defines type mask. default, binary mask applied. results white pixels original image matches 0s pixels brush. type = \"shadow\" used, shadow mask produced plot Plots generated mask? Defaults TRUE. ... arguments passed EBImage::makeBrush().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment an Image object using a brush mask — image_segment_mask","text":"color Image object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_segment_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment an Image object using a brush mask — image_segment_mask","text":"","code":"img <- image_pliman(\"soybean_touch.jpg\") plot(img)  image_segment_mask(img, size = 601)  #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 825 648 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    1    1    1 #> [2,]    1    1    1    1    1    1 #> [3,]    1    1    1    1    1    1 #> [4,]    1    1    1    1    1    1 #> [5,]    1    1    1    1    1    1 image_segment_mask(img,                    size = 401,                    shape = \"diamond\",                    rel_pos_x = 0,                    rel_pos_y = 0,                    type = \"shadow\")  #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 825 648 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    1    1    1 #> [2,]    1    1    1    1    1    1 #> [3,]    1    1    1    1    1    1 #> [4,]    1    1    1    1    1    1 #> [5,]    1    1    1    1    1    1"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a shape file from an image — image_shp","title":"Construct a shape file from an image — image_shp","text":"Creates list object coordinates given desired number nrow columns. starts selecting 4 points corners objects interest plot space. , given nrow ncol, grid drawn objects' coordinates returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a shape file from an image — image_shp","text":"","code":"image_shp(   img,   nrow = 1,   ncol = 1,   buffer_x = 0,   buffer_y = 0,   interactive = FALSE,   viewer = get_pliman_viewer(),   col_line = \"red\",   size_line = 2,   col_text = \"red\",   size_text = 1,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a shape file from an image — image_shp","text":"img object class Image nrow number desired rows grid. Defaults 1. ncol number desired columns grid. Defaults 1. buffer_x, buffer_y Buffering factor width height, respectively, individual shape's side. value 0 0.5 0 means buffering 0.5 means complete buffering (default: 0). value 0.25 buffer shape 25% side. interactive FALSE (default) grid created automatically based image dimension number rows/columns. interactive = TRUE, users must draw points diagonal desired bounding box contain grid. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. col_line, col_text color line/text grid. Defaults \"red\". size_line, size_text size line/text grid. Defaults 2.5. plot Plots grid image? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a shape file from an image — image_shp","text":"list row * col objects containing plot coordinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a shape file from an image — image_shp","text":"","code":"library(pliman) flax <- image_pliman(\"flax_leaves.jpg\") shape <- image_shp(flax, nrow = 3, ncol = 5)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_square.html","id":null,"dir":"Reference","previous_headings":"","what":"Squares an image — image_square","title":"Squares an image — image_square","text":"Converts rectangular image square image expanding rows/columns using image_expand().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_square.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squares an image — image_square","text":"","code":"image_square(img, plot = TRUE, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_square.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squares an image — image_square","text":"img Image object. plot Plots extended image? defaults FALSE. ... arguments passed image_expand().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_square.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squares an image — image_square","text":"modified Image object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_square.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squares an image — image_square","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") dim(img) #> [1] 825 648   3 square <- image_square(img)  dim(square) #> [1] 825 825   3"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"function performs Guo-Hall thinning algorithm (Guo Hall, 1989) binary image list binary images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"","code":"image_thinning_guo_hall(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"img binary image list binary images thinned. can either single binary image class 'Image' list binary images. parallel Logical, whether perform thinning using multiple cores (parallel processing). TRUE, function use multiple cores processing available. Default FALSE. workers Integer, number workers (cores) use parallel processing. NULL (default), use 40% available cores. verbose Logical, whether display progress messages parallel processing. Default TRUE. plot Logical, whether plot thinned images. Default FALSE. ... Additional arguments passed image_binary() img binary image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"img single binary image, function returns thinned binary image. img list binary images, function returns list containing thinned binary images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"Guo, Z., R.W. Hall. 1989. Parallel thinning two-subiteration algorithms. Commun. ACM 32(3): 359–373. doi:10.1145/62065.62074","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_thinning_guo_hall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Guo-Hall thinning on a binary image or list of binary images — image_thinning_guo_hall","text":"","code":"library(pliman) img <- image_pliman(\"potato_leaves.jpg\", plot = TRUE)  image_thinning_guo_hall(img, index = \"R\", plot = TRUE)  #> Image  #>   colorMode    : Grayscale  #>   storage.mode : integer  #>   dim          : 1013 379  #>   frames.total : 1  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0 #> [3,]    0    0    0    0    0    0 #> [4,]    0    0    0    0    0    0 #> [5,]    0    0    0    0    0    0"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an image to a data.frame — image_to_mat","title":"Convert an image to a data.frame — image_to_mat","text":"Given object image, converts data frame row corresponds intensity values pixel image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an image to a data.frame — image_to_mat","text":"","code":"image_to_mat(img, parallel = FALSE, workers = NULL, verbose = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an image to a data.frame — image_to_mat","text":"img image object. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an image to a data.frame — image_to_mat","text":"list containing three matrices (R, G, B), data frame containing four columns: name image image R, G, B values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an image to a data.frame — image_to_mat","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_to_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an image to a data.frame — image_to_mat","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf.jpg\") dim(img) #> [1] 490 557   3 mat <- image_to_mat(img) dim(mat[[1]]) #> NULL"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an interactive map view of an image — image_view","title":"Create an interactive map view of an image — image_view","text":"function allows users interactively edit analyze image using mapview mapedit packages.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an interactive map view of an image — image_view","text":"","code":"image_view(   img,   title = \"Edit the image\",   show = c(\"rgb\", \"index\"),   index = \"B\",   max_pixels = 2500000,   color_regions = custom_palette(),   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an interactive map view of an image — image_view","text":"img Image object. title title map view. Use provide short orientations user. show display option map view. Options \"rgb\" RGB view \"index\" index view. index index use index view. Defaults \"B\". max_pixels integer > 0. Maximum number cells use plot. max_pixels < npixels(img), regular sampling used plotting. color_regions color palette displaying index values. Default custom_palette(). ... Additional arguments passed mapview::mapview().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an interactive map view of an image — image_view","text":"sf object, object returned mapedit::editMap().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/image_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an interactive map view of an image — image_view","text":"","code":"if(interactive()){ # Example usage: img <- image_pliman(\"sev_leaf.jpg\") image_view(img) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create image landmarks — landmarks","title":"Create image landmarks — landmarks","text":"interactive section user able click image select landmarks manually open. mouse click, point drawn upward counter shown console. n counts user press Esc, interactive process interrupted data.frame x y coordinates landmarks returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create image landmarks — landmarks","text":"","code":"landmarks(   img,   n = Inf,   viewer = get_pliman_viewer(),   scale = NULL,   calibrate = FALSE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create image landmarks — landmarks","text":"img Image object. n number landmarks produce. Defaults Inf. case, landmarks chosen user press Esc. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. scale known scale coordinate values. NULL (default) scale = 1 used. calibrate logical argument indicating whether calibration step must performed picking landmarks. , calibrate() called internally. Users must select two points indicate known distance. scale value internally computed used correction coordinates (pixels unit known distance).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create image landmarks — landmarks","text":"data.frame x y-coordinates landmarks.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create image landmarks — landmarks","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create image landmarks — landmarks","text":"","code":"if(isTRUE(interactive())){ library(pliman) img <- image_pliman(\"potato_leaves.jpg\") x <- landmarks(img) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Artificially inflates the number of landmarks — landmarks_add","title":"Artificially inflates the number of landmarks — landmarks_add","text":"Interpolates supplementary landmarks correspond mean coordinates two adjacent landmarks.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Artificially inflates the number of landmarks — landmarks_add","text":"","code":"landmarks_add(x, n = 3, smooth_iter = 0, plot = TRUE, nrow = NULL, ncol = NULL)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Artificially inflates the number of landmarks — landmarks_add","text":"x matrix, data.frame list perimeter coordinates, often produced object_contour(), landmarks(), landmarks_regradi(). n number iterations. Defaults 3. smooth_iter number smoothing iterations perform. smooth perimeter interpolated landmarks using poly_smooth(). plot Creates plot? Defaults TRUE. ncol, nrow number rows columns plot grid list used x. Defaults NULL, .e., square grid produced.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Artificially inflates the number of landmarks — landmarks_add","text":"Matrix interpolated coordinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Artificially inflates the number of landmarks — landmarks_add","text":"","code":"library(pliman)  # equally spaced landmarks plot_polygon(contours[[4]]) ldm <- landmarks_regradi(contours[[4]], plot = FALSE) points(ldm$coords, pch = 16) segments(mean(ldm$coords[,1]),          mean(ldm$coords[,2]),          ldm$coords[,1],          ldm$coords[,2])  ldm_add <- landmarks_add(ldm, plot = FALSE) points(ldm_add, col = \"red\") points(ldm$coords, pch = 16)  # smoothed version ldm_add_smo <- landmarks_add(ldm, plot = FALSE, smooth_iter = 10) lines(ldm_add_smo, col = \"blue\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Angles between landmarks — landmarks_angle","title":"Angles between landmarks — landmarks_angle","text":"Computes angle two interlandmark vectors using difference arguments using complex vectors (Claude, 2008).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Angles between landmarks — landmarks_angle","text":"","code":"landmarks_angle(x, unit = c(\"rad\", \"deg\"))"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Angles between landmarks — landmarks_angle","text":"x object computed landmarks(). unit unit angle. Defaults radian (rad). Use unit = \"deg\" return angles degrees.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Angles between landmarks — landmarks_angle","text":"matrix angles landmark combination.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Angles between landmarks — landmarks_angle","text":"Borrowed Claude (2008), pp. 50","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Angles between landmarks — landmarks_angle","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Angles between landmarks — landmarks_angle","text":"","code":"if(isTRUE(interactive())){ library(pliman) img <- image_pliman(\"potato_leaves.jpg\") x <- landmarks(img) landmarks_angle(x) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances between landmarks — landmarks_dist","title":"Distances between landmarks — landmarks_dist","text":"Computes distance two landmarks square root sum squared differences coordinate (Claude, 2008).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances between landmarks — landmarks_dist","text":"","code":"landmarks_dist(x)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances between landmarks — landmarks_dist","text":"x object computed landmarks().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances between landmarks — landmarks_dist","text":"matrix distances landmark combination.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Distances between landmarks — landmarks_dist","text":"Borrowed Claude (2008), pp. 49","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distances between landmarks — landmarks_dist","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances between landmarks — landmarks_dist","text":"","code":"if(isTRUE(interactive())){ library(pliman) img <- image_pliman(\"potato_leaves.jpg\") x <- landmarks(img) landmarks_dist(x) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudolandmarks with equally spaced angles — landmarks_regradi","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"Select n landmarks spaced regular sequence angles taken outline coordinates centroid.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"","code":"landmarks_regradi(   x,   n = 50,   close = TRUE,   plot = TRUE,   ncol = NULL,   nrow = NULL )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"x matrix, data.frame list perimeter coordinates, often produced object_contour(). n Number points sampled. Defaults 50. close Return closed polygon? Defaults TRUE. plot Create plot? Defaults TRUE. ncol, nrow number rows columns plot grid list used x. Defaults NULL, .e., square grid produced.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"list following objects: pixindices: Vector radius indices. radii: Vector sampled radii lengths. Xc: centroid coordinate x axis. Yc: centroid coordinate y axis. coords: Coordinates sampled points arranged two-column matrix. x list, list objects described returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"Borrowed Claude (2008), pp. 53","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"Claude, J. (2008) Morphometrics R, Use R! series, Springer 316 pp.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/landmarks_regradi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pseudolandmarks with equally spaced angles — landmarks_regradi","text":"","code":"library(pliman) plot_polygon(contours[[1]])  ldm <- landmarks_regradi(contours)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/leading_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zeros to a numeric sequence — leading_zeros","title":"Add leading zeros to a numeric sequence — leading_zeros","text":"Add n leading zeros numeric sequence. useful create character vector rename files folder.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leading_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zeros to a numeric sequence — leading_zeros","text":"","code":"leading_zeros(x, n = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/leading_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zeros to a numeric sequence — leading_zeros","text":"x numeric vector list numeric vectors. n number leading zeros add. Defaults 3.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leading_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading zeros to a numeric sequence — leading_zeros","text":"character vector list character vectors.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/leading_zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading zeros to a numeric sequence — leading_zeros","text":"","code":"library(pliman) leading_zeros(1:5) #> [1] \"001\" \"002\" \"003\" \"004\" \"005\" leading_zeros(list(a = 1:3,                    b = 1:5),               n = 2) #> $a #> [1] \"01\" \"02\" \"03\" #>  #> $b #> [1] \"01\" \"02\" \"03\" \"04\" \"05\" #>"},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_brush.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a brush — make_brush","title":"Makes a brush — make_brush","text":"Generates brushes various sizes shapes can used structuring elements. See EBImage::makeBrush().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_brush.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a brush — make_brush","text":"","code":"make_brush(size, shape = \"disc\", ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_brush.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a brush — make_brush","text":"size numeric containing size brush pixels. odd number; even numbers rounded next odd one. shape character vector indicating shape brush. Can \"box\", \"disc\", \"diamond\", \"Gaussian\" \"line\" Defaults \"disc\". ... arguments passed EBImage::makeBrush().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_brush.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a brush — make_brush","text":"2D matrix 0s 1s containing desired brush.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_brush.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a brush — make_brush","text":"","code":"make_brush(size = 51) |> image()  make_brush(size = 51, shape = \"diamond\") |> image()"},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a mask in an image — make_mask","title":"Makes a mask in an image — make_mask","text":"Make mask using Image object brush.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a mask in an image — make_mask","text":"","code":"make_mask(img, brush, rel_pos_x = 0.5, rel_pos_y = 0.5, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a mask in an image — make_mask","text":"img Image object brush object created make_brush() rel_pos_x, rel_pos_y relative position include brush image. Defaults 0.5. means brush centered original image. Smaller values move brush toward left top, respectively. plot Plots generated mask? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a mask in an image — make_mask","text":"binary image 0s 1s.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Makes a mask in an image — make_mask","text":"applies brush Image, selecting Image pixels match brush values equal 1. position brush original image controlled relative positions x (rel_pos_x) y (rel_pos_y) arguments.  size brush must smaller equal smaller dimension image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/make_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a mask in an image — make_mask","text":"","code":"img <- image_pliman(\"soybean_touch.jpg\") make_mask(img, brush = make_brush(size = 201))  #> Image  #>   colorMode    : Grayscale  #>   storage.mode : double  #>   dim          : 825 648  #>   frames.total : 1  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0 #> [3,]    0    0    0    0    0    0 #> [4,]    0    0    0    0    0    0 #> [5,]    0    0    0    0    0    0 make_mask(img,           brush = make_brush(size = 401, shape = \"diamond\"),           rel_pos_x = 0.1,           rel_pos_y = 0.8)  #> Image  #>   colorMode    : Grayscale  #>   storage.mode : double  #>   dim          : 825 648  #>   frames.total : 1  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    0    0    0 #> [2,]    0    0    0    0    0    0 #> [3,]    0    0    0    0    0    0 #> [4,]    0    0    0    0    0    0 #> [5,]    0    0    0    0    0    0"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs plant disease measurements — measure_disease","title":"Performs plant disease measurements — measure_disease","text":"measure_disease() computes percentage symptomatic leaf area (optionally) counts compute shapes (area, perimeter, radius, etc.) lesions sample entire leaf using color palettes. See Details. measure_disease_iter() provides iterative section measure_disease(), user picks samples image create needed color palettes.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs plant disease measurements — measure_disease","text":"","code":"measure_disease(   img,   img_healthy = NULL,   img_symptoms = NULL,   img_background = NULL,   pattern = NULL,   filter = 10,   parallel = FALSE,   workers = NULL,   resize = FALSE,   fill_hull = TRUE,   index_lb = NULL,   index_dh = \"GLI\",   has_white_bg = FALSE,   threshold = NULL,   invert = FALSE,   lower_size = NULL,   upper_size = NULL,   topn_lower = NULL,   topn_upper = NULL,   randomize = TRUE,   nsample = 3000,   watershed = FALSE,   lesion_size = \"medium\",   tolerance = NULL,   extension = NULL,   show_features = FALSE,   show_segmentation = FALSE,   plot = TRUE,   show_original = TRUE,   show_background = TRUE,   show_contour = TRUE,   contour_col = \"white\",   contour_size = 1,   col_leaf = NULL,   col_lesions = NULL,   col_background = NULL,   marker = FALSE,   marker_col = NULL,   marker_size = NULL,   save_image = FALSE,   prefix = \"proc_\",   name = NULL,   dir_original = NULL,   dir_processed = NULL,   verbose = TRUE )  measure_disease_iter(   img,   has_background = TRUE,   r = 2,   viewer = get_pliman_viewer(),   show = \"rgb\",   index = \"NGRDI\",   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs plant disease measurements — measure_disease","text":"img image analyzed. img_healthy color palette healthy tissues. img_symptoms color palette lesioned tissues. img_background color palette background (exists). arguments can either Image object stored global environment character value. chacarceter used (eg., img_healthy = \"leaf\"), function search current working directory valid image contains \"leaf\" name. Note two images matches pattern, error occour. pattern pattern file name used identify images processed. example, pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . filter Performs median filtering binary image segments leaf background? default, median filter size = 10 applied. useful reduce noise segment leaf background accurately. See image_filter(). Set FALSE cancel median filtering. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. resize Resize image processing? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). fill_hull Fill holes image? Defaults TRUE. useful fill holes leaves, e.g., caused insect attack, ensuring hole area accounted leaf, background. index_lb index used segment foreground (e.g., leaf) background. declared, entire image area (pixels) considered computation severity. index_dh index used segment diseased healthy tissues img_healthy img_symptoms declared. Defaults \"GLI\". See image_index() details. has_white_bg Logical indicating whether white background present. TRUE, pixels R, G, B values equals 1 considered NA. may useful compute image index objects , example, white background. cases, background considered threshold computation. threshold default (threshold = NULL), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively choose threshold based raster plot showing pixel intensity index. Must vector length 2 indicate threshold index_lb index_dh, respectively. invert Inverts binary image desired. useful process images black background. Defaults FALSE. lower_size Lower limit size image analysis. Leaf images often contain dirt dust. prevent dust affecting image analysis, lower limit analyzed size set 0.1, .e., objects lesser 10% mean objects removed. One can set known area use lower_limit = 0 select objects (advised). upper_size Upper limit size image analysis. Defaults NULL, .e., upper limit used. topn_lower, topn_upper Select top n lesions based area. topn_lower selects n lesions smallest area whereas topn_upper selects n lesions largest area. randomize Randomize lines training model? Defaults TRUE. nsample number sample pixels used training step. Defaults 3000. watershed TRUE (Default) implements Watershed Algorithm segment lesions connected fairly pixels considered two distinct lesions. FALSE, lesions connected pixel considered unique lesions. details see EBImage::watershed(). lesion_size size lesion. Used automatically tune tolerance extension parameters. One following. \"small\" (2-5 mm diameter, e.g, rust pustules), \"medium\" (0.5-1.0 cm diameter, e.g, wheat leaf spot), \"large\" (1-2 cm diameter, \"elarge\" (2-3 cm diameter, e.g, target spot soybean). tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. Defaults NULL, .e., starting values set according argument lesion_size. extension Radius neighborhood pixels detection neighboring objects. Defaults 20. Higher value smooths small objects. show_features TRUE returnS lesion features number, area, perimeter, radius. Defaults FALSE. show_segmentation Shows object segmentation colored random permutations. Defaults TRUE. plot Show image processing? Defaults TRUE. show_original Show symptoms original image? show_background Show background? Defaults TRUE. white background shown default show_original = FALSE. show_contour Show contour line around lesions? Defaults TRUE. contour_col, contour_size color size contour line around objects. Defaults contour_col = \"white\" contour_size = 1. col_leaf Leaf color image processing. Defaults \"green\" col_lesions Symptoms color image processing. Defaults \"red\". col_background Background color image processing. Defaults \"NULL\". marker, marker_col, marker_size type, color size object marker. Defaults NULL, shows nothing. Use marker = \"point\" show point lesion marker = \"*\" \"*\" variable name shape data frame returned function. save_image Save image processing? image saved current working directory named proc_* * image name given img. prefix prefix included processed images. Defaults \"proc_\". name name image save. Use overwrite name image img. dir_original, dir_processed directory containing original processed images. Defaults NULL. case, function search image img current working directory. processing, save_image = TRUE, processed image also saved directory. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". verbose TRUE (default) summary shown console. has_background logical indicating image background segmented processing. r radius neighborhood pixels. Defaults 2. square drawn indicating selected pixels. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. show show option mapview viewer, either \"rgb\" \"index\". index index shown show = \"rgb\". ... parameters passed measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs plant disease measurements — measure_disease","text":"measure_disease() returns list following objects: severity data frame percentage healthy symptomatic areas. shape,statistics show_features = TRUE used, returns shape (area, perimeter, etc.) lesion summary statistic results. measure_disease_iter() returns list following objects: results list objects returned measure_disease(). leaf color palettes healthy leaf. disease color palettes diseased leaf. background color palettes background.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs plant disease measurements — measure_disease","text":"measure_disease(), general linear model (binomial family) fitted RGB values used segment lesions healthy leaf. pallet background provided, function takes care details isolate computing number area lesions. using pattern possible process several images common pattern names stored current working directory subdirectory informed dir_original. img_healthy img_symptoms declared, RGB-based phenotyping foliar disease severity performed using index informed index_lb first segment leaf background index_dh segment diseased healthy tissues. measure_disease_iter() run interactive section. function, users able pick samples images iteratively create needed color palettes. process calls pick_palette() internally. has_background TRUE (default) color palette background first created. sample colors performed left-button mouse click continues user press Esc. , new sampling process performed sample color healthy tissues diseased tissues. generated palettes passed measure_disease(). arguments function can passed using ... (three dots). show_features = TRUE, function computes total 36 lesion features (23 shape features 13 texture features). Haralick texture features object based gray-level co-occurrence matrix (Haralick et al. 1979). See details analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performs plant disease measurements — measure_disease","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs plant disease measurements — measure_disease","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf_nb.jpg\") healthy <- image_pliman(\"sev_healthy.jpg\") lesions <- image_pliman(\"sev_sympt.jpg\") image_combine(img, healthy, lesions, ncol = 3)   sev <-  measure_disease(img = img,                  img_healthy = healthy,                  img_symptoms = lesions,                  lesion_size = \"large\",                  plot = TRUE)   # an interactive section measure_disease_iter(img) #> Use the first mouse button to pick up BACKGROUND colors. Press Est to exit #> Use the first mouse button to pick up LEAF colors. Press Est to exit #> Use the first mouse button to pick up DISEASE colors. Press Est to exit   #> $results #> $severity #>    healthy symptomatic #> 1 60.79121    39.20879 #>  #> $shape #> NULL #>  #> $statistics #> NULL #>  #> attr(,\"class\") #> [1] \"plm_disease\" #>  #> $leaf #> NULL #>  #> $disease #> NULL #>  #> $background #> NULL #>  # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_byl.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs plant disease measurements by leaf — measure_disease_byl","title":"Performs plant disease measurements by leaf — measure_disease_byl","text":"Computes percentage symptomatic leaf area using color palettes RGB indexes leaf image. allows, example, processing replicates treatment  obtaining results replication single image. , leaf samples first splitten object_split() , measure_disease() applied list leaves.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_byl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs plant disease measurements by leaf — measure_disease_byl","text":"","code":"measure_disease_byl(   img,   index = \"B\",   index_lb = \"B\",   index_dh = \"NGRDI\",   lower_size = NULL,   watershed = TRUE,   invert = FALSE,   fill_hull = FALSE,   filter = 3,   threshold = \"Otsu\",   extension = NULL,   tolerance = NULL,   object_size = \"large\",   dir_original = NULL,   img_healthy = NULL,   img_symptoms = NULL,   pattern = NULL,   parallel = FALSE,   workers = NULL,   plot = TRUE,   show_features = FALSE,   save_image = FALSE,   verbose = TRUE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_byl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs plant disease measurements by leaf — measure_disease_byl","text":"img image analyzed. index character value specifying target mode conversion binary segment leaves background. Defaults \"B\" (blue). See image_index() details. Personalized indexes can informed , e.g., index = \"R*G/B. index_lb index used segment foreground (e.g., leaf) background. declared, entire image area (pixels) considered computation severity. index_dh index used segment diseased healthy tissues img_healthy img_symptoms declared. Defaults \"GLI\". See image_index() details. lower_size prevent dust affecting object segmentation, objects lesser 10% mean objects removed. . One can set known area use lower_limit = 0 select objects (advised). watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. invert Inverts binary image desired. useful process images black background. Defaults FALSE. reference = TRUE use, invert can declared logical vector length 2 (eg., invert = c(FALSE, TRUE). case, segmentation objects reference foreground using back_fore_index performed using default (inverted), segmentation objects reference performed inverting selection (selecting pixels higher threshold). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. dir_original directory containing original processed images. Defaults NULL. case, function search image img current working directory. img_healthy color palette healthy tissues. img_symptoms color palette lesioned tissues. pattern pattern file name used identify images processed. example, pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. plot Show image processing? show_features TRUE returnS lesion features number, area, perimeter, radius. Defaults FALSE. save_image Save image processing? image saved current working directory named proc_* * image name given img. verbose TRUE (default) summary shown console. ... Additional arguments passed measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_byl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs plant disease measurements by leaf — measure_disease_byl","text":"list following objects: severity data frame percentage healthy symptomatic areas leaf image(s). shape,statistics show_features = TRUE used, returns shape (area, perimeter, etc.) lesion summary statistic results.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_byl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs plant disease measurements by leaf — measure_disease_byl","text":"","code":"library(pliman) img <- image_pliman(\"mult_leaves.jpg\", plot = TRUE)  sev <-  measure_disease_byl(img = img,                      index_lb = \"B\",                      index_dh = \"NGRDI\",                      workers = 2)  sev$severity #>   img leaf  healthy symptomatic #> 1 img    1 84.41849    15.58151 #> 2 img    2 79.77534    20.22466 #> 3 img    3 68.41733    31.58267"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure disease using shapefiles — measure_disease_shp","title":"Measure disease using shapefiles — measure_disease_shp","text":"function calls measure_disease() image polygon shapefile object generated image_shp() bind results read-ready data frames.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure disease using shapefiles — measure_disease_shp","text":"","code":"measure_disease_shp(   img,   nrow = 1,   ncol = 1,   buffer_x = 0,   buffer_y = 0,   prepare = FALSE,   viewer = \"mapview\",   index_lb = \"HUE2\",   index_dh = \"NGRDI\",   pattern = NULL,   threshold = NULL,   invert = FALSE,   dir_original = NULL,   show_features = FALSE,   interactive = FALSE,   plot = TRUE,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure disease using shapefiles — measure_disease_shp","text":"img image analyzed. Either image class Image character string containing image name. last, image searched root directory. Declare dir_original inform subfolder contains images processed. nrow, ncol number rows columns generate shapefile. Defaults 1. buffer_x, buffer_y Buffering factor width height, respectively, individual shape's side. value 0 0.5 0 means buffering 0.5 means complete buffering (default: 0). value 0.25 buffer shape 25% side. prepare Logical value indicating whether prepare image analysis using image_prepare_mv() function. allows align crop image processing. Defaults FALSE. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. index_lb index used segment foreground (e.g., leaf) background. declared, entire image area (pixels) considered computation severity. index_dh index used segment diseased healthy tissues img_healthy img_symptoms declared. Defaults \"GLI\". See image_index() details. pattern pattern file name used identify images processed. example, pattern = \"im\" images name matches pattern (e.g., img1.-, image1.-, im2.-) analyzed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . threshold default (threshold = NULL), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively choose threshold based raster plot showing pixel intensity index. Must vector length 2 indicate threshold index_lb index_dh, respectively. invert Inverts binary image desired. useful process images black background. Defaults FALSE. dir_original directory containing original processed images. Defaults NULL. case, function search image img current working directory. show_features TRUE returnS lesion features number, area, perimeter, radius. Defaults FALSE. interactive FALSE (default) grid created automatically based image dimension number rows/columns. interactive = TRUE, users must draw points diagonal desired bounding box contain grid. plot Show image processing? Defaults TRUE. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. ... Aditional arguments passed measure_disease.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure disease using shapefiles — measure_disease_shp","text":"object class plm_disease_byl. See details Value section measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/measure_disease_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure disease using shapefiles — measure_disease_shp","text":"","code":"if(interactive()){ # severity for the three leaflets (from left to right) img <- image_pliman(\"mult_leaves.jpg\", plot = TRUE) sev <-  measure_disease_shp(img = img,                      nrow = 1,                      ncol = 3,                      index_lb = \"B\",                      index_dh = \"NGRDI\") sev$severity }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Object edges — object_edge","title":"Object edges — object_edge","text":"Applies Sobel-Feldman Operator detect edges. operator based convolving image small, separable, integer-valued filter horizontal vertical directions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object edges — object_edge","text":"","code":"object_edge(img, sigma = 1, threshold = \"Otsu\", thinning = FALSE, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object edges — object_edge","text":"img image list images class Image. sigma Gaussian kernel standard deviation used gaussian blur. threshold theshold method used.  threshold = \"Otsu\" (default), threshold value based Otsu's method used reduce grayscale image binary image. non-numeric value different \"Otsu\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. Alternatively, provide numeric value used threshold value. thinning Logical value indicating whether thinning procedure applied detected edges. See image_skeleton() plot Logical value indicating whether plot created","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object edges — object_edge","text":"binary version image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object edges — object_edge","text":"Sobel, ., G. Feldman. 1973. 3×3 isotropic gradient operator image processing. Pattern Classification Scene Analysis: 271–272.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object edges — object_edge","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf_nb.jpg\", plot = TRUE)  object_edge(img)  #> Image  #>   colorMode    : Grayscale  #>   storage.mode : logical  #>   dim          : 720 610  #>   frames.total : 1  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6] #>       [,1]  [,2]  [,3]  [,4]  [,5]  [,6] #> [1,] FALSE FALSE FALSE FALSE FALSE FALSE #> [2,] FALSE FALSE FALSE FALSE FALSE FALSE #> [3,] FALSE FALSE FALSE FALSE FALSE FALSE #> [4,] FALSE FALSE FALSE FALSE FALSE FALSE #> [5,] FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export multiple objects from an image to multiple images — object_export","title":"Export multiple objects from an image to multiple images — object_export","text":"Givin image multiple objects, object_export() split objects list objects using object_split() export multiple images current working directory (subfolder). Batch processing performed declaring file name pattern matches images within working directory.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export multiple objects from an image to multiple images — object_export","text":"","code":"object_export(   img,   pattern = NULL,   dir_original = NULL,   dir_processed = NULL,   format = \".jpg\",   squarize = FALSE,   index = \"NB\",   lower_size = NULL,   watershed = TRUE,   invert = FALSE,   fill_hull = FALSE,   filter = 2,   threshold = \"Otsu\",   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   edge = 20,   remove_bg = FALSE,   parallel = FALSE,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export multiple objects from an image to multiple images — object_export","text":"img image analyzed. pattern pattern file name used identify images processed. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported processed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). dir_original directory containing original images. Defaults NULL. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". dir_processed Optional character string indicating subfolder within current working directory save image(s). folder exist, created. format format image exported. squarize Squarizes image exportation? TRUE, image_square() called internally. index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. User can also calculate index using bands names, e.g. index = \"R+B/G\" lower_size Plant images often contain dirt dust. prevent dust affecting image analysis, objects lesser 10% mean objects removed. Set lower_limit = 0 keep objects. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. invert Inverts binary image desired. useful process images black background. Defaults FALSE. reference = TRUE use, invert can declared logical vector length 2 (eg., invert = c(FALSE, TRUE). case, segmentation objects reference foreground using back_fore_index performed using default (inverted), segmentation objects reference performed inverting selection (selecting pixels higher threshold). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. edge number pixels added edge segmented object. Defaults 5. remove_bg TRUE, pixels part objects converted white. parallel TRUE processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. object_index informed, multiple sections used extract RGB values object image. may significantly speed processing time image lots objects (say >1000). verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export multiple objects from an image to multiple images — object_export","text":"NULL object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export multiple objects from an image to multiple images — object_export","text":"","code":"if(interactive()){ library(pliman) img <- image_pliman(\"la_leaves.jpg\") object_export(img)  }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Export multiple objects from an image to multiple images — object_export_shp","title":"Export multiple objects from an image to multiple images — object_export_shp","text":"Givin image multiple objects, object_export_shp() split objects list objects using object_split_shp() export multiple images current working directory (subfolder). Batch processing performed declaring file name pattern matches images within working directory.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export multiple objects from an image to multiple images — object_export_shp","text":"","code":"object_export_shp(   img,   pattern = NULL,   dir_original = NULL,   dir_processed = NULL,   format = \".jpg\",   subfolder = NULL,   squarize = FALSE,   nrow = 1,   ncol = 1,   buffer_x = 0,   buffer_y = 0,   interactive = FALSE,   parallel = FALSE,   verbose = TRUE,   viewer = get_pliman_viewer() )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export multiple objects from an image to multiple images — object_export_shp","text":"img object class Image pattern pattern file name used identify images processed. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported processed. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). dir_original directory containing original images. Defaults NULL. can either full path, e.g., \"C:/Desktop/imgs\", subfolder within current working directory, e.g., \"/imgs\". dir_processed Optional character string indicating subfolder within current working directory save image(s). folder exist, created. format format image exported. subfolder Optional character string indicating subfolder within current working directory save image(s). folder exist, created. squarize Squarizes image exportation? TRUE, image_square() called internally. nrow number desired rows grid. Defaults 1. ncol number desired columns grid. Defaults 1. buffer_x, buffer_y Buffering factor width height, respectively, individual shape's side. value 0 0.5 0 means buffering 0.5 means complete buffering (default: 0). value 0.25 buffer shape 25% side. interactive FALSE (default) grid created automatically based image dimension number rows/columns. interactive = TRUE, users must draw points diagonal desired bounding box contain grid. parallel TRUE processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time, especially pattern used informed. object_index informed, multiple sections used extract RGB values object image. may significantly speed processing time image lots objects (say >1000). verbose TRUE (default) summary shown console. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export multiple objects from an image to multiple images — object_export_shp","text":"NULL object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_export_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export multiple objects from an image to multiple images — object_export_shp","text":"","code":"if(interactive()){ library(pliman) flax <- image_pliman(\"flax_leaves.jpg\", plot = TRUE) object_export_shp(flax)  }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels objects — object_label","title":"Labels objects — object_label","text":"pixels connected set foreground (non-zero) pixels x set unique increasing integer, starting 1. Hence, max(x) gives number connected objects x. wrapper EBImage::bwlabel EBImage::watershed (watershed = TRUE).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels objects — object_label","text":"","code":"object_label(   img,   index = \"B\",   invert = FALSE,   fill_hull = FALSE,   threshold = \"Otsu\",   k = 0.1,   windowsize = NULL,   filter = FALSE,   watershed = FALSE,   tolerance = NULL,   extension = NULL,   object_size = \"medium\",   plot = TRUE,   ncol = NULL,   nrow = NULL,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels objects — object_label","text":"img image object. index character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes() image_index() details. invert Inverts binary image, desired. fill_hull Fill holes objects? Defaults FALSE. threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. k numeric range 0-1. k high, local threshold values tend lower. k low, local threshold value tend higher. windowsize windowsize controls number local neighborhood adaptive thresholding. default set 1/3 * minxy, minxy minimum dimension image (pixels). filter Performs median filtering binary image? (Defaults FALSE). Provide positive integer > 1 indicate size median filtering. Higher values efficient remove noise background can dramatically impact perimeter objects, mainly irregular perimeters leaves serrated edges. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. plot Show image processing? nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. verbose TRUE (default) summary shown console.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels objects — object_label","text":"list length img containing labeled objects.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labels objects — object_label","text":"","code":"img <- image_pliman(\"soybean_touch.jpg\") # segment the objects using the \"B\" (blue) band. object_label(img, index = \"B\")  object_label(img, index = \"B\", watershed = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Object Distances — object_map","title":"Map Object Distances — object_map","text":"Computes distances objects anal_obj object returns list distances, coefficient variation (CV), means.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Object Distances — object_map","text":"","code":"object_map(object, by_column = \"img\", direction = c(\"horizontal\", \"vertical\"))"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Object Distances — object_map","text":"object anal_obj object computed analyze_objects_shp(). by_column column name object's results data frame group objects . Default \"img\". direction direction mapping. one \"horizontal\" \"vertical\". Default \"horizontal\".","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Object Distances — object_map","text":"list following components: distances list distances objects grouped unique values specified column/row. cvs vector coefficient variation (CV) values column/row. means vector mean distances column/row.","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Object Distances — object_map","text":"","code":"if(interactive()){ library(pliman) flax <- image_pliman(\"flax_leaves.jpg\", plot =TRUE) res <-    analyze_objects_shp(flax,                        nrow = 3,                        ncol = 1,                        watershed = FALSE,                        index = \"R/(G/B)\",                        plot = FALSE) plot(res$final_image_mask) plot(res$shapefiles)  # distance from each leave within each row result <- object_map(res) result$distances result$cvs result$means }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark Object Points — object_mark","title":"Mark Object Points — object_mark","text":"Marks coordinates objects anal_obj object plot.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark Object Points — object_mark","text":"","code":"object_mark(object, col = \"white\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark Object Points — object_mark","text":"object anal_obj object computed analyze_objects_shp() analyze_objects_shp(). col color marked points. Default \"white\".","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark Object Points — object_mark","text":"","code":"library(pliman) flax <- image_pliman(\"flax_leaves.jpg\", plot =TRUE) res <-    analyze_objects(flax,                        watershed = FALSE,                        index = \"R/(G/B)\",                        plot = FALSE) object_mark(res)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract red, green and blue values from objects — object_rgb","title":"Extract red, green and blue values from objects — object_rgb","text":"Given image matrix labels identify object, function extracts red, green, blue values object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract red, green and blue values from objects — object_rgb","text":"","code":"object_rgb(img, labels)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract red, green and blue values from objects — object_rgb","text":"img Image object labels mask containing labels object. can obtained EBImage::bwlabel() EBImage::watershed()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract red, green and blue values from objects — object_rgb","text":"data.frame n rows (number pixels objects) following columns: id: object id; R: value red band; G: value blue band; B: value green band;","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract red, green and blue values from objects — object_rgb","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") # segment the objects using the \"B\" (blue) band (default)  labs <- object_label(img, watershed = TRUE)  rgb <- object_rgb(img, labs[[1]]) head(rgb) #>   id         R         G         B #> 1  1 0.3725490 0.5411765 0.5647059 #> 2  1 0.3294118 0.5019608 0.5137255 #> 3  1 0.3176471 0.4784314 0.4941176 #> 4  1 0.3254902 0.4862745 0.4941176 #> 5  1 0.3450980 0.5058824 0.5137255 #> 6  1 0.3647059 0.5372549 0.5490196"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits objects from an image into multiple images — object_split","title":"Splits objects from an image into multiple images — object_split","text":"Using threshold-based segmentation, objects first isolated background. , new image created single object. list images returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits objects from an image into multiple images — object_split","text":"","code":"object_split(   img,   index = \"NB\",   lower_size = NULL,   watershed = TRUE,   invert = FALSE,   fill_hull = FALSE,   filter = 2,   threshold = \"Otsu\",   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   edge = 3,   remove_bg = FALSE,   plot = TRUE,   verbose = TRUE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits objects from an image into multiple images — object_split","text":"img image analyzed. index character value specifying target mode conversion binary image foreground background declared. Defaults \"NB\" (normalized blue). See image_index() details. User can also calculate index using bands names, e.g. index = \"R+B/G\" lower_size Plant images often contain dirt dust. prevent dust affecting image analysis, objects lesser 10% mean objects removed. Set lower_limit = 0 keep objects. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. invert Inverts binary image desired. useful process images black background. Defaults FALSE. reference = TRUE use, invert can declared logical vector length 2 (eg., invert = c(FALSE, TRUE). case, segmentation objects reference foreground using back_fore_index performed using default (inverted), segmentation objects reference performed inverting selection (selecting pixels higher threshold). fill_hull Fill holes binary image? Defaults FALSE. useful fill holes objects portions color similar background. IMPORTANT: Objects touching can combined one single object, may underestimate number objects image. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. threshold theshold method used. default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. threshold = \"adaptive\", adaptive thresholding (Shafait et al. 2008) used, depend k windowsize arguments. non-numeric value different \"Otsu\" \"adaptive\" used, iterative section allow choose threshold based raster plot showing pixel intensity index. extension Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. object_size size object. Used automatically set tolerance extension parameters. One following. \"small\" (e.g, wheat grains), \"medium\" (e.g, soybean grains), \"large\"(e.g, peanut grains), \"elarge\" (e.g, soybean pods)`. edge number pixels added edge segmented object. Defaults 5. remove_bg TRUE, pixels part objects converted white. plot Show image processing? verbose TRUE (default) summary shown console. ... Additional arguments passed image_combine()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits objects from an image into multiple images — object_split","text":"list objects class Image.","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits objects from an image into multiple images — object_split","text":"","code":"library(pliman) img <- image_pliman(\"la_leaves.jpg\", plot = TRUE)  imgs <- object_split(img) # set to NULL to use 50% of the cores #> ============================== #> Summary of the procedure #> ============================== #> Number of objects: 6  #> Average area     : 26654.5  #> Minimum area     : 4303  #> Maximum area     : 44658  #> Objects created  : 6  #> =============================="},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits image objects based on a shape file — object_split_shp","title":"Splits image objects based on a shape file — object_split_shp","text":", image_shp() used create shape file based desired number rows columns. , using object coordinates, list Image objects created.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits image objects based on a shape file — object_split_shp","text":"","code":"object_split_shp(   img,   nrow = 1,   ncol = 1,   buffer_x = 0,   buffer_y = 0,   interactive = FALSE,   viewer = get_pliman_viewer(),   only_shp = FALSE,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits image objects based on a shape file — object_split_shp","text":"img object class Image nrow number desired rows grid. Defaults 1. ncol number desired columns grid. Defaults 1. buffer_x, buffer_y Buffering factor width height, respectively, individual shape's side. value 0 0.5 0 means buffering 0.5 means complete buffering (default: 0). value 0.25 buffer shape 25% side. interactive FALSE (default) grid created automatically based image dimension number rows/columns. interactive = TRUE, users must draw points diagonal desired bounding box contain grid. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. only_shp TRUE returns shapefiles coordinates image. FALSE (default) returns splitted image according nrow ncol arguments. ... arguments passed image_shp()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits image objects based on a shape file — object_split_shp","text":"list Image objects","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_split_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits image objects based on a shape file — object_split_shp","text":"","code":"if(interactive()){ library(pliman) flax <- image_pliman(\"flax_leaves.jpg\", plot = TRUE) objects <- object_split_shp(flax, nrow = 3, ncol = 5) image_combine(objects$imgs) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_to_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply color to image objects — object_to_color","title":"Apply color to image objects — object_to_color","text":"function applies color informed argument color segmented objects image. segmentation performed using image indexes. Use image_index() identify better candidate index segment objects.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_to_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply color to image objects — object_to_color","text":"","code":"object_to_color(img, index = \"NB\", color = \"blue\", plot = TRUE, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_to_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply color to image objects — object_to_color","text":"img image object. index character value (vector characters) specifying target mode conversion binary image. See available indexes pliman_indexes() image_index() details. color color apply image objects. Defaults \"blue\". plot Plots modified image? Defaults TRUE. ... Additional arguments passed image_binary().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_to_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply color to image objects — object_to_color","text":"object class Image","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/object_to_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply color to image objects — object_to_color","text":"","code":"library(pliman) img <- image_pliman(\"la_leaves.jpg\") img2 <- object_to_color(img, index = \"G-R\")  image_combine(img, img2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Otsu's threshold — otsu","title":"Calculate Otsu's threshold — otsu","text":"Given numeric vector pixel's intensities, returns threshold value based Otsu's method, minimizes combined intra-class variance","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Otsu's threshold — otsu","text":"","code":"otsu(values)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Otsu's threshold — otsu","text":"values numeric vector pixel values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Otsu's threshold — otsu","text":"double (threshold value).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Otsu's threshold — otsu","text":"Otsu, N. 1979. Threshold selection method gray-level histograms. IEEE Trans Syst Man Cybern SMC-9(1): 62–66. doi: doi:10.1109/tsmc.1979.4310076","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/otsu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Otsu's threshold — otsu","text":"","code":"img <- image_pliman(\"soybean_touch.jpg\") thresh <- otsu(img@.Data[,,3]) plot(img[,,3] < thresh)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create image palettes — palettes","title":"Create image palettes — palettes","text":"image_palette()  creates image palettes applying k-means algorithm RGB values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create image palettes — palettes","text":"","code":"image_palette(img, npal = 5, proportional = TRUE, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create image palettes — palettes","text":"img image object. npal number color palettes. proportional Creates joint palette proportional size equal number pixels image? Defaults TRUE. plot Plot generated palette? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create image palettes — palettes","text":"image_palette() returns list two elements: palette_list list npal color palettes class Image. joint object class Image color palettes proportions proportion entire image corresponding color palette rgbs average RGB value palette","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create image palettes — palettes","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"sev_leaf.jpg\") pal <- image_palette(img, npal = 4)   image_combine(pal$palette_list)   # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-pipe operator — pipe","title":"Forward-pipe operator — pipe","text":"Pipe object forward function call expression.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-pipe operator — pipe","text":"","code":"lhs %>% rhs"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-pipe operator — pipe","text":"lhs result piping. rhs piping result .","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forward-pipe operator — pipe","text":"Nathan Eastwood nathan.eastwood@icloud.com Antoine Fabri antoine.fabri@gmail.com. code obtained poorman package https://github.com/nathaneastwood/poorman/blob/master/R/pipe.R","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-pipe operator — pipe","text":"","code":"library(pliman)  # Basic use:  iris %>% head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # use to apply several functions to an image img <- image_pliman(\"la_leaves.jpg\")  img %>%  image_resize(50) %>%        # resize to 50% of the original size  object_isolate(id = 1) %>%  # isolate object 1  image_filter() %>%          # apply a median filter  plot()                      # plot"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pixel_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the pixel indices for a given row of a binary image — pixel_index","title":"Get the pixel indices for a given row of a binary image — pixel_index","text":"function finds first row bin matrix value greater 0 (TRUE). calculates minimum, median, maximum values pixels row creates array containing row index, minimum pixel index, median pixel index, maximum pixel index.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pixel_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the pixel indices for a given row of a binary image — pixel_index","text":"","code":"pixel_index(bin, row = NULL, direction = \"updown\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pixel_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the pixel indices for a given row of a binary image — pixel_index","text":"bin logical matrix representing binary image row optional row index. provided, function selects first non-zero row. direction direction row selection row provided. set \"updown\", function starts scanning top image towards bottom. set \"downup\", function starts scanning bottom towards top.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pixel_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the pixel indices for a given row of a binary image — pixel_index","text":"numeric vector containing row index, minimum pixel index, median pixel index, maximum pixel index.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pixel_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the pixel indices for a given row of a binary image — pixel_index","text":"","code":"library(pliman) leaf <- image_pliman(\"sev_leaf.jpg\") bin <- image_binary(leaf, \"NB\")[[1]]   # first row with leaf (17) pixel_index(bin) #> [1]  17 245 248 251  # index at the row 100 pixel_index(bin, row = 100) #> [1] 100 163 248 333  plot(leaf) points(x = 248, y = 17, pch = 16, col = \"red\", cex = 2) points(x = 163, y = 100, pch = 16, col = \"red\", cex = 2) points(x = 333, y = 100, pch = 16, col = \"red\", cex = 2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample images — pliman_images","title":"Sample images — pliman_images","text":"Sample images installed pliman package","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample images — pliman_images","text":"*.jpg format flax_leaves.jpg Flax leaves white background flax_grains.jpg Flax grains background light. la_back.jpg cyan palette representing background images la_pattern, la_leaves, soybean_touch. la_leaf.jpg sample leaves la_leaves la_leaves.jpg Tree leaves sample known area. mult_leaves.jpg Three soybean leaflets soybean rust symptoms. objects_300dpi.jpg image 300 dpi resolution. potato_leaves.jpg Three potato leaves, gathered Gupta et al. (2020). sev_leaf.jpg soybean leaf blue background. sev_leaf_nb.jpg soybean leaf without background. sev_back.jpg blue palette representing background sev_leaf. sev_healthy.jpg Healthy area sev_leaf. sev_sympt.jpg symptomatic area sev_leaf. shadow.jpg shaded leaf, useful test adaptive thresholding soy_green.jpg Soybean grains white background. soybean_grain.jpg sample palette grains soy_green. soybean_touch.jpg Soybean grains cyan background touching one . field_mosaic.jpg UVA image soybean field.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample images — pliman_images","text":"Personal data, Gupta et al. (2020).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample images — pliman_images","text":"Gupta, S., Rosenthal, D. M., Stinchcombe, J. R., & Baucom, R. S. (2020). remarkable morphological diversity leaf shape sweet potato (Ipomoea batatas): influence genetics, environment, G×E. New Phytologist, 225(5), 2183–2195. doi:10.1111/NPH.16286","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_images.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample images — pliman_images","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/pliman_viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Global option for controlling the viewer in pliman package — pliman_viewer","title":"Global option for controlling the viewer in pliman package — pliman_viewer","text":"Users can set value option using options(\"pliman_viewer\", value). default value \"base\". Use \"mapview\" allow image plotted/edited using R packages mapview mapedit","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot.image_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method plot for image_shp objects — plot.image_shp","title":"S3 method plot for image_shp objects — plot.image_shp","text":"Draws bounding boxes object computed image_shp().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot.image_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method plot for image_shp objects — plot.image_shp","text":"","code":"# S3 method for image_shp plot(   x,   img = NULL,   col_line = \"black\",   size_line = 2,   col_text = \"black\",   size_text = 0.75,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot.image_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method plot for image_shp objects — plot.image_shp","text":"x object computed image_shp(). img image used compute shapefile (optional) col_line, col_text color line/text grid. Defaults \"red\". size_line, size_text size line/text grid. Defaults 2.5. ... Currently used.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot.image_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method plot for image_shp objects — plot.image_shp","text":"NULL object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot.image_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method plot for image_shp objects — plot.image_shp","text":"","code":"library(pliman) flax <- image_pliman(\"flax_leaves.jpg\") shape <- image_shp(flax, nrow = 3, ncol = 5)   # grid on the existing image plot(flax) plot(shape)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an image index — plot_index","title":"Plot an image index — plot_index","text":"Plot image index","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an image index — plot_index","text":"","code":"plot_index(   img = NULL,   object = NULL,   index = NULL,   remove_bg = TRUE,   viewer = get_pliman_viewer(),   layer = 1,   max_pixels = 1e+06,   color_regions = custom_palette(),   ncol = NULL,   nrow = NULL,   aspect_ratio = NA )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an image index — plot_index","text":"img optional Image object object computed image_index(). object provided, input image obtained internally. object object computed analyze_objects_shp(). using object can ignore img. index index plot. Defaults index computed object provided. Otherwise, B index computed. See image_index() details. remove_bg Logical value indicating whether remove background object provided. Defaults TRUE. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. layer layer plot img object computed image_index() viewer = \"mapview\". Defaults first layer (first index computed). max_pixels integer > 0. Maximum number cells plot index. max_pixels < npixels(img), regular sampling used plotting. Using large number pixels may slow plotting time. color_regions color palette displaying index values. Default custom_palette(). nrow, ncol number rows columns plot grid. Defaults NULL, .e., square grid produced. aspect_ratio Numeric, giving aspect ratio y/x. Defaults NA. See graphics::plot.window() details.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an image index — plot_index","text":"None","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an image index — plot_index","text":"","code":"if(interactive()){ # Example usage: library(pliman) img <- image_pliman(\"sev_leaf.jpg\") plot_index(img, index = \"B\") }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","title":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","text":"function plots rectangles top RGB image, rectangle colored based quantitative variable. quantitative variable specified attribute argument present object_index object computed using analyze_objects_shp(). rectangles colored using color scale.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","text":"","code":"plot_index_shp(   object,   attribute = \"coverage\",   color = c(\"red\", \"green\"),   alpha = 0.5,   legend.position = \"bottom\",   na.color = \"gray\",   classes = 6,   round = 3,   horiz = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","text":"object object computed analyze_objects_shp(). attribute name quantitative variable object_index used coloring rectangles. color vector two colors used color scale. alpha transparency level rectangles' color (0 1). legend.position position color legend, either \"bottom\" \"right\". na.color color used rectangles missing values quantitative variable. classes number classes color scale. round number decimal places round legend values. horiz Logical, whether legend horizontal (TRUE) vertical (FALSE).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","text":"function plots rectangles colored specified quantitative variable top RGB image shows continuous color legend outside plot.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_index_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rectangles colored by a quantitative attribute and overlay on an RGB\r\nimage — plot_index_shp","text":"","code":"if(interactive()){ library(pliman)  # Computes the DGCI index for each flax leaf flax <- image_pliman(\"flax_leaves.jpg\", plot =TRUE) res <-    analyze_objects_shp(flax,                        buffer_x = 0.2,                        buffer_y = 0.2,                        nrow = 3,                        ncol = 5,                        plot = FALSE,                        object_index = \"DGCI\") plot(res$final_image) plot_index_shp(res) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_lw.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot length and width lines on objects — plot_lw","title":"Plot length and width lines on objects — plot_lw","text":"function plots length width lines given object computed analyze_objects(). function call plot.new, must called image plotted. can done either using, e.g., plot(img), analyze_objects(..., plot = TRUE).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_lw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot length and width lines on objects — plot_lw","text":"","code":"plot_lw(   object,   col_length = \"red\",   col_width = \"green\",   lwd_length = 2,   lwd_width = 2 )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_lw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot length and width lines on objects — plot_lw","text":"object object computed analyze_objects(). col_length color length line. Default \"red\". col_width color width line. Default \"green\". lwd_length line width length line. Default 2. lwd_width line width width line. Default 2.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_lw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot length and width lines on objects — plot_lw","text":"function takes object computed analyze_objects() plots length width lines object onto image. length width lines calculated based position orientation object, plotted using specified colors line widths.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/plot_lw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot length and width lines on objects — plot_lw","text":"","code":"img <- image_pliman(\"flax_leaves.jpg\") res <- analyze_objects(img, watershed = FALSE, show_contour = FALSE) plot_lw(res)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_apex_base_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the apex and base angles of an object — poly_apex_base_angle","title":"Calculate the apex and base angles of an object — poly_apex_base_angle","text":"function calculates apex base angles object. takes input matrix coordinates returns apex angle, base angle, coordinates apex base list. angles computed object aligned vertical axis poly_align().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_apex_base_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the apex and base angles of an object — poly_apex_base_angle","text":"","code":"poly_apex_base_angle(   x,   percentiles = c(0.25, 0.75),   invert = FALSE,   plot = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_apex_base_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the apex and base angles of an object — poly_apex_base_angle","text":"x matrix coordinates representing contour object, often obtained object_contour(). percentiles numeric vector two percentiles 0 1 indicating height points top bottom. function calculates apex angle two percentiles base angle lowest point highest point. invert TRUE, aligns object along horizontal axis. plot Plots polygon points? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_apex_base_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the apex and base angles of an object — poly_apex_base_angle","text":"list containing apex angle, base angle, apex coordinates, base coordinates.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_apex_base_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the apex and base angles of an object — poly_apex_base_angle","text":"","code":"library(pliman) # a matrix of coordinates angls <- poly_apex_base_angle(contours[[2]])  angls #> $apex_angle #> [1] 44.96998 #>  #> $base_angle #> [1] 57.70275 #>  #> $apex_coords #>             [,1]      [,2] #> apex   -28.26853 -137.8909 #> left  -158.48484 -460.1093 #> right  108.09502 -459.6874 #>  #> $base_coords #>              [,1]      [,2] #> base    -5.980237 -1426.272 #> left  -194.774675 -1104.431 #> right  160.035021 -1104.714 #>   # or a list of coordinates poly_apex_base_angle(contours) #>   id apex_angle base_angle #> 1  1   58.37192   32.28509 #> 2  2   44.96998   57.70275 #> 3  3   57.83157   41.66856 #> 4  4   44.06891   43.39274 #> 5  5   38.57844   41.63098 #> 6  6   43.34263   44.18222"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Perimeter Complexity Value (PCV) — poly_pcv","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"function calculates Perimeter Complexity Value (PCV) given set coordinates representing contour. PCV measures variation distances original coordinates smoothed coordinates relative perimeter length original contour. See details section.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"","code":"poly_pcv(x, niter = 100)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"x matrix list matrices representing coordinates polygon(s). niter integer specifying number smoothing iterations. See poly_smooth() details.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"PCV value(s) computed contour(s). x matrix, returns complexity value polygon's perimeter. x list matrices, returns numeric vector complexity values polygon.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"PCV computed using following formula: $$PCV = \\frac{sum(dists) \\times sd(dists)}{perim}$$ \\(dists\\) represents distances corresponding points original smoothed coordinates, \\(perim\\) perimeter length smoothed contour. PCV computed first smoothing input contour using specified number iterations. smoothed contour used compute distances corresponding points original smoothed coordinates. distances reflect variations contour shape smoothing. sum distances represents overall magnitude variations. Next, sum distances multiplied standard deviation distances capture dispersion spread variations. Finally, value divided perimeter length original contour provide relative measure complexity. Therefore, PCV provides relative measure complexity considering magnitude spread variations contour shape smoothing.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_pcv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Perimeter Complexity Value (PCV) — poly_pcv","text":"","code":"library(pliman) set.seed(20) shp <- efourier_shape(npoints = 1000)  poly_pcv(shp) #> [1] 0.0004920468  # increase the complexity of the outline shp2 <- poly_jitter(shp, noise_x = 20, noise_y = 250, plot = TRUE)  smo <- poly_smooth(shp2, niter = 100, plot = FALSE) plot_contour(smo, col = \"red\")  poly_pcv(shp2) #> [1] 0.0094337"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Width at a given height — poly_width_at","title":"Width at a given height — poly_width_at","text":"function computes polygonal convex hull points x returns number points lie specified set heights along vertical axis convex hull.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Width at a given height — poly_width_at","text":"","code":"poly_width_at(   x,   at = c(0.05, 0.25, 0.5, 0.75, 0.95),   unify = FALSE,   plot = FALSE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Width at a given height — poly_width_at","text":"x vector containing two-dimensional data points (often produced object_contour). vector heights along vertical axis convex hull count number points . default value c(0.05, 0.25, 0.5, 0.75, 0.95), means function return number points 5th, 25th, 50th, 75th, 95th percentiles convex hull. = \"heights\" used, function returns width point object length. unify logical value indicating whether use unified convex hull calculation method. unify = TRUE, coordinates x first bound computing convex hull. plot logical value specifies whether widths plotted.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Width at a given height — poly_width_at","text":"vector widths convex hull specified heights list vectors widths component.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Width at a given height — poly_width_at","text":"convex hull computed x aligned along major axis converted binary image. height vector, function computes corresponding row number binary image (.e., row number corresponds specified height along vertical axis convex hull) sums values row obtain number points lie specified height. convex hull contains multiple polygons unify = FALSE, function loops polygon returns list number points specified heights polygon. convex hull contains one polygon multiple polygons unify = TRUE, function returns vector number points specified heights single polygon.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/poly_width_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Width at a given height — poly_width_at","text":"","code":"cont <- contours[[2]] plot_polygon(cont |> conv_hull() |> poly_align())  #  width below 5th, 25th, 50th, 75th, and 95th percentiles of the length wd <- poly_width_at(cont) wd #> [1]  87 356 386 268  93  # width along the height poly_width_at(cont, at = \"height\", plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/prepare_to_shp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare images to analyze_objects_shp() — prepare_to_shp","title":"Prepare images to analyze_objects_shp() — prepare_to_shp","text":"simple wrapper around image_align() image_crop(). case, option viewer = \"base\" used. use viewer = \"mapview\", please, use functions separately.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prepare_to_shp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare images to analyze_objects_shp() — prepare_to_shp","text":"","code":"prepare_to_shp(img, align = \"vertical\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/prepare_to_shp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare images to analyze_objects_shp() — prepare_to_shp","text":"img Image object align desired alignment. Either \"vertical\" (default) \"horizontal\".","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prepare_to_shp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare images to analyze_objects_shp() — prepare_to_shp","text":"aligned cropped Image object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/prepare_to_shp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare images to analyze_objects_shp() — prepare_to_shp","text":"","code":"if(interactive()){ img <- image_pliman(\"flax_leaves.jpg\") prepare_to_shp(img) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/random_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Random built-in color names — random_color","title":"Random built-in color names — random_color","text":"Randomly chooses single multiple built-color names R knows . See grDevices::colors()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/random_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random built-in color names — random_color","text":"","code":"random_color(n = 1, distinct = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/random_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random built-in color names — random_color","text":"n number color names. Defaults 1. distinct Logical indicating colors returned distinct. Defaults FALSE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/random_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random built-in color names — random_color","text":"character vector color names","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/random_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random built-in color names — random_color","text":"","code":"library(pliman) random_color(n = 3) #> [1] \"slategray1\"     \"lightslategray\" \"grey85\""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces Santandard Area Diagrams — sad","title":"Produces Santandard Area Diagrams — sad","text":"Given object computed measure_disease() Standard Area Diagram (SAD) n images returned respective severity values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces Santandard Area Diagrams — sad","text":"","code":"sad(   object,   n,   show_original = FALSE,   show_contour = FALSE,   nrow = NULL,   ncol = NULL,   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces Santandard Area Diagrams — sad","text":"object object computed measure_disease(). n number leaves Standard Area Diagram. show_original Show original images? Defaults FALSE, .e., mask returned. show_contour Show original images? Defaults FALSE, .e., mask returned. nrow, ncol number rows columns plot. See [image_combine())] [image_combine())]: R:image_combine()) ... arguments passed measure_disease().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces Santandard Area Diagrams — sad","text":"data frame severity values n sampled leaves. plot standard area diagram can saved wrapping sad() png().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produces Santandard Area Diagrams — sad","text":"leaves smallest highest severity always SAD. n = 1, leaf smallest severity returned. others sampled sequentially achieve n images severity ordered ascending order. example, 30 leaves n set 3, leaves sampled 1st, 15th, 30th smallest severity values. SAD can computed image pattern name used argument pattern measure_disease(). images saved, n images retrevied dir_processed directory. Otherwise, severity computed generate images.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Produces Santandard Area Diagrams — sad","text":"Del Ponte EM, Pethybridge SJ, Bock CH, et al (2017) Standard area diagrams aiding severity estimation: Scientometrics, pathosystems, methodological trends last 25 years. Phytopathology 107:1161–1174. doi:10.1094/PHYTO-02-17-0069-FI","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/sad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces Santandard Area Diagrams — sad","text":"","code":"if (FALSE) { library(pliman) sev <- measure_disease(pattern = \"sev_leaf\",                 img_healthy = \"sev_healthy\",                 img_symptoms = \"sev_sympt\",                 img_background  = \"sev_back\",                 plot = FALSE,                 save_image = TRUE,                 show_original = FALSE,                 dir_original = image_pliman(),                 dir_processed = tempdir()) sad(sev, n = 2) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/separate_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Turns a single character column into multiple columns. — separate_col","title":"Turns a single character column into multiple columns. — separate_col","text":"Given either regular expression vector character positions, separate_col() turns single character column multiple columns.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/separate_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turns a single character column into multiple columns. — separate_col","text":"","code":"separate_col(.data, col, into, sep = \"[^[:alnum:]]+\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/separate_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turns a single character column into multiple columns. — separate_col","text":".data data frame col Column name Names new variables create character vector sep separator columns. default, regular expression matches sequence non-alphanumeric values.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/separate_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turns a single character column into multiple columns. — separate_col","text":"mutated .data","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/separate_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turns a single character column into multiple columns. — separate_col","text":"","code":"library(pliman) df <- data.frame(x = paste0(\"TRAT_\", 1:5),                  y = 1:5) df #>        x y #> 1 TRAT_1 1 #> 2 TRAT_2 2 #> 3 TRAT_3 3 #> 4 TRAT_4 4 #> 5 TRAT_5 5 separate_col(df, x, into = c(\"TRAT\", \"REP\")) #>   TRAT REP y #> 1 TRAT   1 1 #> 2 TRAT   2 2 #> 3 TRAT   3 3 #> 4 TRAT   4 4 #> 5 TRAT   5 5"},{"path":"https://tiagoolivoto.github.io/pliman/reference/set_pliman_viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the value of the pliman_viewer option — set_pliman_viewer","title":"Set the value of the pliman_viewer option — set_pliman_viewer","text":"Sets value pliman_viewer option used package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/set_pliman_viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the value of the pliman_viewer option — set_pliman_viewer","text":"","code":"set_pliman_viewer(value)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/set_pliman_viewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the value of the pliman_viewer option — set_pliman_viewer","text":"value value set pliman_viewer option.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary an object index — summary_index","title":"Summary an object index — summary_index","text":"one index available, function performs Principal Component Analysis produces plot showing contribution indexes PC1 (see pca()). index declared index cut point cut_point, number proportion objects mean value index bellow cut_point returned. Additionaly, number proportion pixels bellow cutpoint shown object (id).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary an object index — summary_index","text":"","code":"summary_index(   object,   index = NULL,   cut_point = NULL,   select_higher = FALSE,   plot = TRUE,   type = \"var\",   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary an object index — summary_index","text":"object object computed analyze_objects(). index index desired, e.g., \"B\". Note value must match index(es) used argument object_index analyze_objects(). cut_point cut point. select_higher FALSE (default) selects objects index smaller cut_point. Use select_higher = TRUE select objects index higher cut_point. plot Shows contribution plot one index available? Defaults TRUE. type type plot produce. Defaults \"var\". See get_biplot(). ... arguments passed get_biplot().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary an object index — summary_index","text":"list following elements: ids identification selected objects. between_id data frame following columns n number objects. nsel number selected objects. prop proportion objects selected. mean_index_sel, mean_index_nsel mean value index selected non-selected objects, respectively. within_id data frame following columns id object identification n_less number pixels values lesser equal cut_point. n_greater number pixels values greater cut_point. less_ratio proportion pixels values lesser equal cut_point. greater_ratio proportion pixels values greater cut_point. pca_res object computed pca()","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary an object index — summary_index","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/summary_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary an object index — summary_index","text":"","code":"library(pliman) soy <- image_pliman(\"soy_green.jpg\") anal <- analyze_objects(soy, object_index = \"G\", pixel_level_index = TRUE) plot_measures(anal, measure = \"G\")   summary_index(anal, index = \"G\", cut_point = 0.5)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between colour spaces — utils_colorspace","title":"Convert between colour spaces — utils_colorspace","text":"rgb_to_srgb() Transforms colors RGB space (red/green/blue) Standard Red Green Blue (sRGB), using gamma correction 2.2. rgb_to_hsb() Transforms colors RGB space (red/green/blue) HSB space (hue/saturation/brightness). rgb_to_lab() Transforms colors RGB space (red/green/blue) CIE-LAB space assumed ","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between colour spaces — utils_colorspace","text":"","code":"rgb_to_hsb(object)  rgb_to_srgb(object)  rgb_to_lab(object)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between colour spaces — utils_colorspace","text":"object Image object, object computed analyze_objects() valid object_index argument, data.frame/matrix. last, three-column data (R, G, B, respectively) required.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between colour spaces — utils_colorspace","text":"data frame columns converted color space","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert between colour spaces — utils_colorspace","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_colorspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between colour spaces — utils_colorspace","text":"","code":"if(interactive()){ library(pliman) img <- image_pliman(\"sev_leaf.jpg\") rgb_to_lab(img)  # analyze the object and convert the pixels anal <- analyze_objects(img, object_index = \"B\", pixel_level_index = TRUE) rgb_to_lab(anal) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for image resolution — utils_dpi","title":"Utilities for image resolution — utils_dpi","text":"Provides useful conversions size (cm), number pixels (px) dots per inch (dpi). dpi_to_cm() converts known dpi value centimeters. cm_to_dpi() converts known centimeter values dpi. pixels_to_cm() converts number pixels centimeters, given known resolution (dpi). cm_to_pixels() converts distance (cm) number pixels, given known resolution (dpi). distance() Computes distance two points image based Pythagorean theorem. dpi() interactive function compute image resolution given known distance informed user. See information Details section. npixels() returns number pixels image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for image resolution — utils_dpi","text":"","code":"dpi_to_cm(dpi)  cm_to_dpi(cm)  pixels_to_cm(px, dpi)  cm_to_pixels(cm, dpi)  npixels(img)  dpi(img, viewer = get_pliman_viewer())  distance(img, viewer = get_pliman_viewer())"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for image resolution — utils_dpi","text":"dpi image resolution dots per inch. cm size centimeters. px number pixels. img image object. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for image resolution — utils_dpi","text":"dpi_to_cm(), cm_to_dpi(), pixels_to_cm(), cm_to_pixels() return numeric value vector numeric values input data vector. dpi() returns computed dpi (dots per inch) given known distance informed plot.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities for image resolution — utils_dpi","text":"dpi() run interactive section. compute image resolution (dpi) user must use left button mouse create line known distance. can done, example, using template known distance image (e.g., la_leaves.jpg).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for image resolution — utils_dpi","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_dpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for image resolution — utils_dpi","text":"","code":"library(pliman) # Convert  dots per inch to centimeter dpi_to_cm(c(1, 2, 3)) #> [1] 2.5400000 1.2700000 0.8466667  # Convert centimeters to dots per inch cm_to_dpi(c(1, 2, 3)) #> [1] 0.3937008 0.7874016 1.1811024  # Convert centimeters to number of pixels with resolution of 96 dpi. cm_to_pixels(c(1, 2, 3), 96) #> [1]  37.79528  75.59055 113.38583  # Convert number of pixels to cm with resolution of 96 dpi. pixels_to_cm(c(1, 2, 3), 96) #> [1] 0.02645833 0.05291667 0.07937500  if(isTRUE(interactive())){ #### compute the dpi (dots per inch) resolution #### # only works in an interactive section # objects_300dpi.jpg has a known resolution of 300 dpi img <- image_pliman(\"objects_300dpi.jpg\") # Higher square: 10 x 10 cm # 1) Run the function dpi() # 2) Use the left mouse button to create a line in the higher square # 3) Declare a known distance (10 cm) # 4) See the computed dpi dpi(img)   img2 <- image_pliman(\"la_leaves.jpg\") # square leaf sample (2 x 2 cm) dpi(img2) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for file manipulation — utils_file","title":"Utilities for file manipulation — utils_file","text":"file_extension() Get extension file. file_name() Get name file. file_dir() Get directory file manipulate_files() Manipulate files directory options rename (insert prefix suffix) save new files provided directory. pliman_indexes() Get indexes available pliman. pliman_indexes_eq() Get equation indexes available pliman.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for file manipulation — utils_file","text":"","code":"file_extension(file)  file_name(file)  file_dir(file)  manipulate_files(   pattern,   dir = NULL,   prefix = NULL,   name = NULL,   suffix = NULL,   extension = NULL,   sep = \"\",   save_to = NULL,   overwrite = FALSE,   remove_original = FALSE,   verbose = TRUE )  pliman_indexes()  pliman_indexes_eq()"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for file manipulation — utils_file","text":"file file name. pattern file name pattern. dir working directory containing files manipulated. Defaults current working directory. prefix, suffix prefix suffix added new file names. Defaults NULL (prefix suffix). name name new files. Defaults NULL (original names). name can either single value character vector length number files manipulated. one value informed, sequential vector names created \"name_1\", \"name_2\", . extension new extension file. declared (default), original extensions used. sep optional separator. Defaults \"\". save_to directory save new files. Defaults current working directory. file name file changed, nothing occur. save_to refers subfolder current working directory, files saved given folder. case folder exist, created. default, files overwritten. Set overwrite = TRUE overwrite files. overwrite Overwrite files? Defaults FALSE. remove_original Remove original files manipulation? defaults FALSE. TRUE files pattern removed. verbose FALSE, code run silently.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for file manipulation — utils_file","text":"file_extension(),  file_name(), file_dir() return character string. manipulate_files() return value. verbose == TRUE, message printed indicating operation succeeded () files attempted.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for file manipulation — utils_file","text":"","code":"# \\donttest{ library(pliman) # get file name, directory and extension file <- \"E:/my_folder/my_subfolder/image1.png\" file_dir(file) #> [1] \"E:/my_folder/my_subfolder\" file_name(file) #> [1] \"image1\" file_extension(file) #> [1] \"png\"  # manipulate files dir <- tempdir() list.files(dir) #> [1] \"downlit\" file.create(paste0(dir, \"/test.txt\")) #> [1] TRUE list.files(dir) #> [1] \"downlit\"  \"test.txt\" manipulate_files(\"test\",                  dir = paste0(dir, \"\\\\\"),                 prefix = \"chang_\",                 save_to = paste0(dir, \"\\\\\"),                 overwrite = TRUE) #> 1 files successfully copied to 'C:\\Users\\tiago\\AppData\\Local\\Temp\\RtmpSCsOj6\\' list.files(dir) #> [1] \"chang_test.txt\" \"downlit\"        \"test.txt\"       # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and export images — utils_image","title":"Import and export images — utils_image","text":"Import images files URLs write images files, possibly batch processing.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and export images — utils_image","text":"","code":"image_import(   img,   ...,   which = 1,   pattern = NULL,   path = NULL,   resize = FALSE,   plot = FALSE,   nrow = NULL,   ncol = NULL )  image_export(img, name, prefix = \"\", extension = NULL, subfolder = NULL, ...)  image_pliman(img, plot = FALSE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and export images — utils_image","text":"img image_import(), character vector file names URLs. image_export(), Image object, array list images. image_pliman(), charactere value specifying image example. See ?pliman_images details. ... Alternative arguments passed corresponding functions jpeg, png, tiff packages. logical scalar integer vector indicate image imported TIFF files informed. Defaults 1 (first image returned). pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). path character vector full path names; default corresponds working directory, getwd(). overwrite (given) path informed image argument. resize Resize image importation? Defaults FALSE. Use numeric value range 0-100 (proportion size original image). plot Plots image importing? Defaults FALSE. nrow, ncol Passed image_combine(). number rows columns use composite image plot = TRUE. name string specifying name image. can either character image name (e.g., \"img1\") name extension (e.g., \"img1.jpg\"). none file extension provided, image saved *.jpg file. prefix prefix include image name exporting list images. Defaults \"\", .e., prefix. extension image list, extension can used define extension exported files. overwrite file extensions given image. subfolder Optional character string indicating subfolder within current working directory save image(s). folder exist, created.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and export images — utils_image","text":"image_import() returns new Image object. image_export() returns invisible vector file names. image_pliman() returns new Image object example image required. empty call used, path tmp_images directory installed package returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import and export images — utils_image","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and export images — utils_image","text":"","code":"library(pliman) folder <- image_pliman() full_path <- paste0(folder, \"/sev_leaf.jpg\") (path <- file_dir(full_path)) #> [1] \"C:/Users/tiago/AppData/Local/Temp/RtmpmAvPtA/temp_libpath36d433cd6071/pliman/tmp_images\" (file <- basename(full_path)) #> [1] \"sev_leaf.jpg\" image_import(img = full_path) #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 490 557 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>             [,1]        [,2]        [,3]        [,4]        [,5]        [,6] #> [1,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [2,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [3,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [4,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [5,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.003921569 image_import(img = file, path = path) #> Image  #>   colorMode    : Color  #>   storage.mode : double  #>   dim          : 490 557 3  #>   frames.total : 3  #>   frames.render: 1  #>  #> imageData(object)[1:5,1:6,1] #>             [,1]        [,2]        [,3]        [,4]        [,5]        [,6] #> [1,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [2,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [3,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [4,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 #> [5,] 0.007843137 0.007843137 0.007843137 0.007843137 0.007843137 0.003921569"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for object measures — utils_measures","title":"Utilities for object measures — utils_measures","text":"get_measures() computes object measures (area, perimeter, radius) using either known resolution (dpi) object known measurements. plot_measures() draws object measures given object current plot. object identification (\"id\") drawn default.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for object measures — utils_measures","text":"","code":"get_measures(   object,   measure = NULL,   id = NULL,   dpi = NULL,   sep = \"\\\\_|-\",   verbose = TRUE,   digits = 5 )  plot_measures(   object,   measure = \"id\",   id = NULL,   hjust = NULL,   vjust = NULL,   digits = 2,   size = 0.9,   col = \"white\",   ... )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for object measures — utils_measures","text":"object object computed analyze_objects(). measure plot_measures(), character string; get_measures(), two-sided formula, e.g., measure = area ~ 100 indicating known value object id. right-hand side known value left-hand side can one following. area known area object. perimeter known perimeter object. radius_mean known radius object. radius_min known minimum radius object. object square, radius_min object L/2 L length square side. radius_max known maximum radius object. object square, radius_max object according Pythagorean theorem L x sqrt(2) / 2 L length square side. id object image indicate known value. dpi known resolution image DPI (dots per inch). sep Regular expression manage file names. function combines merge object object measures (sum area mean measures) images share filename prefix, defined part filename preceding first hyphen (-) underscore (_) (hyphen underscore required). example, measures images named L1-1.jpeg, L1-2.jpeg, L1-3.jpeg combined single image information (L1). feature allows user treat multiple images belonging single sample, desired. Defaults sep = \"\\\\_|-\". verbose FALSE, runs code silently. digits number significant figures. Defaults 2. hjust, vjust numeric value adjust labels horizontally vertically. Positive values move labels right (hjust) top (vjust). Negative values move labels left bottom, respectively. size size text. Defaults 0.9. col color text. Defaults \"white\". ... arguments passed graphics::text().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for object measures — utils_measures","text":"get_measures(), measure informed, pixel values corrected value known object, given unit right-hand side meae. dpi informed, measures adjusted knosurwn dpi. applied object class anal_obj, returns data frame object id (corrected) measures. applied object class anal_obj_ls, returns list class measures_ls, two objects: () results, data frame containing identification image (img) object within image (id); (ii) summary data frame containing values image. one object detected given image, number objects (n), total area (area_sum), mean area (area_mean) standard deviation area (area_sd) computed. measures (perimeter radius), mean values presented. plot_measures() returns NULL object, drawing text according x y coordinates objects object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for object measures — utils_measures","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for object measures — utils_measures","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"objects_300dpi.jpg\") plot(img) # Image with four objects with a known resolution of 300 dpi # Higher square: 10 x 10 cm # Lower square: 5 x 5 cm # Rectangle: 4 x 2 cm # Circle: 3 cm in diameter  # Count the objects using the blue band to segment the image results <-    analyze_objects(img,                  index = \"B\",                  lower_noise = 0.1) plot_measures(results, measure = \"id\")   # Get object measures by declaring the known resolution in dots per inch (measures <- get_measures(results, dpi = 300)) #>   id         x         y     area  area_ch perimeter radius_mean radius_min #> 1  1  668.0002  797.0006 99.98202 99.81306  39.92940     5.73220    4.99427 #> 2  2 1736.5017  452.0009 24.99543 24.91095  19.94601     2.86381    2.49131 #> 3  3 1736.5799 1295.3127  7.04751  7.04780  10.07462     1.49390    1.48194 #> 4  4 1736.5000  938.0042  7.95081  7.90034  11.90969     1.66851    0.98779 #>   radius_max radius_sd diam_mean diam_min diam_max major_axis minor_axis #> 1    7.05849   0.62885  11.46439  9.98855 14.11698    4.07824    4.07694 #> 2    3.52774   0.31432   5.72762  4.98263  7.05549    2.03847    2.03588 #> 3    1.50907   0.00396   2.98780  2.96387  3.01815    1.05964    1.05304 #> 4    2.22516   0.42384   3.33701  1.97558  4.45033    1.48321    0.87380 #>    caliper   length    width radius_ratio    theta eccentricity form_factor #> 1 14.04537 14.11695 14.11095      1.41332  0.78286      0.02525     0.78804 #> 2  7.01071  4.99954  4.99107      1.41602 -1.56995      0.05045     0.78951 #> 3  3.00113  3.00257  2.99917      1.01831  0.45900      0.11144     0.87255 #> 4  4.43416  3.98780  1.98120      2.25267  0.00000      0.80804     0.70440 #>   narrow_factor asp_ratio rectangularity pd_ratio plw_ratio solidity convexity #> 1       0.99493   1.00043        1.99239  2.84289   1.41454  1.00169   0.75034 #> 2       1.40227   1.00170        0.99831  2.84508   1.99647  1.00339   0.74991 #> 3       0.99952   1.00113        1.27779  3.35694   1.67862  0.99996   0.90873 #> 4       1.11193   2.01282        0.99369  2.68590   1.99526  1.00639   0.83578 #>   elongation circularity circularity_haralick circularity_norm coverage #> 1    0.00043    15.94644              9.11532          0.78670  0.42739 #> 2    0.00169    15.91665              9.11125          0.78684  0.10685 #> 3    0.00113    14.40196            377.39777          0.86794  0.03013 #> 4    0.50318    17.83980              3.93664          0.69993  0.03399  # Calculated diagonal of the object 1 # 10 * sqrt(2) = 14.14  # Observed diagonal of the object 1 measures[1, \"radius_max\"] * 2 #> [1] 14.11698   # Get object measures by declaring the known area of object 1 get_measures(results,              id = 1,              area ~ 100) #> ----------------------------------------- #> measures corrected with: #> object id: 1 #> area     : 100 #> ----------------------------------------- #> Total    : 40.001  #> Average  : 13.334  #> ----------------------------------------- #>   id        x         y     area  area_ch perimeter radius_mean radius_min #> 2  2 1736.502  452.0009 24.99993 24.91543  19.94781     2.86407    2.49154 #> 3  3 1736.580 1295.3127  7.04878  7.04907  10.07553     1.49403    1.48207 #> 4  4 1736.500  938.0042  7.95224  7.90176  11.91077     1.66866    0.98788 #>   radius_max radius_sd diam_mean diam_min diam_max major_axis minor_axis #> 2    3.52806   0.31434   5.72813  4.98307  7.05612    2.03866    2.03606 #> 3    1.50921   0.00396   2.98807  2.96414  3.01842    1.05974    1.05314 #> 4    2.22536   0.42388   3.33731  1.97576  4.45073    1.48334    0.87388 #>   caliper  length   width radius_ratio    theta eccentricity form_factor #> 2 7.01134 4.99999 4.99152      1.41602 -1.56995      0.05045     0.78951 #> 3 3.00140 3.00284 2.99944      1.01831  0.45900      0.11144     0.87255 #> 4 4.43456 3.98816 1.98138      2.25267  0.00000      0.80804     0.70440 #>   narrow_factor asp_ratio rectangularity pd_ratio plw_ratio solidity convexity #> 2       1.40227   1.00170        0.99831  2.84508   1.99647  1.00339   0.74991 #> 3       0.99952   1.00113        1.27779  3.35694   1.67862  0.99996   0.90873 #> 4       1.11193   2.01282        0.99369  2.68590   1.99526  1.00639   0.83578 #>   elongation circularity circularity_haralick circularity_norm coverage #> 2    0.00169    15.91665              9.11125          0.78684  0.10685 #> 3    0.00113    14.40196            377.39777          0.86794  0.03013 #> 4    0.50318    17.83980              3.93664          0.69993  0.03399 # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for working with image objects — utils_objects","title":"Utilities for working with image objects — utils_objects","text":"object_id() get object identification image. object_coord() get object coordinates (optionally) draw bounding rectangle around multiple objects image. object_contour() returns coordinates (x y) contours object image. object_isolate() isolates object image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for working with image objects — utils_objects","text":"","code":"object_coord(   img,   id = NULL,   index = \"NB\",   watershed = TRUE,   invert = FALSE,   filter = FALSE,   fill_hull = FALSE,   threshold = \"Otsu\",   edge = 2,   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   parallel = FALSE,   workers = NULL,   plot = TRUE )  object_contour(   img,   pattern = NULL,   dir_original = NULL,   center = FALSE,   index = \"NB\",   invert = FALSE,   filter = FALSE,   fill_hull = FALSE,   threshold = \"Otsu\",   watershed = TRUE,   extension = NULL,   tolerance = NULL,   object_size = \"medium\",   parallel = FALSE,   workers = NULL,   plot = TRUE,   verbose = TRUE )  object_isolate(img, id = NULL, parallel = FALSE, workers = NULL, ...)  object_id(img, parallel = FALSE, workers = NULL, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for working with image objects — utils_objects","text":"img image class Image list Image objects. id object_coord(), vector (scalar) object id compute bounding rectangle. Object ids can obtained object_id(). Set id = \"\" compute coordinates objects image. id = NULL (default) bounding rectangle drawn including objects. object_isolate(), scalar identifies object extracted. index index produce binary image used compute bounding rectangle coordinates. See image_binary() details. watershed TRUE (default) performs watershed-based object detection. detect objects even touching one . FALSE, pixels connected set foreground pixels set unique object. faster able segment touching objects. invert Inverts binary image, desired. Defaults FALSE. filter Performs median filtering binary image? See image_filter(). Defaults FALSE. Use positive integer define size median filtering. Larger values effective removing noise, adversely affect edges. fill_hull Fill holes objects? Defaults FALSE. threshold default (threshold = \"Otsu\"), threshold value based Otsu's method used reduce grayscale image binary image. numeric value informed, value used threshold. Inform non-numeric value different \"Otsu\" iteratively chosen threshold based raster plot showing pixel intensity index. edge number pixels edge bounding rectangle. Defaults 2. extension, tolerance, object_size Controls watershed segmentation objects image. See analyze_objects() details. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 50% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. plot Shows image bounding rectangles? Defaults TRUE. pattern pattern file name used identify images imported. example, pattern = \"im\" images current working directory name matches pattern (e.g., img1.-, image1.-, im2.-) imported list. Providing number pattern (e.g., pattern = \"1\") select images named 1.-, 2.-, . error returned pattern matches file supported (e.g., img1.pdf). dir_original directory containing original images. Defaults NULL, means current working directory considered. center TRUE returns object contours centered origin. verbose TRUE (default) summary shown console. ... object_isolate(), arguments passed object_coord(). object_id(), arguments passed analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for working with image objects — utils_objects","text":"object_id() image class \"Image\" containing object's identification. object_coord() list coordinates bounding rectangles. id = \"\" numeric vector, list vector coordinates returned. object_isolate() image class \"Image\" containing isolated object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for working with image objects — utils_objects","text":"","code":"# \\donttest{ library(pliman) img <- image_pliman(\"la_leaves.jpg\") # Get the object's (leaves) identification object_id(img)   # Get the coordinates and draw a bounding rectangle around leaves 1 and 3 object_coord(img, id = c(1, 3))  #>      xleft xright ybottom ytop #> [1,]   434    640     319  640 #> [2,]    19    201     303  606  # Isolate leaf 3 isolated <- object_isolate(img, id = 3) plot(isolated)   # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for Principal Component Axis analysis — utils_pca","title":"Utilities for Principal Component Axis analysis — utils_pca","text":"pca() Computes Principal Component Analysis. wrappers stats::prcomp(), returns results data, scores, contributions quality measurements individuals variables. get_biplot(): Produces biplot object computed pca(). plot.pca(): Produces several types plots, depending type arguments. type = \"var\" Produces barplot contribution (=  \"contrib\"), qualitity adjustment = \"cos2\", scatter plot coordinates (= \"coord\") variables. type = \"ind\" Produces barplot contribution (=  \"contrib\"), qualitity adjustment = \"cos2\", scatter plot coordinates (= \"coord\") individuals. type = \"biplot\" Produces biplot.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for Principal Component Axis analysis — utils_pca","text":"","code":"pca(x, scale = TRUE)  get_biplot(   x,   axes = c(1, 2),   show = c(\"both\"),   show_ind_id = TRUE,   show_unit_circle = TRUE,   expand = NULL )  # S3 method for pca plot(x, type = \"var\", which = \"contrib\", axis = 1, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for Principal Component Axis analysis — utils_pca","text":"x pca(), numeric complex matrix (data frame) provides data principal components analysis. plot.pca() get_biplot(), object computed pca(). scale logical value indicating whether variables scaled unit variance analysis takes place. Defaults TRUE. axes principal component axes plot. Defaults axes = c(1, 2), .e., first second interaction principal component axis. show show biplot. Defaults \"\" (variables individuals). One can also use \"var\", \"ind\". show_ind_id Shows labels individuals? Defaults TRUE. show_unit_circle Shows unit variance circle? Defaults TRUE. expand expansion factor apply plotting second set points relative first. can used tweak scaling two sets physically comparable scale. Setting TRUE automatically compute expansion factor. Alternatively, numeric value can informed. type One \"var\" (plot variables), \"ind\" (plot individuals), \"biplot\" create biplot. measure plot. Either = \"contribution\" (default),  = \"cos2\" (quality representation), = \"coord\" (coordinates) axis axist plot contribution/cos2. Defaults 1. ... arguments passed get_biplot() type = \"biplot\". Otherwise, = \"coord\", arguments passed get_biplot(). = \"contrib\", = \"cos2\" arguments passed graphics::barplot().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for Principal Component Axis analysis — utils_pca","text":"pca() returns list including: data: raw data used compute PCA. variances: Variances (eigenvalues), proportion explained variance component. center,scale: centering scaling used. ind,var list following objects individuals/variables, respectively. coord: coordinates individuals/variables (loadings * component standard deviations) cos2: cos2 individuals/variables (coord^2) contrib: contribution  (percentage) variable given principal component: (cos2 * 100) / (total cos2 component) plot.pca() returns list coordinates used. get_biplot() returns NULL object","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for Principal Component Axis analysis — utils_pca","text":"","code":"library(pliman) pc <- pca(mtcars[1:10 ,1:6]) plot(pc)  plot(pc, type = \"ind\")  plot(pc, type = \"var\", which = \"coord\")   plot(pc, type = \"ind\", which = \"coord\")  plot(pc, type = \"biplot\")"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for picking up points in an image — utils_pick","title":"Utilities for picking up points in an image — utils_pick","text":"pick_count() opens interactive section user able click image count objects (points) manually. mouse click, point drawn upward counter shown console. n counts user press Esc, interactive process terminated number counts returned. pick_coord() Picks coordinates image pick_palette()  creates image palette picking color point(s) image. pick_rgb() Picks RGB values selected point(s) image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for picking up points in an image — utils_pick","text":"","code":"pick_count(   img,   n = Inf,   col = \"red\",   viewer = get_pliman_viewer(),   size = 0.8,   plot = TRUE,   verbose = TRUE )  pick_coords(   img,   n = Inf,   col = \"red\",   viewer = get_pliman_viewer(),   size = 0.8,   verbose = TRUE )  pick_rgb(   img,   n = Inf,   col = \"red\",   viewer = get_pliman_viewer(),   size = 0.8,   plot = TRUE,   verbose = TRUE )  pick_palette(   img,   n = Inf,   r = 1,   shape = \"box\",   viewer = get_pliman_viewer(),   show = \"rgb\",   title = \"Pick colors in the image\",   index = \"B\",   random = TRUE,   width = 100,   height = 100,   col = \"red\",   size = 0.8,   plot = TRUE,   palette = TRUE,   verbose = TRUE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for picking up points in an image — utils_pick","text":"img Image object. n number points pick_* function. Defaults Inf. means picking run user press Esc. col, size color size marker point. viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. plot Call new plot(img) processing? Defaults TRUE. verbose TRUE (default) shows counter console. r radius neighborhood pixels. Defaults 1. shape character vector indicating shape brush around selected pixel.  can \"box\", \"disc\", \"diamond\", \"Gaussian\" \"line\". Defaults \"box\". case, 'r = 1', 8 surrounding pixels sampled. Setting \"disc\" increasing radius (r) select surrounding pixels towards format sphere around selected pixel. show plot mapview viewer, either 'rgb 'index'. title title map view vieweris used. index index use index view. Defaults 'B'. random Randomize selected pixels? Defaults TRUE. width, height width height generated palette. Defaults 100 , .e., square image 100 x 100. palette Plot generated palette? Defaults TRUE.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for picking up points in an image — utils_pick","text":"pick_count() returns data.frame x y coordinates selected point(x). pick_rgb() returns data.frame R, G, B values selected point(s). pick_palette() returns object class Image.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for picking up points in an image — utils_pick","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for picking up points in an image — utils_pick","text":"","code":"if(interactive()){ library(pliman) img <- image_pliman(\"soybean_touch.jpg\")  # start a counting process pick_count(img)  # get rgb from point(s) pick_rgb(img)  # create a palette from point(s) pick_palette(img) }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for Polygons — utils_polygon","title":"Utilities for Polygons — utils_polygon","text":"Several useful functions analyzing polygons. based set coordinate points describe edge object(s). list polygons provided, loops list computes needed element list. Polygon measures conv_hull() Computes convex hull set points. conv_hull_unified() Computes convex hull set points. Compared conv_hull(), conv_hull_unified() binds (unifies) coordinates x list coordinates. poly_area() Computes area polygon given vertices vectors x y using Shoelace formula, follows (Lee Lim, 2017): $$=\\frac{1}{2}\\left|\\sum_{=1}^{n}\\left(x_{} y_{+1}-x_{+1} y_{}\\right)\\right|$$ x y coordinates form corners polygon, n number coordinates. poly_angles() Calculates internal angles polygon using law cosines. poly_lw() Returns length width polygon based alignment y-axis (poly_align()). length defined range along x-axis, width defined range y-axis. poly_mass() Computes center mass polygon given vertices vectors x. poly_solidity() Computes solidity shape ratio shape area convex hull area. Perimeter measures poly_slide() Slides coordinates polygon given vertices vectors x y id-th point becomes first one. poly_distpts() Computes Euclidean distance every point polygon given vertices vectors x y. poly_centdist() Computes Euclidean distance every point perimeter centroid object. poly_perimeter() Computes perimeter polygon given vertices vectors x y. poly_caliper() Computes caliper (also called Feret's diameter) polygon given vertices vectors x y. Circularity measures (Montero et al. 2009). poly_circularity() computes circularity (C), also called shape compactness roundness measure, object. given C = P^2 / , P perimeter area object. poly_circularity_norm() computes normalized circularity (Cn), unity circle. measure invariant translation, rotation, scaling transformations, dimensionless. given : Cn = P^2 / 4*pi*. poly_circularity_haralick() computes Haralick's circularity (CH). method based computing Euclidean distances object centroid boundary pixel. set distances, mean (m) standard deviation (sd) computed. statistical parameters used calculate circularity, CH, shape CH = m/sd. poly_convexity() computes convexity shape using ratio perimeter convex hull perimeter polygon. poly_eccentricity() computes eccentricity shape using ratio eigenvalues (inertia axes coordinates). poly_elongation() computes elongation shape 1 - width / length. Utilities polygons poly_check() Checks set coordinate points returns matrix x y columns. poly_is_closed() Returns logical value indicating polygon closed. poly_close() poly_unclose() close unclose polygon, respectively. poly_rotate() Rotates polygon coordinates angle (0-360 degrees) counterclockwise direction. poly_flip_x(), poly_flip_y() flip shapes along x-axis y-axis, respectively. poly_align() Aligns coordinates along longer axis using var-cov matrix eigen values. poly_center() Centers coordinates origin. poly_sample() Samples n coordinates existing points. Defaults 50. poly_sample_prop() Samples proportion coordinates existing points. Defaults 0.1. poly_spline() Interpolates polygon contour. poly_smooth() Smooths polygon contour using simple moving average. poly_jitter() Adds small amount noise set point coordinates. See base::jitter() details. poly_measures() wrapper around poly_*() functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for Polygons — utils_polygon","text":"","code":"poly_check(x)  poly_is_closed(x)  poly_close(x)  poly_unclose(x)  poly_angles(x)  poly_limits(x)  conv_hull(x)  conv_hull_unified(x)  poly_area(x)  poly_slide(x, fp = 1)  poly_distpts(x)  poly_centdist(x)  poly_perimeter(x)  poly_rotate(x, angle, plot = TRUE)  poly_align(x, plot = TRUE)  poly_center(x, plot = TRUE)  poly_lw(x)  poly_eccentricity(x)  poly_convexity(x)  poly_caliper(x)  poly_elongation(x)  poly_solidity(x)  poly_flip_y(x)  poly_flip_x(x)  poly_sample(x, n = 50)  poly_sample_prop(x, prop = 0.1)  poly_jitter(x, noise_x = 1, noise_y = 1, plot = TRUE)  poly_circularity(x)  poly_circularity_norm(x)  poly_circularity_haralick(x)  poly_mass(x)  poly_spline(x, vertices = 100, k = 2)  poly_smooth(x, niter = 10, n = NULL, prop = NULL, plot = TRUE)  poly_measures(x)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for Polygons — utils_polygon","text":"x 2-column matrix x y coordinates. x list vector coordinates, function applied element using base::lapply() base::sapply(). fp ID point become new first point. Defaults 1. angle angle (0-360) rotate object. plot object plotted? Defaults TRUE. n, prop number proportion coordinates sample perimeter coordinates. poly_smooth(), arguments can used sample points object's perimeter smoothing. noise_x, noise_y numeric factor define noise added x y axes, respectively. See base::jitter() details. vertices number spline vertices create. k number points wrap around ends obtain smooth periodic spline. niter integer indicating number smoothing iterations.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for Polygons — utils_polygon","text":"conv_hull() poly_spline() returns matrix x y coordinates convex hull/smooth line clockwise order. x list, list points returned. poly_area() returns double, numeric vector x list vector points. poly_mass() returns data.frame containing coordinates center mass, well maximum minimum distance contour center mass. poly_slides(), poly_distpts(), poly_spline(), poly_close(), poly_unclose(), poly_rotate(), poly_jitter(), poly_sample(), poly_sample_prop(), poly_measures returns data.frame. poly_perimeter(), poly_lw(), poly_eccentricity(), poly_convexity(), poly_caliper(), poly_elongation(), poly_circularity_norm(), poly_circularity_haralick() returns double.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Utilities for Polygons — utils_polygon","text":"Lee, Y., & Lim, W. (2017). Shoelace Formula: Connecting Area Polygon Vector Cross Product. Mathematics Teacher, 110(8), 631–636. doi:10.5951/mathteacher.110.8.0631 Montero, R. S., Bribiesca, E., Santiago, R., & Bribiesca, E. (2009). State Art Compactness Circularity Measures. International Mathematical Forum, 4(27), 1305–1335. Chen, C.H., P.S.P. Wang. 2005. Handbook Pattern Recognition Computer Vision. 3rd ed. World Scientific.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for Polygons — utils_polygon","text":"","code":"# \\donttest{ library(pliman) # A 2 x 2 square df <- draw_square(side = 2)  # square area poly_area(df) #> [1] 4  # polygon perimeter poly_perimeter(df) #> [1] 6  # center of mass of the square cm <- poly_mass(df) plot_mass(cm)  # The convex hull will be the vertices of the square (conv_square <- conv_hull(df) |> poly_close()) #>   x y #> 4 2 0 #> 5 0 0 #> 2 0 2 #> 3 2 2 #>   2 0 plot_contour(conv_square,              col = \"blue\",              lwd = 6)  poly_area(conv_square) #> [1] 4   ################### Example with a polygon ################## x <- c(0, 1,   2, 3,  5, 2, -1, 0, 0) y <- c(5, 6.5, 7, 3,  1, 1,  0, 2, 5) df_poly <- cbind(x, y)  # area of the polygon plot_polygon(df_poly, fill = \"red\") poly_area(df_poly) #> [1] 18  # perimeter of the polygon poly_perimeter(df_poly) #> [1] 21.27069  # center of mass of polygon cm <- poly_mass(df_poly) plot_mass(cm,  col = \"blue\")  # vertices of the convex hull (conv_poly <- conv_hull(df_poly)) #>       x   y #> [1,]  5 1.0 #> [2,] -1 0.0 #> [3,]  0 5.0 #> [4,]  1 6.5 #> [5,]  2 7.0  # area of the convex hull poly_area(conv_poly) #> [1] 24  plot_polygon(conv_poly,              fill = \"red\",              alpha = 0.2,              add = TRUE)    ############ example of circularity measures ################ tri <- draw_circle(n = 200, plot = FALSE) plot_polygon(tri, aspect_ratio = 1)  poly_circularity_norm(tri) #> [1] 0.9999169  set.seed(1) tri2 <-   draw_circle(n = 200, plot = FALSE) |>   poly_jitter(noise_x = 100, noise_y = 100, plot = FALSE)  plot_polygon(tri2, aspect_ratio = 1)  poly_circularity_norm(tri2) #> [1] 0.7888226 # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for plotting polygons — utils_polygon_plot","title":"Utilities for plotting polygons — utils_polygon_plot","text":"plot_contour() Plot contour lines. plot_polygon() Plots polygon describing objects. plot_mass() Plots center mass along maximum minimum radius. plot_ellipse() Plots ellipse fits major minor axis object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for plotting polygons — utils_polygon_plot","text":"","code":"plot_contour(x, id = NULL, col = \"black\", lwd = 1, ...)  plot_polygon(   x,   fill = \"gray\",   random_fill = TRUE,   points = FALSE,   merge = TRUE,   border = \"black\",   alpha = 1,   add = FALSE,   nrow = NULL,   ncol = NULL,   aspect_ratio = 1,   show_id = TRUE,   xlim = NULL,   ylim = NULL,   ... )  plot_mass(x, id = NULL, col = \"black\", cex = 1, lwd = 1)  plot_ellipse(object, id = NULL, col = \"black\", lwd = 1)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for plotting polygons — utils_polygon_plot","text":"x 2-column matrix x y coordinates. id object identification (numeric) plot contour/ellipse. default (id = NULL), contour plotted objects. col, lwd, cex color, width lines, size point, respectively. ... plot_contour() plot_ellipse() arguments passed graphics::lines(). plot_mass(), arguments passed graphics::points(). plot_polygon(), arguments passed graphics::polygon(). fill, border, alpha color fill polygon, color polygon's border, alpha transparency (1 opaque, 0 transparent). random_fill Fill multiple objects random colors? Defaults TRUE. points Plot points? Defaults FALSE. merge Merge multiple objects single plot? Defaults TRUE. FALSE, single call plot() used objects. Use nrow ncol control number rows columns window. add Add current plot previous one? Defaults FALSE. nrow, ncol number rows columns use composite image. Defaults NULL, .e., square grid produced. aspect_ratio x/y aspect ratio. Defaults 1. set window one data unit y direction equal one data unit x direction. Set aspect_ratio = NULL fit object window size. show_id Shows object id? Defaults TRUE. xlim, ylim numeric vector length 2 (min; max) indicating range x y-axes. object object computed analyze_objects().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for plotting polygons — utils_polygon_plot","text":"NULL object.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_polygon_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for plotting polygons — utils_polygon_plot","text":"","code":"plot_polygon(contours) plot_contour(contours[[1]], id = 6, col = \"red\", lwd = 3)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_rows_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for handling with rows and columns — utils_rows_cols","title":"Utilities for handling with rows and columns — utils_rows_cols","text":"columns_to_rownames(): Move column .data row names. rownames_to_column(): Move row names .data new column. remove_rownames(): Remove row names .data. round_cols() Rounds values numeric variables specified number decimal places (default 2).","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_rows_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for handling with rows and columns — utils_rows_cols","text":"","code":"column_to_rownames(.data, var = \"rowname\")  rownames_to_column(.data, var = \"rowname\")  remove_rownames(.data)  round_cols(.data, digits = 2)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_rows_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for handling with rows and columns — utils_rows_cols","text":".data data frame var Name column use rownames. digits number significant figures. Defaults 2.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_rows_cols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities for handling with rows and columns — utils_rows_cols","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_rows_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for handling with rows and columns — utils_rows_cols","text":"","code":"# \\donttest{ library(pliman) iris2 <- iris |> rownames_to_column() head(iris2) #>   rowname Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1       1          5.1         3.5          1.4         0.2  setosa #> 2       2          4.9         3.0          1.4         0.2  setosa #> 3       3          4.7         3.2          1.3         0.2  setosa #> 4       4          4.6         3.1          1.5         0.2  setosa #> 5       5          5.0         3.6          1.4         0.2  setosa #> 6       6          5.4         3.9          1.7         0.4  setosa iris2$rowname <- paste0(\"r\", iris2$rowname) iris2 |> column_to_rownames(\"rowname\") |> head() #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> r1          5.1         3.5          1.4         0.2  setosa #> r2          4.9         3.0          1.4         0.2  setosa #> r3          4.7         3.2          1.3         0.2  setosa #> r4          4.6         3.1          1.5         0.2  setosa #> r5          5.0         3.6          1.4         0.2  setosa #> r6          5.4         3.9          1.7         0.4  setosa # }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for drawing coordinates of known shapes — utils_shapes","title":"Utilities for drawing coordinates of known shapes — utils_shapes","text":"functions computes coordinates common shapes squares triangles, rectangles circles. draw_circle() Draws perfect circle desired radius. draw_square() Draws square desired side. draw_rectangle() Draws rectangle given two desired sides. draw_trian_equi() Draws equilateral triangle desired side. draw_trian_rect() Draws triangle rectangle given two cathetus. draw_n_tagon() Draws polygons n sides","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for drawing coordinates of known shapes — utils_shapes","text":"","code":"draw_circle(radius = 1, n = 1000, plot = TRUE)  draw_square(side = 2, plot = TRUE)  draw_rectangle(side1 = 2, side2 = 3, plot = TRUE)  draw_trian_equi(side = 2, plot = TRUE)  draw_trian_rect(cat1 = 1, cat2 = 2, plot = TRUE)  draw_n_tagon(n, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for drawing coordinates of known shapes — utils_shapes","text":"radius radius circle. Defaults 1. n number sides n-tagon. plot Plots result? Defaults TRUE. side side square/equilateral triangle. Defaults 2. side1, side2 first second sides rectangle. Defaults 2 3, respectively. cat1, cat2 first second cathetus right triangle. Defaults 1, 2, respectively.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for drawing coordinates of known shapes — utils_shapes","text":"data frame x y coordinates","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_shapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for drawing coordinates of known shapes — utils_shapes","text":"","code":"########## An example of a circle ########## library(pliman) radius <- 3 circ <- draw_circle(radius = radius)   # area pi * radius ^ 2 #> [1] 28.27433 poly_area(circ) #> [1] 28.27415  # perimeter 2 * pi * radius #> [1] 18.84956 poly_perimeter(circ) #> [1] 18.84952  ############ An example of a square ############ side <- 2 (square <- draw_square(side = side))  #>   x y #> 2 0 2 #> 3 2 2 #> 4 2 0 #> 5 0 0  # area side ^ 2 #> [1] 4 poly_area(square) #> [1] 4  # perimeter side * 4 #> [1] 8 poly_perimeter(square) #> [1] 6  ############ An example of a rectangle ############ side1 <- 2 side2 <- 3 (rect <- draw_rectangle())  #>   x y #> 2 0 2 #> 3 3 2 #> 4 3 0 #> 5 0 0  # area poly_area(rect) #> [1] 6  # perimeter poly_perimeter(rect) #> [1] 8 ###########  An example of an equilateral triangle ######### side <- 1 # defaults (trig <- draw_trian_equi(side = side))  #>     x         y #> 2 1.0 0.0000000 #> 3 0.5 0.8660254 #> 4 0.0 0.0000000  ### area (b*h / 2) # height of the triangle (h <- (side * sqrt(3)) / 2) #> [1] 0.8660254 side * h / 2 #> [1] 0.4330127  poly_area(trig) #> [1] 0.4330127  ### perimeter (side * 3) poly_perimeter(trig) #> [1] 2  ########### An example of a rectangle triangle ########## cat1 <- 2 cat2 <- 3 (df <- draw_trian_rect(cat1, cat2))  #>      x y #> [1,] 0 0 #> [2,] 3 0 #> [3,] 0 2 #> [4,] 0 0 # area (cat1 * cat2) / 2 #> [1] 3 poly_area(df) #> [1] 3  # perimeter cat1 + cat2 + sqrt(cat1^2 + cat2^2) #> [1] 8.605551 poly_perimeter(df) #> [1] 8.605551 ############ An creating shapes with n sides ############ side <- 2 (square <- draw_square(side = side))  #>   x y #> 2 0 2 #> 3 2 2 #> 4 2 0 #> 5 0 0  # area side ^ 2 #> [1] 4 poly_area(square) #> [1] 4  # perimeter side * 4 #> [1] 8 poly_perimeter(square) #> [1] 6"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","title":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","text":"functions applies common statistics list objects, returning numeric vector.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","text":"","code":"mean_list(x, ...)  sd_list(x, ...)  max_list(x, ...)  min_list(x, ...)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","text":"x data.frame matrix numeric values. ... arguments passed R base function (e.g, mean(), sd(), etc.)","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","text":"numeric vector.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"These functions applies common statistics to a list of objects, returning a\r\nnumeric vector. — utils_stats","text":"","code":"mean_list(list(a = 1:10, b = 2:20)) #>    a    b  #>  5.5 11.0"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial transformations — utils_transform","title":"Spatial transformations — utils_transform","text":"Performs image rotation reflection image autocrop() Crops automatically  image area objects. image_crop() Crops image desired area. image_trim() Remove pixels edges image (20 default). image_dimension() Gives dimension (width height) image. image_rotate() Rotates image clockwise given angle. image_horizontal() Converts (needed) image horizontal image. image_vertical() Converts (needed) image vertical image. image_hreflect() Performs horizontal reflection image. image_vreflect() Performs vertical reflection image. image_resize() Resize image. See EBImage::resize(). image_contrast() Improve contrast locally performing adaptive histogram equalization. See EBImage::clahe(). image_dilate() Performs image dilatation. See EBImage::dilate(). image_erode() Performs image erosion. See EBImage::erode(). image_opening() Performs erosion followed dilation. See EBImage::opening(). image_closing() Performs dilation followed erosion. See EBImage::closing(). image_filter() Performs median filtering constant time. See EBImage::medianFilter(). image_blur() Performs blurring filter images. See EBImage::gblur(). image_skeleton() Performs image skeletonization.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial transformations — utils_transform","text":"","code":"image_autocrop(   img,   index = \"NB\",   edge = 5,   filter = 3,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_crop(   img,   width = NULL,   height = NULL,   viewer = get_pliman_viewer(),   show = \"rgb\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_dimension(img, parallel = FALSE, workers = NULL, verbose = TRUE)  image_rotate(   img,   angle,   bg_col = \"white\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = TRUE )  image_horizontal(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_vertical(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_hreflect(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_vreflect(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_resize(   img,   rel_size = 100,   width,   height,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_trim(   img,   edge = NULL,   top = NULL,   bottom = NULL,   left = NULL,   right = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_dilate(   img,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_erode(   img,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_opening(   img,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_closing(   img,   kern = NULL,   size = NULL,   shape = \"disc\",   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_skeleton(   img,   kern = NULL,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE,   ... )  image_thinning(   img,   niter = 3,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE,   ... )  image_filter(   img,   size = 2,   cache = 512,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_blur(   img,   sigma = 3,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )  image_contrast(   img,   parallel = FALSE,   workers = NULL,   verbose = TRUE,   plot = FALSE )"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial transformations — utils_transform","text":"img image list images class Image. index index segment image. See image_index() details. Defaults \"NB\" (normalized blue). edge image_autocrop() number pixels edge cropped image. edge = 0 image cropped create bounding rectangle (x y coordinates) around image objects. image_trim(), number pixels removed edges. default, 20 pixels removed edges. filter Performs median filtering binary image. useful remove noise (like dust) improve image autocropping method. See image_filter(). Set FALSE remove median filtering. parallel Processes images asynchronously (parallel) separate R sessions running background machine. may speed processing time image list. number sections set 70% available cores. workers positive numeric scalar function specifying maximum number parallel processes can active time. verbose TRUE (default) summary shown console. plot TRUE plots modified image. Defaults FALSE. width, height image_resize() Width height resized image. arguments can missing. case, image resized according relative size informed rel_size. image_crop() numeric vector indicating pixel range (x y, respectively) maintained cropped image, e.g., width = 100:200 viewer viewer option. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options \"base\" \"mapview\". set \"base\", base R graphics system used interactive plotting. set \"mapview\", mapview package used. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option \"mapview\" functions. show plot mapview viewer, either \"rgb\" \"index\". angle rotation angle degrees. bg_col Color used fill background pixels, defaults \"white\". rel_size relative size resized image. Defaults 100. example, setting rel_size = 50 image width 1280 x 720, new image size 640 x 360. top, bottom, left, right number pixels removed top, bottom, left, right using image_trim(). kern Image object array, containing structuring element. Defaults brushe generated EBImage::makeBrush(). size image_filter() median filter radius (integer). Defaults 3. image_dilate() image_erode() odd number containing size brush pixels. Even numbers rounded next odd one. default depends image resolution computed image resolution (megapixels) times 20. shape character vector indicating shape brush. Can box, disc, diamond, Gaussian line. Default disc. ... Additional arguments passed image_binary(). niter number iterations perform thinning procedure. Defaults 3. Set NULL iterate binary image longer changing. cache L2 cache size system CPU kB (integer). Defaults 512. sigma numeric denoting standard deviation Gaussian filter used blurring. Defaults 3.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial transformations — utils_transform","text":"image_skeleton() returns binary Image object. functions returns  modified version image depending image_*() function used. image list, list length returned.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial transformations — utils_transform","text":"Tiago Olivoto tiagoolivoto@gmail.com","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial transformations — utils_transform","text":"","code":"library(pliman) img <- image_pliman(\"sev_leaf.jpg\") plot(img)  img <- image_resize(img, 50) img1 <- image_rotate(img, 45) img2 <- image_hreflect(img) img3 <- image_vreflect(img) img4 <- image_vertical(img) image_combine(img1, img2, img3, img4)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and get the Working Directory quicky — utils_wd","title":"Set and get the Working Directory quicky — utils_wd","text":"get_wd_here() gets working directory path current script. set_wd_here() sets working directory path current script. open_wd_here() Open File Explorer directory path current script. open_wd() Open File Explorer current working directory.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and get the Working Directory quicky — utils_wd","text":"","code":"set_wd_here(path = NULL)  get_wd_here(path = NULL)  open_wd_here(path = get_wd_here())  open_wd(path = getwd())"},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and get the Working Directory quicky — utils_wd","text":"path Path components project root. Defaults NULL. means directory set path file. path exist, user asked wants create folder.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and get the Working Directory quicky — utils_wd","text":"get_wd_here() returns full-path directory name. get_wd_here() returns message showing current working directory. open_wd_here() Opens File Explorer path returned get_wd_here().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/utils_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and get the Working Directory quicky — utils_wd","text":"","code":"if (FALSE) { get_wd_here() set_wd_here() open_wd_here() }"},{"path":"https://tiagoolivoto.github.io/pliman/reference/watershed2.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative watershed algorithm — watershed2","title":"Alternative watershed algorithm — watershed2","text":"basic watershed algorithm can used faster alternative EBImage::watershed(). strongly suggest using round objects, since consider 'extension' 'tolerance' arguments EBImage::watershed().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/watershed2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative watershed algorithm — watershed2","text":"","code":"watershed2(binary, dist_thresh = 0.75, plot = TRUE)"},{"path":"https://tiagoolivoto.github.io/pliman/reference/watershed2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative watershed algorithm — watershed2","text":"binary binary image dist_thresh distance threshold create plot TRUE (default) plots labeled objects","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/watershed2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternative watershed algorithm — watershed2","text":"labelled version binary.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/reference/watershed2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternative watershed algorithm — watershed2","text":"","code":"library(pliman) img <- image_pliman(\"soybean_touch.jpg\") binary <- image_binary(img, \"B\")[[1]]  wts <- watershed2(binary)  range(wts) #> [1]  0 30"},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with pliman","title":"Getting help with pliman","text":"Thanks using pliman! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with pliman","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with pliman","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with pliman","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":[]},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-2-0-1","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 2.0.1","text":"object_export_shp() object_export() export objects image multiple images current working directory. plot_index_shp() plot rectangles top RGB image, rectangle colored based quantitative variable.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"pliman 2.0.1","text":"Fix bug poly_center() calling column position instead column name (X1)","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-200","dir":"Changelog","previous_headings":"","what":"pliman 2.0.0","title":"pliman 2.0.0","text":"CRAN release: 2023-07-15","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-2-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 2.0.0","text":"analyze_objects_iter() execute interactive section analyze_objects(). measure_disease_byl() measure disease severity ‘leaf’ image several leaves. object_split() split multiples objects image list images. pca(), plot.pca(), get_biplot() helper functions perform Principal Component Analysis. rownames_to_column(), column_to_rownames(), separate_col(), round_cols() helper functions manipulate data. set poly_*() function analyze polygons. based set coordinate points describing edge object(s). See ?utils_polygon details. get_wd_here() set_wd_here() deal working directories. apply_fun_to_imgs() apply function (functions) set images stored working directory. make_brush(), make_mask(), image_segment_mask() create masks segment images based mask. image_segment_manual(), image segment kmeans(), image_segment_mask() perform image segmentation different ways. new family efourier_*() functions performs Elliptical Fourier Analysis. efourier(): Elliptical Fourier Analysis efourier_coefs(): Get Fourier coefficients efourier_error(): Erros original reconstructed outline efourier_inv(): Inverse Elliptical Fourier Analysis efourier_norm(): Normalized Fourier coefficients efourier_power(): Power Fourier Analysis efourier_shape(): Draw shapes based Fourier coefficients new family landmarks_*() functions handle landmarks landmarks(): Create image landmarks landmarks_add(): Artificially inflates number landmarks landmarks_angle(): Angles landmarks landmarks_dist(): Distances landmarks landmarks_regradi(): Pseudolandmarks equally spaced angles object_edge() detect edges images using Sobel-Feldman Operator. new family *_shp() functions analyze shape files. image_shp() construct shape file image. object_split_shp() splits image objects based shapefile. analyze_objects_shp() analyze objects using shapefiles. measure_disease_shp() measure disease using shapefiles. New plot_index() function plot image index using raster package, optionaly using mapview package show image index. New image_view() function create interactive map view image. function allows users interactively edit analyze image using mapview mapedit packages. New image_prepare_mv() function prepare image analyzed analyze_objects_shp(). function aligns crops image using either base mapview visualization.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"pliman 2.0.0","text":"New viewer option added. Now, iterative functions pick_palette() measure_disease_iter() argument viewer. provided, value retrieved using get_pliman_viewer(). option controls type viewer use interactive plotting. available options “base” “mapview”. set “base”, base R graphics system used interactive plotting. set “mapview”, mapview package used, allowing users draw shapes like points polygons mapedit package. set argument globally functions package, can use set_pliman_viewer() function. example, can run set_pliman_viewer(\"mapview\") set viewer option “mapview” functions. Haralick’s features quantify pixel texture image objects included. Several measures added analyze_objects(). function now wraps poly_*() functions compute shape measures width, length, elongation, circularity. Haralick’s features now computed default. . improvement cost slight increase computation time. analyze_objects(), measure_disease(), measure_disease_byl() now filter argument applies median filtering binary mask. useful reduce noise segmentation objects. Arguments reference_larger reference_smaller included analyze_objects() indicating larger/smaller object image must used reference object. Arguments efourier nharm included analyze_objects(). efourier = TRUE, Elliptical Fourier analysis computed object depending number harmonics (nharm). Logical arguments reference_larger reference_smaller included analyze_objects(). indicates larger/smaller object image must used reference object. valid reference = TRUE reference_area indicates area reference object. IMPORTANT. reference_smaller used, objects area smaller 1% mean objects ignored. used remove possible noise image dust. , sure reference object area removed cutpoint. Rcpp RcppArmadillo dependencies included, allowing implementation C++ code. dramatically reduce time computing functions/procesures. example, wave. Reduction time processing 5 minutes less 1 second using new object_rgb() function extract RGB values image (1445 x 1084) ~1400 objects. Reduction time processing set *_poly() functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"pliman 2.0.0","text":"get_measures() now remove known objects results using id argument. right-hand argument measure get_measures() now accepts numeric object stored global environment. analyze_objects() now returns objects object_index object_rgb argument pattern used. Thanks João Paulo Oliveira Ribeiro alerting regarding issue. New argument reference analyze_objects() adjust measures using reference object image. Argument object_index analyze_objects() now recognizes names built-indexes (see ?pliman_indexes()). plot.image_index() limits number pixels reduce plotting time. show_image argument changed plot standardize argument across functions. rgb_to_hsb() optimized using C++. Change rows cols nrow ncol, respectively, functions analyze_objects_shp(), image_shp(), measure_disease_shp(), object_split_shp(), standardize arguments across functions.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-110","dir":"Changelog","previous_headings":"","what":"pliman 1.1.0","title":"pliman 1.1.0","text":"CRAN release: 2021-12-10","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 1.1.0","text":"measure_disease_iter() measure disease interactive section. pick_count() count objects image manually. pick_palette() create image palette picking color point(s) image pick_rgb() pick RGB values selected point(s) image. summary_index() summary index either within objects. pliman now exports foward-pipe operator %>%. Code poorman package.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"pliman 1.1.0","text":"Deprecated functions last version (count_objects(), image_show(), leaf_area(), objects_rgb(), prop_segmented(), symptomatic_area()) removed. Use Bootstrap 5 pkgdown 2.0.0 package site.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-100","dir":"Changelog","previous_headings":"","what":"pliman 1.0.0","title":"pliman 1.0.0","text":"CRAN release: 2021-11-09","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 1.0.0","text":"analyze_objects() now used main function compute number shape objects. measure_disease() now used main function perform phytopatometry studies. function can compute symptomatic area, well number shape lesions. image_segment_iter() used performs iterative image segmentation. conv_hull(), poly_area(), poly_mass(), poly_spline(), plot_contour(), plot_ellipse() utilities analyzing polygons. dpi() compute resolution (dots per inch) image. tune_tolerance() tunning tolerance parameter.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"deprecated-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions.","title":"pliman 1.0.0","text":"objects_rgb() depracated future. Now, compute index object use object_index argument analyze_objects(), example, analyze_objects(object_index = \"B\"). leaf_area() depracated future. Now, combine analyze_objects() get_measures() obtain area shape objects (leaves). prop_segmented() now deprecated favour image_segment_iter(). count_lesions() now deprecated. Now, compute number shape lesions, use argument show_features = TRUE measure_disease(). image_show() now deprecated favour plot().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"pliman 1.0.0","text":"Include fill_hull argument symptomatic_area() count_lesions() Improve image_contrast() function avoid error regarding image resolution. New argument subfolder image_export() export image subfolder. Now EBImage installation checked pliman installed. image_pliman() now returns image object instead path image. , necessarily call within image_import().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-030","dir":"Changelog","previous_headings":"","what":"pliman 0.3.0","title":"pliman 0.3.0","text":"CRAN release: 2021-06-10","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"pliman 0.3.0","text":"image_autocrop() automatic image cropping. image_filter() perform median-based filtering. image_contrast() improve contrast performing adaptive histogram equalization object_coord() get object coordinates (optionally) draw bounding rectangle around multiple objects image. object_id() get object identification image. object_isolate() isolate object image. prop_segmented() perform (iterative) image segmentation pixels proportion.","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"pliman 0.3.0","text":"New argument filter count_objects() prop_segmented().","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-020","dir":"Changelog","previous_headings":"","what":"pliman 0.2.0","title":"pliman 0.2.0","text":"CRAN release: 2021-05-15 Includes suggestions given CRAN team first submission","code":""},{"path":"https://tiagoolivoto.github.io/pliman/news/index.html","id":"pliman-010","dir":"Changelog","previous_headings":"","what":"pliman 0.1.0","title":"pliman 0.1.0","text":"first version pliman package submitted CRAN.","code":""}]
