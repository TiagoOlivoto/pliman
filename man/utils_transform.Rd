% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_imagem.R
\name{utils_transform}
\alias{utils_transform}
\alias{image_autocrop}
\alias{image_dimension}
\alias{image_rotate}
\alias{image_horizontal}
\alias{image_vertical}
\alias{image_hreflect}
\alias{image_vreflect}
\alias{image_resize}
\alias{image_trim}
\alias{image_filter}
\alias{image_blur}
\alias{image_contrast}
\title{Spatial transformations}
\usage{
image_autocrop(
  image,
  edge = 5,
  parallel = FALSE,
  workers = NULL,
  verbose = TRUE
)

image_dimension(image, parallel = FALSE, workers = NULL, verbose = TRUE)

image_rotate(
  image,
  angle,
  bg_col = "white",
  parallel = FALSE,
  workers = NULL,
  verbose = TRUE
)

image_horizontal(image, parallel = FALSE, workers = NULL, verbose = TRUE)

image_vertical(image, parallel = FALSE, workers = NULL, verbose = TRUE)

image_hreflect(image, parallel = FALSE, workers = NULL, verbose = TRUE)

image_vreflect(image, parallel = FALSE, workers = NULL, verbose = TRUE)

image_resize(
  image,
  rel_size = 100,
  width,
  height,
  parallel = FALSE,
  workers = NULL,
  verbose = TRUE
)

image_trim(
  image,
  edge = NULL,
  top = NULL,
  bottom = NULL,
  left = NULL,
  right = NULL,
  parallel = FALSE,
  workers = NULL,
  verbose = TRUE
)

image_filter(
  image,
  size = 2,
  cache = 512,
  parallel = FALSE,
  workers = NULL,
  verbose = TRUE
)

image_blur(image, sigma = 3, parallel = FALSE, workers = NULL, verbose = TRUE)

image_contrast(image, parallel = FALSE, workers = NULL, verbose = TRUE)
}
\arguments{
\item{image}{An image or a list of images of class \code{Image}.}

\item{edge}{\itemize{
\item for \code{\link[=image_autocrop]{image_autocrop()}} the number of pixels in the edge of the cropped
image. If \code{edge = 0} the image will be cropped to create a bounding rectangle
(x and y coordinates) around the image objects.
\item for \code{\link[=image_trim]{image_trim()}}, the number of pixels removed from the edges. By
default, 20 pixels are removed from all the edges.
}}

\item{parallel}{Processes the images asynchronously (in parallel) in separate
R sessions running in the background on the same machine. It may speed up
the processing time when \code{image} is a list. The number of sections is set
up to 70\% of available cores.}

\item{workers}{A positive numeric scalar or a function specifying the maximum
number of parallel processes that can be active at the same time.}

\item{verbose}{If \code{TRUE} (default) a summary is shown in the console.}

\item{angle}{The rotation angle in degrees.}

\item{bg_col}{Color used to fill the background pixels, defaults to \code{"white"}.}

\item{rel_size}{The relative size of the resized image. Defaults to 100. For
example, setting \code{rel_size = 50} to an image of width \verb{1280 x 720}, the new
image will have a size of \verb{640 x 360}.}

\item{width, height}{Width and height of the resized image. These arguments
can be missing. In this case, the image is resized according to the
relative size informed in \code{rel_size}.}

\item{top, bottom, left, right}{The number of pixels removed from \code{top},
\code{bottom}, \code{left}, and \code{right} when using \code{\link[=image_trim]{image_trim()}}.}

\item{size}{The median filter radius (integer). Defaults to \code{3}.}

\item{cache}{The the L2 cache size of the system CPU in kB (integer).
Defaults to \code{512}.}

\item{sigma}{A numeric denoting the standard deviation of the Gaussian filter
used for blurring. Defaults to \code{3}.}
}
\value{
A modified version of \code{image} depending on the function used.
}
\description{
Performs image rotation and reflection
\itemize{
\item \code{image_autocrop()} Provides automatic image cropping.
\item \code{image_trim()} Remove pixels from the edges of an image (20 by default).
\item \code{image_dimension()} Gives the dimension (width and height) of an image.
\item \code{image_rotate()} Rotates the image clockwise by the given angle.
\item \code{image_horizontal()} Converts (if needed) an image to a horizontal image.
\item \code{image_vertical()} Converts (if needed) an image to a vertical image.
\item \code{image_hreflect()} Performs horizontal reflection of the \code{image}.
\item \code{image_vreflect()} Performs vertical reflection of the \code{image}.
\item \code{image_resize()} Resize the \code{image}. See more at \code{\link[EBImage:spatial]{EBImage::resize()}}.
\item \code{image_contrast()} Improve contrast locally by performing adaptive
histogram equalization. See more at \code{\link[EBImage:clahe]{EBImage::clahe()}}.
\item \code{image_filter()} Performs median filtering in constant time. See more at
\code{\link[EBImage:medianFilter]{EBImage::medianFilter()}}.
\item \code{image_blur()} Performs blurring filter of images. See more at
\code{\link[EBImage:gblur]{EBImage::gblur()}}.
}
}
\examples{
library(pliman)
img <- image_import(image_pliman("sev_leaf.jpg"))
plot(img)
img <- image_resize(img, 50)
img1 <- image_rotate(img, 45)
img2 <- image_hreflect(img)
img3 <- image_vreflect(img)
img4 <- image_vertical(img)
image_combine(img1, img2, img3, img4)
}
\author{
Tiago Olivoto \email{tiagoolivoto@gmail.com}
}
